
SpeakerRecognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bb70  08009ba8  08009ba8  00019ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015718  08015718  00025718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015720  08015720  00025720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015724  08015724  00025724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000085a0  20000000  08015728  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000385a0  2**0
                  CONTENTS
  8 .bss          00000a18  200085a0  200085a0  000385a0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20008fb8  20008fb8  000385a0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000385a0  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00004a14  00000000  00000000  000385d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0002ead1  00000000  00000000  0003cfe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000050d2  00000000  00000000  0006bab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015c41  00000000  00000000  00070b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001278  00000000  00000000  000867c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000017e8  00000000  00000000  00087a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c54a  00000000  00000000  00089228  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006cd6  00000000  00000000  00095772  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0009c448  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200085a0 	.word	0x200085a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b90 	.word	0x08009b90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200085a4 	.word	0x200085a4
 80001ec:	08009b90 	.word	0x08009b90

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002a0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002a2:	2b01      	cmp	r3, #1
	IT       LS
 80002a4:	bf98      	it	ls
	BXLS     lr
 80002a6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002a8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ac:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ae:	089b      	lsrs	r3, r3, #2

080002b0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002b0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002b4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002b8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002ba:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002be:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80002c0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80002c2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80002c4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80002c6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002ca:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002ce:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002d0:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002d4:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002d8:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002dc:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002e0:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 80002e2:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 80002e6:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 80002ea:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 80002ec:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 80002f0:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 80002f4:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 80002f8:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 80002fc:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 80002fe:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000300:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000302:	d1d5      	bne.n	80002b0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000304:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000308:	4770      	bx	lr

0800030a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800030a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800030c:	2b01      	cmp	r3, #1
	IT       LS
 800030e:	bf98      	it	ls
	BXLS     lr
 8000310:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000312:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000316:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000318:	089b      	lsrs	r3, r3, #2

0800031a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800031a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800031e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000322:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000324:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000328:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800032c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000330:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000334:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000338:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800033c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000340:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000342:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000346:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800034a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800034e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000352:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000354:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000356:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000358:	d1df      	bne.n	800031a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800035a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800049e:	f1a4 0401 	sub.w	r4, r4, #1
 80004a2:	d1e9      	bne.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f092 0f00 	teq	r2, #0
 800064a:	bf14      	ite	ne
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	e720      	b.n	80004a4 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_ul2d>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	b530      	push	{r4, r5, lr}
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	e00a      	b.n	800068a <__aeabi_l2d+0x16>

08000674 <__aeabi_l2d>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	b530      	push	{r4, r5, lr}
 800067e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000682:	d502      	bpl.n	800068a <__aeabi_l2d+0x16>
 8000684:	4240      	negs	r0, r0
 8000686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800068e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000692:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000696:	f43f aedc 	beq.w	8000452 <__adddf3+0xe6>
 800069a:	f04f 0203 	mov.w	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006b2:	f1c2 0320 	rsb	r3, r2, #32
 80006b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006ba:	fa20 f002 	lsr.w	r0, r0, r2
 80006be:	fa01 fe03 	lsl.w	lr, r1, r3
 80006c2:	ea40 000e 	orr.w	r0, r0, lr
 80006c6:	fa21 f102 	lsr.w	r1, r1, r2
 80006ca:	4414      	add	r4, r2
 80006cc:	e6c1      	b.n	8000452 <__adddf3+0xe6>
 80006ce:	bf00      	nop

080006d0 <__aeabi_dmul>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006de:	bf1d      	ittte	ne
 80006e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006e4:	ea94 0f0c 	teqne	r4, ip
 80006e8:	ea95 0f0c 	teqne	r5, ip
 80006ec:	f000 f8de 	bleq	80008ac <__aeabi_dmul+0x1dc>
 80006f0:	442c      	add	r4, r5
 80006f2:	ea81 0603 	eor.w	r6, r1, r3
 80006f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000702:	bf18      	it	ne
 8000704:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000708:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800070c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000710:	d038      	beq.n	8000784 <__aeabi_dmul+0xb4>
 8000712:	fba0 ce02 	umull	ip, lr, r0, r2
 8000716:	f04f 0500 	mov.w	r5, #0
 800071a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800071e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000722:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000726:	f04f 0600 	mov.w	r6, #0
 800072a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800072e:	f09c 0f00 	teq	ip, #0
 8000732:	bf18      	it	ne
 8000734:	f04e 0e01 	orrne.w	lr, lr, #1
 8000738:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800073c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000740:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000744:	d204      	bcs.n	8000750 <__aeabi_dmul+0x80>
 8000746:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800074a:	416d      	adcs	r5, r5
 800074c:	eb46 0606 	adc.w	r6, r6, r6
 8000750:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000754:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000758:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800075c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000760:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000764:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000768:	bf88      	it	hi
 800076a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800076e:	d81e      	bhi.n	80007ae <__aeabi_dmul+0xde>
 8000770:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000774:	bf08      	it	eq
 8000776:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800077a:	f150 0000 	adcs.w	r0, r0, #0
 800077e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000788:	ea46 0101 	orr.w	r1, r6, r1
 800078c:	ea40 0002 	orr.w	r0, r0, r2
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000798:	bfc2      	ittt	gt
 800079a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800079e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007a2:	bd70      	popgt	{r4, r5, r6, pc}
 80007a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a8:	f04f 0e00 	mov.w	lr, #0
 80007ac:	3c01      	subs	r4, #1
 80007ae:	f300 80ab 	bgt.w	8000908 <__aeabi_dmul+0x238>
 80007b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007b6:	bfde      	ittt	le
 80007b8:	2000      	movle	r0, #0
 80007ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007be:	bd70      	pople	{r4, r5, r6, pc}
 80007c0:	f1c4 0400 	rsb	r4, r4, #0
 80007c4:	3c20      	subs	r4, #32
 80007c6:	da35      	bge.n	8000834 <__aeabi_dmul+0x164>
 80007c8:	340c      	adds	r4, #12
 80007ca:	dc1b      	bgt.n	8000804 <__aeabi_dmul+0x134>
 80007cc:	f104 0414 	add.w	r4, r4, #20
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f305 	lsl.w	r3, r0, r5
 80007d8:	fa20 f004 	lsr.w	r0, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f0:	fa21 f604 	lsr.w	r6, r1, r4
 80007f4:	eb42 0106 	adc.w	r1, r2, r6
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f1c4 040c 	rsb	r4, r4, #12
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f304 	lsl.w	r3, r0, r4
 8000810:	fa20 f005 	lsr.w	r0, r0, r5
 8000814:	fa01 f204 	lsl.w	r2, r1, r4
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000824:	f141 0100 	adc.w	r1, r1, #0
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f1c4 0520 	rsb	r5, r4, #32
 8000838:	fa00 f205 	lsl.w	r2, r0, r5
 800083c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000840:	fa20 f304 	lsr.w	r3, r0, r4
 8000844:	fa01 f205 	lsl.w	r2, r1, r5
 8000848:	ea43 0302 	orr.w	r3, r3, r2
 800084c:	fa21 f004 	lsr.w	r0, r1, r4
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	fa21 f204 	lsr.w	r2, r1, r4
 8000858:	ea20 0002 	bic.w	r0, r0, r2
 800085c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f094 0f00 	teq	r4, #0
 8000870:	d10f      	bne.n	8000892 <__aeabi_dmul+0x1c2>
 8000872:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000876:	0040      	lsls	r0, r0, #1
 8000878:	eb41 0101 	adc.w	r1, r1, r1
 800087c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000880:	bf08      	it	eq
 8000882:	3c01      	subeq	r4, #1
 8000884:	d0f7      	beq.n	8000876 <__aeabi_dmul+0x1a6>
 8000886:	ea41 0106 	orr.w	r1, r1, r6
 800088a:	f095 0f00 	teq	r5, #0
 800088e:	bf18      	it	ne
 8000890:	4770      	bxne	lr
 8000892:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	eb43 0303 	adc.w	r3, r3, r3
 800089c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a0:	bf08      	it	eq
 80008a2:	3d01      	subeq	r5, #1
 80008a4:	d0f7      	beq.n	8000896 <__aeabi_dmul+0x1c6>
 80008a6:	ea43 0306 	orr.w	r3, r3, r6
 80008aa:	4770      	bx	lr
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b4:	bf18      	it	ne
 80008b6:	ea95 0f0c 	teqne	r5, ip
 80008ba:	d00c      	beq.n	80008d6 <__aeabi_dmul+0x206>
 80008bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c0:	bf18      	it	ne
 80008c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c6:	d1d1      	bne.n	800086c <__aeabi_dmul+0x19c>
 80008c8:	ea81 0103 	eor.w	r1, r1, r3
 80008cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d0:	f04f 0000 	mov.w	r0, #0
 80008d4:	bd70      	pop	{r4, r5, r6, pc}
 80008d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008da:	bf06      	itte	eq
 80008dc:	4610      	moveq	r0, r2
 80008de:	4619      	moveq	r1, r3
 80008e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e4:	d019      	beq.n	800091a <__aeabi_dmul+0x24a>
 80008e6:	ea94 0f0c 	teq	r4, ip
 80008ea:	d102      	bne.n	80008f2 <__aeabi_dmul+0x222>
 80008ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f0:	d113      	bne.n	800091a <__aeabi_dmul+0x24a>
 80008f2:	ea95 0f0c 	teq	r5, ip
 80008f6:	d105      	bne.n	8000904 <__aeabi_dmul+0x234>
 80008f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008fc:	bf1c      	itt	ne
 80008fe:	4610      	movne	r0, r2
 8000900:	4619      	movne	r1, r3
 8000902:	d10a      	bne.n	800091a <__aeabi_dmul+0x24a>
 8000904:	ea81 0103 	eor.w	r1, r1, r3
 8000908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800090c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000910:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800091e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000922:	bd70      	pop	{r4, r5, r6, pc}

08000924 <__aeabi_ddiv>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800092a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800092e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000932:	bf1d      	ittte	ne
 8000934:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000938:	ea94 0f0c 	teqne	r4, ip
 800093c:	ea95 0f0c 	teqne	r5, ip
 8000940:	f000 f8a7 	bleq	8000a92 <__aeabi_ddiv+0x16e>
 8000944:	eba4 0405 	sub.w	r4, r4, r5
 8000948:	ea81 0e03 	eor.w	lr, r1, r3
 800094c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000950:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000954:	f000 8088 	beq.w	8000a68 <__aeabi_ddiv+0x144>
 8000958:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800095c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000960:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000964:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000968:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800096c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000970:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000974:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000978:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800097c:	429d      	cmp	r5, r3
 800097e:	bf08      	it	eq
 8000980:	4296      	cmpeq	r6, r2
 8000982:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000986:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800098a:	d202      	bcs.n	8000992 <__aeabi_ddiv+0x6e>
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000992:	1ab6      	subs	r6, r6, r2
 8000994:	eb65 0503 	sbc.w	r5, r5, r3
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a00:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a04:	d018      	beq.n	8000a38 <__aeabi_ddiv+0x114>
 8000a06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a22:	d1c0      	bne.n	80009a6 <__aeabi_ddiv+0x82>
 8000a24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a28:	d10b      	bne.n	8000a42 <__aeabi_ddiv+0x11e>
 8000a2a:	ea41 0100 	orr.w	r1, r1, r0
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a36:	e7b6      	b.n	80009a6 <__aeabi_ddiv+0x82>
 8000a38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a3c:	bf04      	itt	eq
 8000a3e:	4301      	orreq	r1, r0
 8000a40:	2000      	moveq	r0, #0
 8000a42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a46:	bf88      	it	hi
 8000a48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a4c:	f63f aeaf 	bhi.w	80007ae <__aeabi_dmul+0xde>
 8000a50:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a54:	bf04      	itt	eq
 8000a56:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a5e:	f150 0000 	adcs.w	r0, r0, #0
 8000a62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a74:	bfc2      	ittt	gt
 8000a76:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a84:	f04f 0e00 	mov.w	lr, #0
 8000a88:	3c01      	subs	r4, #1
 8000a8a:	e690      	b.n	80007ae <__aeabi_dmul+0xde>
 8000a8c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a90:	e68d      	b.n	80007ae <__aeabi_dmul+0xde>
 8000a92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a96:	ea94 0f0c 	teq	r4, ip
 8000a9a:	bf08      	it	eq
 8000a9c:	ea95 0f0c 	teqeq	r5, ip
 8000aa0:	f43f af3b 	beq.w	800091a <__aeabi_dmul+0x24a>
 8000aa4:	ea94 0f0c 	teq	r4, ip
 8000aa8:	d10a      	bne.n	8000ac0 <__aeabi_ddiv+0x19c>
 8000aaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aae:	f47f af34 	bne.w	800091a <__aeabi_dmul+0x24a>
 8000ab2:	ea95 0f0c 	teq	r5, ip
 8000ab6:	f47f af25 	bne.w	8000904 <__aeabi_dmul+0x234>
 8000aba:	4610      	mov	r0, r2
 8000abc:	4619      	mov	r1, r3
 8000abe:	e72c      	b.n	800091a <__aeabi_dmul+0x24a>
 8000ac0:	ea95 0f0c 	teq	r5, ip
 8000ac4:	d106      	bne.n	8000ad4 <__aeabi_ddiv+0x1b0>
 8000ac6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aca:	f43f aefd 	beq.w	80008c8 <__aeabi_dmul+0x1f8>
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	e722      	b.n	800091a <__aeabi_dmul+0x24a>
 8000ad4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad8:	bf18      	it	ne
 8000ada:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ade:	f47f aec5 	bne.w	800086c <__aeabi_dmul+0x19c>
 8000ae2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ae6:	f47f af0d 	bne.w	8000904 <__aeabi_dmul+0x234>
 8000aea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aee:	f47f aeeb 	bne.w	80008c8 <__aeabi_dmul+0x1f8>
 8000af2:	e712      	b.n	800091a <__aeabi_dmul+0x24a>

08000af4 <__gedf2>:
 8000af4:	f04f 3cff 	mov.w	ip, #4294967295
 8000af8:	e006      	b.n	8000b08 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__ledf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	e002      	b.n	8000b08 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__cmpdf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b18:	bf18      	it	ne
 8000b1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b1e:	d01b      	beq.n	8000b58 <__cmpdf2+0x54>
 8000b20:	b001      	add	sp, #4
 8000b22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b26:	bf0c      	ite	eq
 8000b28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b2c:	ea91 0f03 	teqne	r1, r3
 8000b30:	bf02      	ittt	eq
 8000b32:	ea90 0f02 	teqeq	r0, r2
 8000b36:	2000      	moveq	r0, #0
 8000b38:	4770      	bxeq	lr
 8000b3a:	f110 0f00 	cmn.w	r0, #0
 8000b3e:	ea91 0f03 	teq	r1, r3
 8000b42:	bf58      	it	pl
 8000b44:	4299      	cmppl	r1, r3
 8000b46:	bf08      	it	eq
 8000b48:	4290      	cmpeq	r0, r2
 8000b4a:	bf2c      	ite	cs
 8000b4c:	17d8      	asrcs	r0, r3, #31
 8000b4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b52:	f040 0001 	orr.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__cmpdf2+0x64>
 8000b62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b66:	d107      	bne.n	8000b78 <__cmpdf2+0x74>
 8000b68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b70:	d1d6      	bne.n	8000b20 <__cmpdf2+0x1c>
 8000b72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b76:	d0d3      	beq.n	8000b20 <__cmpdf2+0x1c>
 8000b78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_cdrcmple>:
 8000b80:	4684      	mov	ip, r0
 8000b82:	4610      	mov	r0, r2
 8000b84:	4662      	mov	r2, ip
 8000b86:	468c      	mov	ip, r1
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	e000      	b.n	8000b90 <__aeabi_cdcmpeq>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_cdcmpeq>:
 8000b90:	b501      	push	{r0, lr}
 8000b92:	f7ff ffb7 	bl	8000b04 <__cmpdf2>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	bf48      	it	mi
 8000b9a:	f110 0f00 	cmnmi.w	r0, #0
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <__aeabi_dcmpeq>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff fff4 	bl	8000b90 <__aeabi_cdcmpeq>
 8000ba8:	bf0c      	ite	eq
 8000baa:	2001      	moveq	r0, #1
 8000bac:	2000      	movne	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmplt>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffea 	bl	8000b90 <__aeabi_cdcmpeq>
 8000bbc:	bf34      	ite	cc
 8000bbe:	2001      	movcc	r0, #1
 8000bc0:	2000      	movcs	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmple>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffe0 	bl	8000b90 <__aeabi_cdcmpeq>
 8000bd0:	bf94      	ite	ls
 8000bd2:	2001      	movls	r0, #1
 8000bd4:	2000      	movhi	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpge>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffce 	bl	8000b80 <__aeabi_cdrcmple>
 8000be4:	bf94      	ite	ls
 8000be6:	2001      	movls	r0, #1
 8000be8:	2000      	movhi	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmpgt>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffc4 	bl	8000b80 <__aeabi_cdrcmple>
 8000bf8:	bf34      	ite	cc
 8000bfa:	2001      	movcc	r0, #1
 8000bfc:	2000      	movcs	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpun>:
 8000c04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c0c:	d102      	bne.n	8000c14 <__aeabi_dcmpun+0x10>
 8000c0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c12:	d10a      	bne.n	8000c2a <__aeabi_dcmpun+0x26>
 8000c14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c1c:	d102      	bne.n	8000c24 <__aeabi_dcmpun+0x20>
 8000c1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_dcmpun+0x26>
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0001 	mov.w	r0, #1
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2iz>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c38:	d215      	bcs.n	8000c66 <__aeabi_d2iz+0x36>
 8000c3a:	d511      	bpl.n	8000c60 <__aeabi_d2iz+0x30>
 8000c3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c44:	d912      	bls.n	8000c6c <__aeabi_d2iz+0x3c>
 8000c46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c56:	fa23 f002 	lsr.w	r0, r3, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	4240      	negne	r0, r0
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6a:	d105      	bne.n	8000c78 <__aeabi_d2iz+0x48>
 8000c6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	bf08      	it	eq
 8000c72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_d2f>:
 8000c80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c88:	bf24      	itt	cs
 8000c8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c92:	d90d      	bls.n	8000cb0 <__aeabi_d2f+0x30>
 8000c94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ca4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca8:	bf08      	it	eq
 8000caa:	f020 0001 	biceq.w	r0, r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cb4:	d121      	bne.n	8000cfa <__aeabi_d2f+0x7a>
 8000cb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cba:	bfbc      	itt	lt
 8000cbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc0:	4770      	bxlt	lr
 8000cc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cca:	f1c2 0218 	rsb	r2, r2, #24
 8000cce:	f1c2 0c20 	rsb	ip, r2, #32
 8000cd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cda:	bf18      	it	ne
 8000cdc:	f040 0001 	orrne.w	r0, r0, #1
 8000ce0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cec:	ea40 000c 	orr.w	r0, r0, ip
 8000cf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf8:	e7cc      	b.n	8000c94 <__aeabi_d2f+0x14>
 8000cfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cfe:	d107      	bne.n	8000d10 <__aeabi_d2f+0x90>
 8000d00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d04:	bf1e      	ittt	ne
 8000d06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bxne	lr
 8000d10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_uldivmod>:
 8000d20:	b953      	cbnz	r3, 8000d38 <__aeabi_uldivmod+0x18>
 8000d22:	b94a      	cbnz	r2, 8000d38 <__aeabi_uldivmod+0x18>
 8000d24:	2900      	cmp	r1, #0
 8000d26:	bf08      	it	eq
 8000d28:	2800      	cmpeq	r0, #0
 8000d2a:	bf1c      	itt	ne
 8000d2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d30:	f04f 30ff 	movne.w	r0, #4294967295
 8000d34:	f000 b97a 	b.w	800102c <__aeabi_idiv0>
 8000d38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d40:	f000 f806 	bl	8000d50 <__udivmoddi4>
 8000d44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4c:	b004      	add	sp, #16
 8000d4e:	4770      	bx	lr

08000d50 <__udivmoddi4>:
 8000d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d54:	468c      	mov	ip, r1
 8000d56:	460d      	mov	r5, r1
 8000d58:	4604      	mov	r4, r0
 8000d5a:	9e08      	ldr	r6, [sp, #32]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d151      	bne.n	8000e04 <__udivmoddi4+0xb4>
 8000d60:	428a      	cmp	r2, r1
 8000d62:	4617      	mov	r7, r2
 8000d64:	d96d      	bls.n	8000e42 <__udivmoddi4+0xf2>
 8000d66:	fab2 fe82 	clz	lr, r2
 8000d6a:	f1be 0f00 	cmp.w	lr, #0
 8000d6e:	d00b      	beq.n	8000d88 <__udivmoddi4+0x38>
 8000d70:	f1ce 0c20 	rsb	ip, lr, #32
 8000d74:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d78:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d7c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d80:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d88:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d8c:	0c25      	lsrs	r5, r4, #16
 8000d8e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d92:	fa1f f987 	uxth.w	r9, r7
 8000d96:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d9a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d9e:	fb08 f309 	mul.w	r3, r8, r9
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x6c>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000dac:	f080 8123 	bcs.w	8000ff6 <__udivmoddi4+0x2a6>
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	f240 8120 	bls.w	8000ff6 <__udivmoddi4+0x2a6>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	443d      	add	r5, r7
 8000dbc:	1aed      	subs	r5, r5, r3
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000dc4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000dc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dcc:	fb00 f909 	mul.w	r9, r0, r9
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x98>
 8000dd4:	19e4      	adds	r4, r4, r7
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	f080 810a 	bcs.w	8000ff2 <__udivmoddi4+0x2a2>
 8000dde:	45a1      	cmp	r9, r4
 8000de0:	f240 8107 	bls.w	8000ff2 <__udivmoddi4+0x2a2>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	eba4 0409 	sub.w	r4, r4, r9
 8000dec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df0:	2100      	movs	r1, #0
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d061      	beq.n	8000eba <__udivmoddi4+0x16a>
 8000df6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	6034      	str	r4, [r6, #0]
 8000dfe:	6073      	str	r3, [r6, #4]
 8000e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xc8>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d054      	beq.n	8000eb6 <__udivmoddi4+0x166>
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000e12:	4608      	mov	r0, r1
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	fab3 f183 	clz	r1, r3
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	f040 808e 	bne.w	8000f3e <__udivmoddi4+0x1ee>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xdc>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80fa 	bhi.w	8001020 <__udivmoddi4+0x2d0>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb65 0503 	sbc.w	r5, r5, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	46ac      	mov	ip, r5
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d03f      	beq.n	8000eba <__udivmoddi4+0x16a>
 8000e3a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b912      	cbnz	r2, 8000e4a <__udivmoddi4+0xfa>
 8000e44:	2701      	movs	r7, #1
 8000e46:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e4a:	fab7 fe87 	clz	lr, r7
 8000e4e:	f1be 0f00 	cmp.w	lr, #0
 8000e52:	d134      	bne.n	8000ebe <__udivmoddi4+0x16e>
 8000e54:	1beb      	subs	r3, r5, r7
 8000e56:	0c3a      	lsrs	r2, r7, #16
 8000e58:	fa1f fc87 	uxth.w	ip, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e62:	0c25      	lsrs	r5, r4, #16
 8000e64:	fb02 3318 	mls	r3, r2, r8, r3
 8000e68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e6c:	fb0c f308 	mul.w	r3, ip, r8
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	d907      	bls.n	8000e84 <__udivmoddi4+0x134>
 8000e74:	19ed      	adds	r5, r5, r7
 8000e76:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x132>
 8000e7c:	42ab      	cmp	r3, r5
 8000e7e:	f200 80d1 	bhi.w	8001024 <__udivmoddi4+0x2d4>
 8000e82:	4680      	mov	r8, r0
 8000e84:	1aed      	subs	r5, r5, r3
 8000e86:	b2a3      	uxth	r3, r4
 8000e88:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e8c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e94:	fb0c fc00 	mul.w	ip, ip, r0
 8000e98:	45a4      	cmp	ip, r4
 8000e9a:	d907      	bls.n	8000eac <__udivmoddi4+0x15c>
 8000e9c:	19e4      	adds	r4, r4, r7
 8000e9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x15a>
 8000ea4:	45a4      	cmp	ip, r4
 8000ea6:	f200 80b8 	bhi.w	800101a <__udivmoddi4+0x2ca>
 8000eaa:	4618      	mov	r0, r3
 8000eac:	eba4 040c 	sub.w	r4, r4, ip
 8000eb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eb4:	e79d      	b.n	8000df2 <__udivmoddi4+0xa2>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	f1ce 0420 	rsb	r4, lr, #32
 8000ec2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ec6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eca:	fa20 f804 	lsr.w	r8, r0, r4
 8000ece:	0c3a      	lsrs	r2, r7, #16
 8000ed0:	fa25 f404 	lsr.w	r4, r5, r4
 8000ed4:	ea48 0803 	orr.w	r8, r8, r3
 8000ed8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000edc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ee0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ee4:	fa1f fc87 	uxth.w	ip, r7
 8000ee8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000eec:	fb01 f30c 	mul.w	r3, r1, ip
 8000ef0:	42ab      	cmp	r3, r5
 8000ef2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x1bc>
 8000ef8:	19ed      	adds	r5, r5, r7
 8000efa:	f101 30ff 	add.w	r0, r1, #4294967295
 8000efe:	f080 808a 	bcs.w	8001016 <__udivmoddi4+0x2c6>
 8000f02:	42ab      	cmp	r3, r5
 8000f04:	f240 8087 	bls.w	8001016 <__udivmoddi4+0x2c6>
 8000f08:	3902      	subs	r1, #2
 8000f0a:	443d      	add	r5, r7
 8000f0c:	1aeb      	subs	r3, r5, r3
 8000f0e:	fa1f f588 	uxth.w	r5, r8
 8000f12:	fbb3 f0f2 	udiv	r0, r3, r2
 8000f16:	fb02 3310 	mls	r3, r2, r0, r3
 8000f1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f1e:	fb00 f30c 	mul.w	r3, r0, ip
 8000f22:	42ab      	cmp	r3, r5
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1e6>
 8000f26:	19ed      	adds	r5, r5, r7
 8000f28:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2c:	d26f      	bcs.n	800100e <__udivmoddi4+0x2be>
 8000f2e:	42ab      	cmp	r3, r5
 8000f30:	d96d      	bls.n	800100e <__udivmoddi4+0x2be>
 8000f32:	3802      	subs	r0, #2
 8000f34:	443d      	add	r5, r7
 8000f36:	1aeb      	subs	r3, r5, r3
 8000f38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f3c:	e78f      	b.n	8000e5e <__udivmoddi4+0x10e>
 8000f3e:	f1c1 0720 	rsb	r7, r1, #32
 8000f42:	fa22 f807 	lsr.w	r8, r2, r7
 8000f46:	408b      	lsls	r3, r1
 8000f48:	fa05 f401 	lsl.w	r4, r5, r1
 8000f4c:	ea48 0303 	orr.w	r3, r8, r3
 8000f50:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f5e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f62:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f66:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f6a:	fa1f f883 	uxth.w	r8, r3
 8000f6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f72:	fb09 f408 	mul.w	r4, r9, r8
 8000f76:	42ac      	cmp	r4, r5
 8000f78:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x244>
 8000f82:	18ed      	adds	r5, r5, r3
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d243      	bcs.n	8001012 <__udivmoddi4+0x2c2>
 8000f8a:	42ac      	cmp	r4, r5
 8000f8c:	d941      	bls.n	8001012 <__udivmoddi4+0x2c2>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	441d      	add	r5, r3
 8000f94:	1b2d      	subs	r5, r5, r4
 8000f96:	fa1f fe8e 	uxth.w	lr, lr
 8000f9a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f9e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000fa2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45a0      	cmp	r8, r4
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x26e>
 8000fae:	18e4      	adds	r4, r4, r3
 8000fb0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000fb4:	d229      	bcs.n	800100a <__udivmoddi4+0x2ba>
 8000fb6:	45a0      	cmp	r8, r4
 8000fb8:	d927      	bls.n	800100a <__udivmoddi4+0x2ba>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	441c      	add	r4, r3
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba4 0408 	sub.w	r4, r4, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454c      	cmp	r4, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	464d      	mov	r5, r9
 8000fd0:	d315      	bcc.n	8000ffe <__udivmoddi4+0x2ae>
 8000fd2:	d012      	beq.n	8000ffa <__udivmoddi4+0x2aa>
 8000fd4:	b156      	cbz	r6, 8000fec <__udivmoddi4+0x29c>
 8000fd6:	ebba 030e 	subs.w	r3, sl, lr
 8000fda:	eb64 0405 	sbc.w	r4, r4, r5
 8000fde:	fa04 f707 	lsl.w	r7, r4, r7
 8000fe2:	40cb      	lsrs	r3, r1
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	40cc      	lsrs	r4, r1
 8000fe8:	6037      	str	r7, [r6, #0]
 8000fea:	6074      	str	r4, [r6, #4]
 8000fec:	2100      	movs	r1, #0
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	e6f8      	b.n	8000de8 <__udivmoddi4+0x98>
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	e6e0      	b.n	8000dbc <__udivmoddi4+0x6c>
 8000ffa:	45c2      	cmp	sl, r8
 8000ffc:	d2ea      	bcs.n	8000fd4 <__udivmoddi4+0x284>
 8000ffe:	ebb8 0e02 	subs.w	lr, r8, r2
 8001002:	eb69 0503 	sbc.w	r5, r9, r3
 8001006:	3801      	subs	r0, #1
 8001008:	e7e4      	b.n	8000fd4 <__udivmoddi4+0x284>
 800100a:	4628      	mov	r0, r5
 800100c:	e7d7      	b.n	8000fbe <__udivmoddi4+0x26e>
 800100e:	4640      	mov	r0, r8
 8001010:	e791      	b.n	8000f36 <__udivmoddi4+0x1e6>
 8001012:	4681      	mov	r9, r0
 8001014:	e7be      	b.n	8000f94 <__udivmoddi4+0x244>
 8001016:	4601      	mov	r1, r0
 8001018:	e778      	b.n	8000f0c <__udivmoddi4+0x1bc>
 800101a:	3802      	subs	r0, #2
 800101c:	443c      	add	r4, r7
 800101e:	e745      	b.n	8000eac <__udivmoddi4+0x15c>
 8001020:	4608      	mov	r0, r1
 8001022:	e708      	b.n	8000e36 <__udivmoddi4+0xe6>
 8001024:	f1a8 0802 	sub.w	r8, r8, #2
 8001028:	443d      	add	r5, r7
 800102a:	e72b      	b.n	8000e84 <__udivmoddi4+0x134>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <__cvt>:
 8001030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001034:	ec55 4b10 	vmov	r4, r5, d0
 8001038:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800103a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800103e:	2d00      	cmp	r5, #0
 8001040:	460e      	mov	r6, r1
 8001042:	4691      	mov	r9, r2
 8001044:	4619      	mov	r1, r3
 8001046:	bfb8      	it	lt
 8001048:	4622      	movlt	r2, r4
 800104a:	462b      	mov	r3, r5
 800104c:	f027 0720 	bic.w	r7, r7, #32
 8001050:	bfbb      	ittet	lt
 8001052:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001056:	461d      	movlt	r5, r3
 8001058:	2300      	movge	r3, #0
 800105a:	232d      	movlt	r3, #45	; 0x2d
 800105c:	bfb8      	it	lt
 800105e:	4614      	movlt	r4, r2
 8001060:	2f46      	cmp	r7, #70	; 0x46
 8001062:	700b      	strb	r3, [r1, #0]
 8001064:	d004      	beq.n	8001070 <__cvt+0x40>
 8001066:	2f45      	cmp	r7, #69	; 0x45
 8001068:	d100      	bne.n	800106c <__cvt+0x3c>
 800106a:	3601      	adds	r6, #1
 800106c:	2102      	movs	r1, #2
 800106e:	e000      	b.n	8001072 <__cvt+0x42>
 8001070:	2103      	movs	r1, #3
 8001072:	ab03      	add	r3, sp, #12
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	ab02      	add	r3, sp, #8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	4632      	mov	r2, r6
 800107c:	4653      	mov	r3, sl
 800107e:	ec45 4b10 	vmov	d0, r4, r5
 8001082:	f000 fccd 	bl	8001a20 <_dtoa_r>
 8001086:	2f47      	cmp	r7, #71	; 0x47
 8001088:	4680      	mov	r8, r0
 800108a:	d102      	bne.n	8001092 <__cvt+0x62>
 800108c:	f019 0f01 	tst.w	r9, #1
 8001090:	d026      	beq.n	80010e0 <__cvt+0xb0>
 8001092:	2f46      	cmp	r7, #70	; 0x46
 8001094:	eb08 0906 	add.w	r9, r8, r6
 8001098:	d111      	bne.n	80010be <__cvt+0x8e>
 800109a:	f898 3000 	ldrb.w	r3, [r8]
 800109e:	2b30      	cmp	r3, #48	; 0x30
 80010a0:	d10a      	bne.n	80010b8 <__cvt+0x88>
 80010a2:	2200      	movs	r2, #0
 80010a4:	2300      	movs	r3, #0
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff fd79 	bl	8000ba0 <__aeabi_dcmpeq>
 80010ae:	b918      	cbnz	r0, 80010b8 <__cvt+0x88>
 80010b0:	f1c6 0601 	rsb	r6, r6, #1
 80010b4:	f8ca 6000 	str.w	r6, [sl]
 80010b8:	f8da 3000 	ldr.w	r3, [sl]
 80010bc:	4499      	add	r9, r3
 80010be:	2200      	movs	r2, #0
 80010c0:	2300      	movs	r3, #0
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff fd6b 	bl	8000ba0 <__aeabi_dcmpeq>
 80010ca:	b938      	cbnz	r0, 80010dc <__cvt+0xac>
 80010cc:	2230      	movs	r2, #48	; 0x30
 80010ce:	9b03      	ldr	r3, [sp, #12]
 80010d0:	4599      	cmp	r9, r3
 80010d2:	d905      	bls.n	80010e0 <__cvt+0xb0>
 80010d4:	1c59      	adds	r1, r3, #1
 80010d6:	9103      	str	r1, [sp, #12]
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e7f8      	b.n	80010ce <__cvt+0x9e>
 80010dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80010e0:	9b03      	ldr	r3, [sp, #12]
 80010e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80010e4:	eba3 0308 	sub.w	r3, r3, r8
 80010e8:	4640      	mov	r0, r8
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	b004      	add	sp, #16
 80010ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080010f2 <__exponent>:
 80010f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010f4:	4603      	mov	r3, r0
 80010f6:	2900      	cmp	r1, #0
 80010f8:	bfb8      	it	lt
 80010fa:	4249      	neglt	r1, r1
 80010fc:	f803 2b02 	strb.w	r2, [r3], #2
 8001100:	bfb4      	ite	lt
 8001102:	222d      	movlt	r2, #45	; 0x2d
 8001104:	222b      	movge	r2, #43	; 0x2b
 8001106:	2909      	cmp	r1, #9
 8001108:	7042      	strb	r2, [r0, #1]
 800110a:	dd20      	ble.n	800114e <__exponent+0x5c>
 800110c:	f10d 0207 	add.w	r2, sp, #7
 8001110:	4617      	mov	r7, r2
 8001112:	260a      	movs	r6, #10
 8001114:	fb91 f5f6 	sdiv	r5, r1, r6
 8001118:	fb06 1115 	mls	r1, r6, r5, r1
 800111c:	3130      	adds	r1, #48	; 0x30
 800111e:	2d09      	cmp	r5, #9
 8001120:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001124:	f102 34ff 	add.w	r4, r2, #4294967295
 8001128:	4629      	mov	r1, r5
 800112a:	dc09      	bgt.n	8001140 <__exponent+0x4e>
 800112c:	3130      	adds	r1, #48	; 0x30
 800112e:	3a02      	subs	r2, #2
 8001130:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001134:	42ba      	cmp	r2, r7
 8001136:	461c      	mov	r4, r3
 8001138:	d304      	bcc.n	8001144 <__exponent+0x52>
 800113a:	1a20      	subs	r0, r4, r0
 800113c:	b003      	add	sp, #12
 800113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001140:	4622      	mov	r2, r4
 8001142:	e7e7      	b.n	8001114 <__exponent+0x22>
 8001144:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001148:	f803 1b01 	strb.w	r1, [r3], #1
 800114c:	e7f2      	b.n	8001134 <__exponent+0x42>
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	461c      	mov	r4, r3
 8001152:	4411      	add	r1, r2
 8001154:	f804 2b02 	strb.w	r2, [r4], #2
 8001158:	7059      	strb	r1, [r3, #1]
 800115a:	e7ee      	b.n	800113a <__exponent+0x48>

0800115c <_printf_float>:
 800115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001160:	b08d      	sub	sp, #52	; 0x34
 8001162:	460c      	mov	r4, r1
 8001164:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001168:	4616      	mov	r6, r2
 800116a:	461f      	mov	r7, r3
 800116c:	4605      	mov	r5, r0
 800116e:	f001 fa25 	bl	80025bc <_localeconv_r>
 8001172:	6803      	ldr	r3, [r0, #0]
 8001174:	9304      	str	r3, [sp, #16]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f83a 	bl	80001f0 <strlen>
 800117c:	2300      	movs	r3, #0
 800117e:	930a      	str	r3, [sp, #40]	; 0x28
 8001180:	f8d8 3000 	ldr.w	r3, [r8]
 8001184:	9005      	str	r0, [sp, #20]
 8001186:	3307      	adds	r3, #7
 8001188:	f023 0307 	bic.w	r3, r3, #7
 800118c:	f103 0208 	add.w	r2, r3, #8
 8001190:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001194:	f8d4 b000 	ldr.w	fp, [r4]
 8001198:	f8c8 2000 	str.w	r2, [r8]
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80011a4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80011a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80011ac:	9307      	str	r3, [sp, #28]
 80011ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	4ba5      	ldr	r3, [pc, #660]	; (800144c <_printf_float+0x2f0>)
 80011b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80011bc:	f7ff fd22 	bl	8000c04 <__aeabi_dcmpun>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	f040 81fb 	bne.w	80015bc <_printf_float+0x460>
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	4ba0      	ldr	r3, [pc, #640]	; (800144c <_printf_float+0x2f0>)
 80011cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80011d0:	f7ff fcfa 	bl	8000bc8 <__aeabi_dcmple>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f040 81f1 	bne.w	80015bc <_printf_float+0x460>
 80011da:	2200      	movs	r2, #0
 80011dc:	2300      	movs	r3, #0
 80011de:	4640      	mov	r0, r8
 80011e0:	4649      	mov	r1, r9
 80011e2:	f7ff fce7 	bl	8000bb4 <__aeabi_dcmplt>
 80011e6:	b110      	cbz	r0, 80011ee <_printf_float+0x92>
 80011e8:	232d      	movs	r3, #45	; 0x2d
 80011ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011ee:	4b98      	ldr	r3, [pc, #608]	; (8001450 <_printf_float+0x2f4>)
 80011f0:	4a98      	ldr	r2, [pc, #608]	; (8001454 <_printf_float+0x2f8>)
 80011f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80011f6:	bf8c      	ite	hi
 80011f8:	4690      	movhi	r8, r2
 80011fa:	4698      	movls	r8, r3
 80011fc:	2303      	movs	r3, #3
 80011fe:	f02b 0204 	bic.w	r2, fp, #4
 8001202:	6123      	str	r3, [r4, #16]
 8001204:	6022      	str	r2, [r4, #0]
 8001206:	f04f 0900 	mov.w	r9, #0
 800120a:	9700      	str	r7, [sp, #0]
 800120c:	4633      	mov	r3, r6
 800120e:	aa0b      	add	r2, sp, #44	; 0x2c
 8001210:	4621      	mov	r1, r4
 8001212:	4628      	mov	r0, r5
 8001214:	f000 f9e2 	bl	80015dc <_printf_common>
 8001218:	3001      	adds	r0, #1
 800121a:	f040 8093 	bne.w	8001344 <_printf_float+0x1e8>
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	b00d      	add	sp, #52	; 0x34
 8001224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001228:	6861      	ldr	r1, [r4, #4]
 800122a:	1c4b      	adds	r3, r1, #1
 800122c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8001230:	d13f      	bne.n	80012b2 <_printf_float+0x156>
 8001232:	2306      	movs	r3, #6
 8001234:	6063      	str	r3, [r4, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9303      	str	r3, [sp, #12]
 800123a:	ab0a      	add	r3, sp, #40	; 0x28
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	ab09      	add	r3, sp, #36	; 0x24
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	ec49 8b10 	vmov	d0, r8, r9
 8001246:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800124a:	6022      	str	r2, [r4, #0]
 800124c:	f8cd a004 	str.w	sl, [sp, #4]
 8001250:	6861      	ldr	r1, [r4, #4]
 8001252:	4628      	mov	r0, r5
 8001254:	f7ff feec 	bl	8001030 <__cvt>
 8001258:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800125c:	2b47      	cmp	r3, #71	; 0x47
 800125e:	4680      	mov	r8, r0
 8001260:	d109      	bne.n	8001276 <_printf_float+0x11a>
 8001262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001264:	1cd8      	adds	r0, r3, #3
 8001266:	db02      	blt.n	800126e <_printf_float+0x112>
 8001268:	6862      	ldr	r2, [r4, #4]
 800126a:	4293      	cmp	r3, r2
 800126c:	dd57      	ble.n	800131e <_printf_float+0x1c2>
 800126e:	f1aa 0a02 	sub.w	sl, sl, #2
 8001272:	fa5f fa8a 	uxtb.w	sl, sl
 8001276:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800127a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800127c:	d834      	bhi.n	80012e8 <_printf_float+0x18c>
 800127e:	3901      	subs	r1, #1
 8001280:	4652      	mov	r2, sl
 8001282:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001286:	9109      	str	r1, [sp, #36]	; 0x24
 8001288:	f7ff ff33 	bl	80010f2 <__exponent>
 800128c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800128e:	1883      	adds	r3, r0, r2
 8001290:	2a01      	cmp	r2, #1
 8001292:	4681      	mov	r9, r0
 8001294:	6123      	str	r3, [r4, #16]
 8001296:	dc02      	bgt.n	800129e <_printf_float+0x142>
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	07d1      	lsls	r1, r2, #31
 800129c:	d501      	bpl.n	80012a2 <_printf_float+0x146>
 800129e:	3301      	adds	r3, #1
 80012a0:	6123      	str	r3, [r4, #16]
 80012a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0af      	beq.n	800120a <_printf_float+0xae>
 80012aa:	232d      	movs	r3, #45	; 0x2d
 80012ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012b0:	e7ab      	b.n	800120a <_printf_float+0xae>
 80012b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80012b6:	d002      	beq.n	80012be <_printf_float+0x162>
 80012b8:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80012bc:	d1bb      	bne.n	8001236 <_printf_float+0xda>
 80012be:	b189      	cbz	r1, 80012e4 <_printf_float+0x188>
 80012c0:	2300      	movs	r3, #0
 80012c2:	9303      	str	r3, [sp, #12]
 80012c4:	ab0a      	add	r3, sp, #40	; 0x28
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	ab09      	add	r3, sp, #36	; 0x24
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	ec49 8b10 	vmov	d0, r8, r9
 80012d0:	6022      	str	r2, [r4, #0]
 80012d2:	f8cd a004 	str.w	sl, [sp, #4]
 80012d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80012da:	4628      	mov	r0, r5
 80012dc:	f7ff fea8 	bl	8001030 <__cvt>
 80012e0:	4680      	mov	r8, r0
 80012e2:	e7be      	b.n	8001262 <_printf_float+0x106>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e7a5      	b.n	8001234 <_printf_float+0xd8>
 80012e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80012ec:	d119      	bne.n	8001322 <_printf_float+0x1c6>
 80012ee:	2900      	cmp	r1, #0
 80012f0:	6863      	ldr	r3, [r4, #4]
 80012f2:	dd0c      	ble.n	800130e <_printf_float+0x1b2>
 80012f4:	6121      	str	r1, [r4, #16]
 80012f6:	b913      	cbnz	r3, 80012fe <_printf_float+0x1a2>
 80012f8:	6822      	ldr	r2, [r4, #0]
 80012fa:	07d2      	lsls	r2, r2, #31
 80012fc:	d502      	bpl.n	8001304 <_printf_float+0x1a8>
 80012fe:	3301      	adds	r3, #1
 8001300:	440b      	add	r3, r1
 8001302:	6123      	str	r3, [r4, #16]
 8001304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001306:	65a3      	str	r3, [r4, #88]	; 0x58
 8001308:	f04f 0900 	mov.w	r9, #0
 800130c:	e7c9      	b.n	80012a2 <_printf_float+0x146>
 800130e:	b913      	cbnz	r3, 8001316 <_printf_float+0x1ba>
 8001310:	6822      	ldr	r2, [r4, #0]
 8001312:	07d0      	lsls	r0, r2, #31
 8001314:	d501      	bpl.n	800131a <_printf_float+0x1be>
 8001316:	3302      	adds	r3, #2
 8001318:	e7f3      	b.n	8001302 <_printf_float+0x1a6>
 800131a:	2301      	movs	r3, #1
 800131c:	e7f1      	b.n	8001302 <_printf_float+0x1a6>
 800131e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8001322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001326:	4293      	cmp	r3, r2
 8001328:	db05      	blt.n	8001336 <_printf_float+0x1da>
 800132a:	6822      	ldr	r2, [r4, #0]
 800132c:	6123      	str	r3, [r4, #16]
 800132e:	07d1      	lsls	r1, r2, #31
 8001330:	d5e8      	bpl.n	8001304 <_printf_float+0x1a8>
 8001332:	3301      	adds	r3, #1
 8001334:	e7e5      	b.n	8001302 <_printf_float+0x1a6>
 8001336:	2b00      	cmp	r3, #0
 8001338:	bfd4      	ite	le
 800133a:	f1c3 0302 	rsble	r3, r3, #2
 800133e:	2301      	movgt	r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	e7de      	b.n	8001302 <_printf_float+0x1a6>
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	055a      	lsls	r2, r3, #21
 8001348:	d407      	bmi.n	800135a <_printf_float+0x1fe>
 800134a:	6923      	ldr	r3, [r4, #16]
 800134c:	4642      	mov	r2, r8
 800134e:	4631      	mov	r1, r6
 8001350:	4628      	mov	r0, r5
 8001352:	47b8      	blx	r7
 8001354:	3001      	adds	r0, #1
 8001356:	d12b      	bne.n	80013b0 <_printf_float+0x254>
 8001358:	e761      	b.n	800121e <_printf_float+0xc2>
 800135a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800135e:	f240 80e2 	bls.w	8001526 <_printf_float+0x3ca>
 8001362:	2200      	movs	r2, #0
 8001364:	2300      	movs	r3, #0
 8001366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800136a:	f7ff fc19 	bl	8000ba0 <__aeabi_dcmpeq>
 800136e:	2800      	cmp	r0, #0
 8001370:	d03c      	beq.n	80013ec <_printf_float+0x290>
 8001372:	2301      	movs	r3, #1
 8001374:	4a38      	ldr	r2, [pc, #224]	; (8001458 <_printf_float+0x2fc>)
 8001376:	4631      	mov	r1, r6
 8001378:	4628      	mov	r0, r5
 800137a:	47b8      	blx	r7
 800137c:	3001      	adds	r0, #1
 800137e:	f43f af4e 	beq.w	800121e <_printf_float+0xc2>
 8001382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001386:	429a      	cmp	r2, r3
 8001388:	db02      	blt.n	8001390 <_printf_float+0x234>
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	07d8      	lsls	r0, r3, #31
 800138e:	d50f      	bpl.n	80013b0 <_printf_float+0x254>
 8001390:	9b05      	ldr	r3, [sp, #20]
 8001392:	9a04      	ldr	r2, [sp, #16]
 8001394:	4631      	mov	r1, r6
 8001396:	4628      	mov	r0, r5
 8001398:	47b8      	blx	r7
 800139a:	3001      	adds	r0, #1
 800139c:	f43f af3f 	beq.w	800121e <_printf_float+0xc2>
 80013a0:	f04f 0800 	mov.w	r8, #0
 80013a4:	f104 091a 	add.w	r9, r4, #26
 80013a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4598      	cmp	r8, r3
 80013ae:	db12      	blt.n	80013d6 <_printf_float+0x27a>
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	079b      	lsls	r3, r3, #30
 80013b4:	d509      	bpl.n	80013ca <_printf_float+0x26e>
 80013b6:	f04f 0800 	mov.w	r8, #0
 80013ba:	f104 0919 	add.w	r9, r4, #25
 80013be:	68e3      	ldr	r3, [r4, #12]
 80013c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	4598      	cmp	r8, r3
 80013c6:	f2c0 80ee 	blt.w	80015a6 <_printf_float+0x44a>
 80013ca:	68e0      	ldr	r0, [r4, #12]
 80013cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013ce:	4298      	cmp	r0, r3
 80013d0:	bfb8      	it	lt
 80013d2:	4618      	movlt	r0, r3
 80013d4:	e725      	b.n	8001222 <_printf_float+0xc6>
 80013d6:	2301      	movs	r3, #1
 80013d8:	464a      	mov	r2, r9
 80013da:	4631      	mov	r1, r6
 80013dc:	4628      	mov	r0, r5
 80013de:	47b8      	blx	r7
 80013e0:	3001      	adds	r0, #1
 80013e2:	f43f af1c 	beq.w	800121e <_printf_float+0xc2>
 80013e6:	f108 0801 	add.w	r8, r8, #1
 80013ea:	e7dd      	b.n	80013a8 <_printf_float+0x24c>
 80013ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dc34      	bgt.n	800145c <_printf_float+0x300>
 80013f2:	2301      	movs	r3, #1
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <_printf_float+0x2fc>)
 80013f6:	4631      	mov	r1, r6
 80013f8:	4628      	mov	r0, r5
 80013fa:	47b8      	blx	r7
 80013fc:	3001      	adds	r0, #1
 80013fe:	f43f af0e 	beq.w	800121e <_printf_float+0xc2>
 8001402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001404:	b923      	cbnz	r3, 8001410 <_printf_float+0x2b4>
 8001406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001408:	b913      	cbnz	r3, 8001410 <_printf_float+0x2b4>
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	07d9      	lsls	r1, r3, #31
 800140e:	d5cf      	bpl.n	80013b0 <_printf_float+0x254>
 8001410:	9b05      	ldr	r3, [sp, #20]
 8001412:	9a04      	ldr	r2, [sp, #16]
 8001414:	4631      	mov	r1, r6
 8001416:	4628      	mov	r0, r5
 8001418:	47b8      	blx	r7
 800141a:	3001      	adds	r0, #1
 800141c:	f43f aeff 	beq.w	800121e <_printf_float+0xc2>
 8001420:	f04f 0900 	mov.w	r9, #0
 8001424:	f104 0a1a 	add.w	sl, r4, #26
 8001428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800142a:	425b      	negs	r3, r3
 800142c:	4599      	cmp	r9, r3
 800142e:	db01      	blt.n	8001434 <_printf_float+0x2d8>
 8001430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001432:	e78b      	b.n	800134c <_printf_float+0x1f0>
 8001434:	2301      	movs	r3, #1
 8001436:	4652      	mov	r2, sl
 8001438:	4631      	mov	r1, r6
 800143a:	4628      	mov	r0, r5
 800143c:	47b8      	blx	r7
 800143e:	3001      	adds	r0, #1
 8001440:	f43f aeed 	beq.w	800121e <_printf_float+0xc2>
 8001444:	f109 0901 	add.w	r9, r9, #1
 8001448:	e7ee      	b.n	8001428 <_printf_float+0x2cc>
 800144a:	bf00      	nop
 800144c:	7fefffff 	.word	0x7fefffff
 8001450:	08009ba8 	.word	0x08009ba8
 8001454:	08009bac 	.word	0x08009bac
 8001458:	080156e1 	.word	0x080156e1
 800145c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800145e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001460:	429a      	cmp	r2, r3
 8001462:	bfa8      	it	ge
 8001464:	461a      	movge	r2, r3
 8001466:	2a00      	cmp	r2, #0
 8001468:	4691      	mov	r9, r2
 800146a:	dc38      	bgt.n	80014de <_printf_float+0x382>
 800146c:	f104 031a 	add.w	r3, r4, #26
 8001470:	f04f 0b00 	mov.w	fp, #0
 8001474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001478:	9306      	str	r3, [sp, #24]
 800147a:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800147e:	ebaa 0309 	sub.w	r3, sl, r9
 8001482:	459b      	cmp	fp, r3
 8001484:	db33      	blt.n	80014ee <_printf_float+0x392>
 8001486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800148a:	429a      	cmp	r2, r3
 800148c:	db3a      	blt.n	8001504 <_printf_float+0x3a8>
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	07da      	lsls	r2, r3, #31
 8001492:	d437      	bmi.n	8001504 <_printf_float+0x3a8>
 8001494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001498:	eba3 020a 	sub.w	r2, r3, sl
 800149c:	eba3 0901 	sub.w	r9, r3, r1
 80014a0:	4591      	cmp	r9, r2
 80014a2:	bfa8      	it	ge
 80014a4:	4691      	movge	r9, r2
 80014a6:	f1b9 0f00 	cmp.w	r9, #0
 80014aa:	dc33      	bgt.n	8001514 <_printf_float+0x3b8>
 80014ac:	f04f 0800 	mov.w	r8, #0
 80014b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80014b4:	f104 0a1a 	add.w	sl, r4, #26
 80014b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	eba3 0309 	sub.w	r3, r3, r9
 80014c2:	4598      	cmp	r8, r3
 80014c4:	f6bf af74 	bge.w	80013b0 <_printf_float+0x254>
 80014c8:	2301      	movs	r3, #1
 80014ca:	4652      	mov	r2, sl
 80014cc:	4631      	mov	r1, r6
 80014ce:	4628      	mov	r0, r5
 80014d0:	47b8      	blx	r7
 80014d2:	3001      	adds	r0, #1
 80014d4:	f43f aea3 	beq.w	800121e <_printf_float+0xc2>
 80014d8:	f108 0801 	add.w	r8, r8, #1
 80014dc:	e7ec      	b.n	80014b8 <_printf_float+0x35c>
 80014de:	4613      	mov	r3, r2
 80014e0:	4631      	mov	r1, r6
 80014e2:	4642      	mov	r2, r8
 80014e4:	4628      	mov	r0, r5
 80014e6:	47b8      	blx	r7
 80014e8:	3001      	adds	r0, #1
 80014ea:	d1bf      	bne.n	800146c <_printf_float+0x310>
 80014ec:	e697      	b.n	800121e <_printf_float+0xc2>
 80014ee:	2301      	movs	r3, #1
 80014f0:	9a06      	ldr	r2, [sp, #24]
 80014f2:	4631      	mov	r1, r6
 80014f4:	4628      	mov	r0, r5
 80014f6:	47b8      	blx	r7
 80014f8:	3001      	adds	r0, #1
 80014fa:	f43f ae90 	beq.w	800121e <_printf_float+0xc2>
 80014fe:	f10b 0b01 	add.w	fp, fp, #1
 8001502:	e7ba      	b.n	800147a <_printf_float+0x31e>
 8001504:	9b05      	ldr	r3, [sp, #20]
 8001506:	9a04      	ldr	r2, [sp, #16]
 8001508:	4631      	mov	r1, r6
 800150a:	4628      	mov	r0, r5
 800150c:	47b8      	blx	r7
 800150e:	3001      	adds	r0, #1
 8001510:	d1c0      	bne.n	8001494 <_printf_float+0x338>
 8001512:	e684      	b.n	800121e <_printf_float+0xc2>
 8001514:	464b      	mov	r3, r9
 8001516:	eb08 020a 	add.w	r2, r8, sl
 800151a:	4631      	mov	r1, r6
 800151c:	4628      	mov	r0, r5
 800151e:	47b8      	blx	r7
 8001520:	3001      	adds	r0, #1
 8001522:	d1c3      	bne.n	80014ac <_printf_float+0x350>
 8001524:	e67b      	b.n	800121e <_printf_float+0xc2>
 8001526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001528:	2a01      	cmp	r2, #1
 800152a:	dc01      	bgt.n	8001530 <_printf_float+0x3d4>
 800152c:	07db      	lsls	r3, r3, #31
 800152e:	d537      	bpl.n	80015a0 <_printf_float+0x444>
 8001530:	2301      	movs	r3, #1
 8001532:	4642      	mov	r2, r8
 8001534:	4631      	mov	r1, r6
 8001536:	4628      	mov	r0, r5
 8001538:	47b8      	blx	r7
 800153a:	3001      	adds	r0, #1
 800153c:	f43f ae6f 	beq.w	800121e <_printf_float+0xc2>
 8001540:	9b05      	ldr	r3, [sp, #20]
 8001542:	9a04      	ldr	r2, [sp, #16]
 8001544:	4631      	mov	r1, r6
 8001546:	4628      	mov	r0, r5
 8001548:	47b8      	blx	r7
 800154a:	3001      	adds	r0, #1
 800154c:	f43f ae67 	beq.w	800121e <_printf_float+0xc2>
 8001550:	2200      	movs	r2, #0
 8001552:	2300      	movs	r3, #0
 8001554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001558:	f7ff fb22 	bl	8000ba0 <__aeabi_dcmpeq>
 800155c:	b158      	cbz	r0, 8001576 <_printf_float+0x41a>
 800155e:	f04f 0800 	mov.w	r8, #0
 8001562:	f104 0a1a 	add.w	sl, r4, #26
 8001566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001568:	3b01      	subs	r3, #1
 800156a:	4598      	cmp	r8, r3
 800156c:	db0d      	blt.n	800158a <_printf_float+0x42e>
 800156e:	464b      	mov	r3, r9
 8001570:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001574:	e6eb      	b.n	800134e <_printf_float+0x1f2>
 8001576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001578:	f108 0201 	add.w	r2, r8, #1
 800157c:	3b01      	subs	r3, #1
 800157e:	4631      	mov	r1, r6
 8001580:	4628      	mov	r0, r5
 8001582:	47b8      	blx	r7
 8001584:	3001      	adds	r0, #1
 8001586:	d1f2      	bne.n	800156e <_printf_float+0x412>
 8001588:	e649      	b.n	800121e <_printf_float+0xc2>
 800158a:	2301      	movs	r3, #1
 800158c:	4652      	mov	r2, sl
 800158e:	4631      	mov	r1, r6
 8001590:	4628      	mov	r0, r5
 8001592:	47b8      	blx	r7
 8001594:	3001      	adds	r0, #1
 8001596:	f43f ae42 	beq.w	800121e <_printf_float+0xc2>
 800159a:	f108 0801 	add.w	r8, r8, #1
 800159e:	e7e2      	b.n	8001566 <_printf_float+0x40a>
 80015a0:	2301      	movs	r3, #1
 80015a2:	4642      	mov	r2, r8
 80015a4:	e7eb      	b.n	800157e <_printf_float+0x422>
 80015a6:	2301      	movs	r3, #1
 80015a8:	464a      	mov	r2, r9
 80015aa:	4631      	mov	r1, r6
 80015ac:	4628      	mov	r0, r5
 80015ae:	47b8      	blx	r7
 80015b0:	3001      	adds	r0, #1
 80015b2:	f43f ae34 	beq.w	800121e <_printf_float+0xc2>
 80015b6:	f108 0801 	add.w	r8, r8, #1
 80015ba:	e700      	b.n	80013be <_printf_float+0x262>
 80015bc:	4642      	mov	r2, r8
 80015be:	464b      	mov	r3, r9
 80015c0:	4640      	mov	r0, r8
 80015c2:	4649      	mov	r1, r9
 80015c4:	f7ff fb1e 	bl	8000c04 <__aeabi_dcmpun>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	f43f ae2d 	beq.w	8001228 <_printf_float+0xcc>
 80015ce:	4b01      	ldr	r3, [pc, #4]	; (80015d4 <_printf_float+0x478>)
 80015d0:	4a01      	ldr	r2, [pc, #4]	; (80015d8 <_printf_float+0x47c>)
 80015d2:	e60e      	b.n	80011f2 <_printf_float+0x96>
 80015d4:	08009bb0 	.word	0x08009bb0
 80015d8:	08009bb4 	.word	0x08009bb4

080015dc <_printf_common>:
 80015dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e0:	4691      	mov	r9, r2
 80015e2:	461f      	mov	r7, r3
 80015e4:	688a      	ldr	r2, [r1, #8]
 80015e6:	690b      	ldr	r3, [r1, #16]
 80015e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bfb8      	it	lt
 80015f0:	4613      	movlt	r3, r2
 80015f2:	f8c9 3000 	str.w	r3, [r9]
 80015f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015fa:	4606      	mov	r6, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	b112      	cbz	r2, 8001606 <_printf_common+0x2a>
 8001600:	3301      	adds	r3, #1
 8001602:	f8c9 3000 	str.w	r3, [r9]
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	0699      	lsls	r1, r3, #26
 800160a:	bf42      	ittt	mi
 800160c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001610:	3302      	addmi	r3, #2
 8001612:	f8c9 3000 	strmi.w	r3, [r9]
 8001616:	6825      	ldr	r5, [r4, #0]
 8001618:	f015 0506 	ands.w	r5, r5, #6
 800161c:	d107      	bne.n	800162e <_printf_common+0x52>
 800161e:	f104 0a19 	add.w	sl, r4, #25
 8001622:	68e3      	ldr	r3, [r4, #12]
 8001624:	f8d9 2000 	ldr.w	r2, [r9]
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	429d      	cmp	r5, r3
 800162c:	db29      	blt.n	8001682 <_printf_common+0xa6>
 800162e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001632:	6822      	ldr	r2, [r4, #0]
 8001634:	3300      	adds	r3, #0
 8001636:	bf18      	it	ne
 8001638:	2301      	movne	r3, #1
 800163a:	0692      	lsls	r2, r2, #26
 800163c:	d42e      	bmi.n	800169c <_printf_common+0xc0>
 800163e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001642:	4639      	mov	r1, r7
 8001644:	4630      	mov	r0, r6
 8001646:	47c0      	blx	r8
 8001648:	3001      	adds	r0, #1
 800164a:	d021      	beq.n	8001690 <_printf_common+0xb4>
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	68e5      	ldr	r5, [r4, #12]
 8001650:	f8d9 2000 	ldr.w	r2, [r9]
 8001654:	f003 0306 	and.w	r3, r3, #6
 8001658:	2b04      	cmp	r3, #4
 800165a:	bf08      	it	eq
 800165c:	1aad      	subeq	r5, r5, r2
 800165e:	68a3      	ldr	r3, [r4, #8]
 8001660:	6922      	ldr	r2, [r4, #16]
 8001662:	bf0c      	ite	eq
 8001664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001668:	2500      	movne	r5, #0
 800166a:	4293      	cmp	r3, r2
 800166c:	bfc4      	itt	gt
 800166e:	1a9b      	subgt	r3, r3, r2
 8001670:	18ed      	addgt	r5, r5, r3
 8001672:	f04f 0900 	mov.w	r9, #0
 8001676:	341a      	adds	r4, #26
 8001678:	454d      	cmp	r5, r9
 800167a:	d11b      	bne.n	80016b4 <_printf_common+0xd8>
 800167c:	2000      	movs	r0, #0
 800167e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001682:	2301      	movs	r3, #1
 8001684:	4652      	mov	r2, sl
 8001686:	4639      	mov	r1, r7
 8001688:	4630      	mov	r0, r6
 800168a:	47c0      	blx	r8
 800168c:	3001      	adds	r0, #1
 800168e:	d103      	bne.n	8001698 <_printf_common+0xbc>
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001698:	3501      	adds	r5, #1
 800169a:	e7c2      	b.n	8001622 <_printf_common+0x46>
 800169c:	18e1      	adds	r1, r4, r3
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	2030      	movs	r0, #48	; 0x30
 80016a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016a6:	4422      	add	r2, r4
 80016a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016b0:	3302      	adds	r3, #2
 80016b2:	e7c4      	b.n	800163e <_printf_common+0x62>
 80016b4:	2301      	movs	r3, #1
 80016b6:	4622      	mov	r2, r4
 80016b8:	4639      	mov	r1, r7
 80016ba:	4630      	mov	r0, r6
 80016bc:	47c0      	blx	r8
 80016be:	3001      	adds	r0, #1
 80016c0:	d0e6      	beq.n	8001690 <_printf_common+0xb4>
 80016c2:	f109 0901 	add.w	r9, r9, #1
 80016c6:	e7d7      	b.n	8001678 <_printf_common+0x9c>

080016c8 <_printf_i>:
 80016c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016cc:	4617      	mov	r7, r2
 80016ce:	7e0a      	ldrb	r2, [r1, #24]
 80016d0:	b085      	sub	sp, #20
 80016d2:	2a6e      	cmp	r2, #110	; 0x6e
 80016d4:	4698      	mov	r8, r3
 80016d6:	4606      	mov	r6, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80016dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80016e0:	f000 80bc 	beq.w	800185c <_printf_i+0x194>
 80016e4:	d81a      	bhi.n	800171c <_printf_i+0x54>
 80016e6:	2a63      	cmp	r2, #99	; 0x63
 80016e8:	d02e      	beq.n	8001748 <_printf_i+0x80>
 80016ea:	d80a      	bhi.n	8001702 <_printf_i+0x3a>
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	f000 80c8 	beq.w	8001882 <_printf_i+0x1ba>
 80016f2:	2a58      	cmp	r2, #88	; 0x58
 80016f4:	f000 808a 	beq.w	800180c <_printf_i+0x144>
 80016f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001700:	e02a      	b.n	8001758 <_printf_i+0x90>
 8001702:	2a64      	cmp	r2, #100	; 0x64
 8001704:	d001      	beq.n	800170a <_printf_i+0x42>
 8001706:	2a69      	cmp	r2, #105	; 0x69
 8001708:	d1f6      	bne.n	80016f8 <_printf_i+0x30>
 800170a:	6821      	ldr	r1, [r4, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001712:	d023      	beq.n	800175c <_printf_i+0x94>
 8001714:	1d11      	adds	r1, r2, #4
 8001716:	6019      	str	r1, [r3, #0]
 8001718:	6813      	ldr	r3, [r2, #0]
 800171a:	e027      	b.n	800176c <_printf_i+0xa4>
 800171c:	2a73      	cmp	r2, #115	; 0x73
 800171e:	f000 80b4 	beq.w	800188a <_printf_i+0x1c2>
 8001722:	d808      	bhi.n	8001736 <_printf_i+0x6e>
 8001724:	2a6f      	cmp	r2, #111	; 0x6f
 8001726:	d02a      	beq.n	800177e <_printf_i+0xb6>
 8001728:	2a70      	cmp	r2, #112	; 0x70
 800172a:	d1e5      	bne.n	80016f8 <_printf_i+0x30>
 800172c:	680a      	ldr	r2, [r1, #0]
 800172e:	f042 0220 	orr.w	r2, r2, #32
 8001732:	600a      	str	r2, [r1, #0]
 8001734:	e003      	b.n	800173e <_printf_i+0x76>
 8001736:	2a75      	cmp	r2, #117	; 0x75
 8001738:	d021      	beq.n	800177e <_printf_i+0xb6>
 800173a:	2a78      	cmp	r2, #120	; 0x78
 800173c:	d1dc      	bne.n	80016f8 <_printf_i+0x30>
 800173e:	2278      	movs	r2, #120	; 0x78
 8001740:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001744:	496e      	ldr	r1, [pc, #440]	; (8001900 <_printf_i+0x238>)
 8001746:	e064      	b.n	8001812 <_printf_i+0x14a>
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800174e:	1d11      	adds	r1, r2, #4
 8001750:	6019      	str	r1, [r3, #0]
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001758:	2301      	movs	r3, #1
 800175a:	e0a3      	b.n	80018a4 <_printf_i+0x1dc>
 800175c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001760:	f102 0104 	add.w	r1, r2, #4
 8001764:	6019      	str	r1, [r3, #0]
 8001766:	d0d7      	beq.n	8001718 <_printf_i+0x50>
 8001768:	f9b2 3000 	ldrsh.w	r3, [r2]
 800176c:	2b00      	cmp	r3, #0
 800176e:	da03      	bge.n	8001778 <_printf_i+0xb0>
 8001770:	222d      	movs	r2, #45	; 0x2d
 8001772:	425b      	negs	r3, r3
 8001774:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001778:	4962      	ldr	r1, [pc, #392]	; (8001904 <_printf_i+0x23c>)
 800177a:	220a      	movs	r2, #10
 800177c:	e017      	b.n	80017ae <_printf_i+0xe6>
 800177e:	6820      	ldr	r0, [r4, #0]
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001786:	d003      	beq.n	8001790 <_printf_i+0xc8>
 8001788:	1d08      	adds	r0, r1, #4
 800178a:	6018      	str	r0, [r3, #0]
 800178c:	680b      	ldr	r3, [r1, #0]
 800178e:	e006      	b.n	800179e <_printf_i+0xd6>
 8001790:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001794:	f101 0004 	add.w	r0, r1, #4
 8001798:	6018      	str	r0, [r3, #0]
 800179a:	d0f7      	beq.n	800178c <_printf_i+0xc4>
 800179c:	880b      	ldrh	r3, [r1, #0]
 800179e:	4959      	ldr	r1, [pc, #356]	; (8001904 <_printf_i+0x23c>)
 80017a0:	2a6f      	cmp	r2, #111	; 0x6f
 80017a2:	bf14      	ite	ne
 80017a4:	220a      	movne	r2, #10
 80017a6:	2208      	moveq	r2, #8
 80017a8:	2000      	movs	r0, #0
 80017aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80017ae:	6865      	ldr	r5, [r4, #4]
 80017b0:	60a5      	str	r5, [r4, #8]
 80017b2:	2d00      	cmp	r5, #0
 80017b4:	f2c0 809c 	blt.w	80018f0 <_printf_i+0x228>
 80017b8:	6820      	ldr	r0, [r4, #0]
 80017ba:	f020 0004 	bic.w	r0, r0, #4
 80017be:	6020      	str	r0, [r4, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d13f      	bne.n	8001844 <_printf_i+0x17c>
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	f040 8095 	bne.w	80018f4 <_printf_i+0x22c>
 80017ca:	4675      	mov	r5, lr
 80017cc:	2a08      	cmp	r2, #8
 80017ce:	d10b      	bne.n	80017e8 <_printf_i+0x120>
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	07da      	lsls	r2, r3, #31
 80017d4:	d508      	bpl.n	80017e8 <_printf_i+0x120>
 80017d6:	6923      	ldr	r3, [r4, #16]
 80017d8:	6862      	ldr	r2, [r4, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	bfde      	ittt	le
 80017de:	2330      	movle	r3, #48	; 0x30
 80017e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017e8:	ebae 0305 	sub.w	r3, lr, r5
 80017ec:	6123      	str	r3, [r4, #16]
 80017ee:	f8cd 8000 	str.w	r8, [sp]
 80017f2:	463b      	mov	r3, r7
 80017f4:	aa03      	add	r2, sp, #12
 80017f6:	4621      	mov	r1, r4
 80017f8:	4630      	mov	r0, r6
 80017fa:	f7ff feef 	bl	80015dc <_printf_common>
 80017fe:	3001      	adds	r0, #1
 8001800:	d155      	bne.n	80018ae <_printf_i+0x1e6>
 8001802:	f04f 30ff 	mov.w	r0, #4294967295
 8001806:	b005      	add	sp, #20
 8001808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800180c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001810:	493c      	ldr	r1, [pc, #240]	; (8001904 <_printf_i+0x23c>)
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	f012 0f80 	tst.w	r2, #128	; 0x80
 800181a:	f100 0504 	add.w	r5, r0, #4
 800181e:	601d      	str	r5, [r3, #0]
 8001820:	d001      	beq.n	8001826 <_printf_i+0x15e>
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	e002      	b.n	800182c <_printf_i+0x164>
 8001826:	0655      	lsls	r5, r2, #25
 8001828:	d5fb      	bpl.n	8001822 <_printf_i+0x15a>
 800182a:	8803      	ldrh	r3, [r0, #0]
 800182c:	07d0      	lsls	r0, r2, #31
 800182e:	bf44      	itt	mi
 8001830:	f042 0220 	orrmi.w	r2, r2, #32
 8001834:	6022      	strmi	r2, [r4, #0]
 8001836:	b91b      	cbnz	r3, 8001840 <_printf_i+0x178>
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	f022 0220 	bic.w	r2, r2, #32
 800183e:	6022      	str	r2, [r4, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	e7b1      	b.n	80017a8 <_printf_i+0xe0>
 8001844:	4675      	mov	r5, lr
 8001846:	fbb3 f0f2 	udiv	r0, r3, r2
 800184a:	fb02 3310 	mls	r3, r2, r0, r3
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001854:	4603      	mov	r3, r0
 8001856:	2800      	cmp	r0, #0
 8001858:	d1f5      	bne.n	8001846 <_printf_i+0x17e>
 800185a:	e7b7      	b.n	80017cc <_printf_i+0x104>
 800185c:	6808      	ldr	r0, [r1, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	6949      	ldr	r1, [r1, #20]
 8001862:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001866:	d004      	beq.n	8001872 <_printf_i+0x1aa>
 8001868:	1d10      	adds	r0, r2, #4
 800186a:	6018      	str	r0, [r3, #0]
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	6019      	str	r1, [r3, #0]
 8001870:	e007      	b.n	8001882 <_printf_i+0x1ba>
 8001872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001876:	f102 0004 	add.w	r0, r2, #4
 800187a:	6018      	str	r0, [r3, #0]
 800187c:	6813      	ldr	r3, [r2, #0]
 800187e:	d0f6      	beq.n	800186e <_printf_i+0x1a6>
 8001880:	8019      	strh	r1, [r3, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	6123      	str	r3, [r4, #16]
 8001886:	4675      	mov	r5, lr
 8001888:	e7b1      	b.n	80017ee <_printf_i+0x126>
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	1d11      	adds	r1, r2, #4
 800188e:	6019      	str	r1, [r3, #0]
 8001890:	6815      	ldr	r5, [r2, #0]
 8001892:	6862      	ldr	r2, [r4, #4]
 8001894:	2100      	movs	r1, #0
 8001896:	4628      	mov	r0, r5
 8001898:	f7fe fcb2 	bl	8000200 <memchr>
 800189c:	b108      	cbz	r0, 80018a2 <_printf_i+0x1da>
 800189e:	1b40      	subs	r0, r0, r5
 80018a0:	6060      	str	r0, [r4, #4]
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	6123      	str	r3, [r4, #16]
 80018a6:	2300      	movs	r3, #0
 80018a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018ac:	e79f      	b.n	80017ee <_printf_i+0x126>
 80018ae:	6923      	ldr	r3, [r4, #16]
 80018b0:	462a      	mov	r2, r5
 80018b2:	4639      	mov	r1, r7
 80018b4:	4630      	mov	r0, r6
 80018b6:	47c0      	blx	r8
 80018b8:	3001      	adds	r0, #1
 80018ba:	d0a2      	beq.n	8001802 <_printf_i+0x13a>
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	079b      	lsls	r3, r3, #30
 80018c0:	d507      	bpl.n	80018d2 <_printf_i+0x20a>
 80018c2:	2500      	movs	r5, #0
 80018c4:	f104 0919 	add.w	r9, r4, #25
 80018c8:	68e3      	ldr	r3, [r4, #12]
 80018ca:	9a03      	ldr	r2, [sp, #12]
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	429d      	cmp	r5, r3
 80018d0:	db05      	blt.n	80018de <_printf_i+0x216>
 80018d2:	68e0      	ldr	r0, [r4, #12]
 80018d4:	9b03      	ldr	r3, [sp, #12]
 80018d6:	4298      	cmp	r0, r3
 80018d8:	bfb8      	it	lt
 80018da:	4618      	movlt	r0, r3
 80018dc:	e793      	b.n	8001806 <_printf_i+0x13e>
 80018de:	2301      	movs	r3, #1
 80018e0:	464a      	mov	r2, r9
 80018e2:	4639      	mov	r1, r7
 80018e4:	4630      	mov	r0, r6
 80018e6:	47c0      	blx	r8
 80018e8:	3001      	adds	r0, #1
 80018ea:	d08a      	beq.n	8001802 <_printf_i+0x13a>
 80018ec:	3501      	adds	r5, #1
 80018ee:	e7eb      	b.n	80018c8 <_printf_i+0x200>
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1a7      	bne.n	8001844 <_printf_i+0x17c>
 80018f4:	780b      	ldrb	r3, [r1, #0]
 80018f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018fe:	e765      	b.n	80017cc <_printf_i+0x104>
 8001900:	08009bc9 	.word	0x08009bc9
 8001904:	08009bb8 	.word	0x08009bb8

08001908 <quorem>:
 8001908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190c:	6903      	ldr	r3, [r0, #16]
 800190e:	690c      	ldr	r4, [r1, #16]
 8001910:	429c      	cmp	r4, r3
 8001912:	4680      	mov	r8, r0
 8001914:	f300 8082 	bgt.w	8001a1c <quorem+0x114>
 8001918:	3c01      	subs	r4, #1
 800191a:	f101 0714 	add.w	r7, r1, #20
 800191e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8001922:	f100 0614 	add.w	r6, r0, #20
 8001926:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800192a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800192e:	eb06 030e 	add.w	r3, r6, lr
 8001932:	3501      	adds	r5, #1
 8001934:	eb07 090e 	add.w	r9, r7, lr
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	fbb0 f5f5 	udiv	r5, r0, r5
 800193e:	b395      	cbz	r5, 80019a6 <quorem+0x9e>
 8001940:	f04f 0a00 	mov.w	sl, #0
 8001944:	4638      	mov	r0, r7
 8001946:	46b4      	mov	ip, r6
 8001948:	46d3      	mov	fp, sl
 800194a:	f850 2b04 	ldr.w	r2, [r0], #4
 800194e:	b293      	uxth	r3, r2
 8001950:	fb05 a303 	mla	r3, r5, r3, sl
 8001954:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8001958:	b29b      	uxth	r3, r3
 800195a:	ebab 0303 	sub.w	r3, fp, r3
 800195e:	0c12      	lsrs	r2, r2, #16
 8001960:	f8bc b000 	ldrh.w	fp, [ip]
 8001964:	fb05 a202 	mla	r2, r5, r2, sl
 8001968:	fa13 f38b 	uxtah	r3, r3, fp
 800196c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8001970:	fa1f fb82 	uxth.w	fp, r2
 8001974:	f8dc 2000 	ldr.w	r2, [ip]
 8001978:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800197c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8001980:	b29b      	uxth	r3, r3
 8001982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001986:	4581      	cmp	r9, r0
 8001988:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800198c:	f84c 3b04 	str.w	r3, [ip], #4
 8001990:	d2db      	bcs.n	800194a <quorem+0x42>
 8001992:	f856 300e 	ldr.w	r3, [r6, lr]
 8001996:	b933      	cbnz	r3, 80019a6 <quorem+0x9e>
 8001998:	9b01      	ldr	r3, [sp, #4]
 800199a:	3b04      	subs	r3, #4
 800199c:	429e      	cmp	r6, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	d330      	bcc.n	8001a04 <quorem+0xfc>
 80019a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80019a6:	4640      	mov	r0, r8
 80019a8:	f001 f83b 	bl	8002a22 <__mcmp>
 80019ac:	2800      	cmp	r0, #0
 80019ae:	db25      	blt.n	80019fc <quorem+0xf4>
 80019b0:	3501      	adds	r5, #1
 80019b2:	4630      	mov	r0, r6
 80019b4:	f04f 0e00 	mov.w	lr, #0
 80019b8:	f857 2b04 	ldr.w	r2, [r7], #4
 80019bc:	f8d0 c000 	ldr.w	ip, [r0]
 80019c0:	b293      	uxth	r3, r2
 80019c2:	ebae 0303 	sub.w	r3, lr, r3
 80019c6:	0c12      	lsrs	r2, r2, #16
 80019c8:	fa13 f38c 	uxtah	r3, r3, ip
 80019cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80019d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019da:	45b9      	cmp	r9, r7
 80019dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80019e0:	f840 3b04 	str.w	r3, [r0], #4
 80019e4:	d2e8      	bcs.n	80019b8 <quorem+0xb0>
 80019e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80019ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80019ee:	b92a      	cbnz	r2, 80019fc <quorem+0xf4>
 80019f0:	3b04      	subs	r3, #4
 80019f2:	429e      	cmp	r6, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	d30b      	bcc.n	8001a10 <quorem+0x108>
 80019f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80019fc:	4628      	mov	r0, r5
 80019fe:	b003      	add	sp, #12
 8001a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	3b04      	subs	r3, #4
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d1ca      	bne.n	80019a2 <quorem+0x9a>
 8001a0c:	3c01      	subs	r4, #1
 8001a0e:	e7c5      	b.n	800199c <quorem+0x94>
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	3b04      	subs	r3, #4
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	d1ef      	bne.n	80019f8 <quorem+0xf0>
 8001a18:	3c01      	subs	r4, #1
 8001a1a:	e7ea      	b.n	80019f2 <quorem+0xea>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	e7ee      	b.n	80019fe <quorem+0xf6>

08001a20 <_dtoa_r>:
 8001a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a24:	ec57 6b10 	vmov	r6, r7, d0
 8001a28:	b097      	sub	sp, #92	; 0x5c
 8001a2a:	e9cd 6700 	strd	r6, r7, [sp]
 8001a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8001a30:	9107      	str	r1, [sp, #28]
 8001a32:	4604      	mov	r4, r0
 8001a34:	920a      	str	r2, [sp, #40]	; 0x28
 8001a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a38:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8001a3a:	b93e      	cbnz	r6, 8001a4c <_dtoa_r+0x2c>
 8001a3c:	2010      	movs	r0, #16
 8001a3e:	f000 fdcb 	bl	80025d8 <malloc>
 8001a42:	6260      	str	r0, [r4, #36]	; 0x24
 8001a44:	6046      	str	r6, [r0, #4]
 8001a46:	6086      	str	r6, [r0, #8]
 8001a48:	6006      	str	r6, [r0, #0]
 8001a4a:	60c6      	str	r6, [r0, #12]
 8001a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	b151      	cbz	r1, 8001a68 <_dtoa_r+0x48>
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	604a      	str	r2, [r1, #4]
 8001a56:	2301      	movs	r3, #1
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f000 fe0a 	bl	8002676 <_Bfree>
 8001a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	9b01      	ldr	r3, [sp, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bfbf      	itttt	lt
 8001a6e:	2301      	movlt	r3, #1
 8001a70:	602b      	strlt	r3, [r5, #0]
 8001a72:	9b01      	ldrlt	r3, [sp, #4]
 8001a74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8001a78:	bfb2      	itee	lt
 8001a7a:	9301      	strlt	r3, [sp, #4]
 8001a7c:	2300      	movge	r3, #0
 8001a7e:	602b      	strge	r3, [r5, #0]
 8001a80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001a84:	4ba8      	ldr	r3, [pc, #672]	; (8001d28 <_dtoa_r+0x308>)
 8001a86:	ea33 0308 	bics.w	r3, r3, r8
 8001a8a:	d11b      	bne.n	8001ac4 <_dtoa_r+0xa4>
 8001a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001a8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	b923      	cbnz	r3, 8001aa2 <_dtoa_r+0x82>
 8001a98:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	f000 8578 	beq.w	8002592 <_dtoa_r+0xb72>
 8001aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001aa4:	b953      	cbnz	r3, 8001abc <_dtoa_r+0x9c>
 8001aa6:	4ba1      	ldr	r3, [pc, #644]	; (8001d2c <_dtoa_r+0x30c>)
 8001aa8:	e021      	b.n	8001aee <_dtoa_r+0xce>
 8001aaa:	4ba1      	ldr	r3, [pc, #644]	; (8001d30 <_dtoa_r+0x310>)
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	3308      	adds	r3, #8
 8001ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	9802      	ldr	r0, [sp, #8]
 8001ab6:	b017      	add	sp, #92	; 0x5c
 8001ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001abc:	4b9b      	ldr	r3, [pc, #620]	; (8001d2c <_dtoa_r+0x30c>)
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	e7f5      	b.n	8001ab0 <_dtoa_r+0x90>
 8001ac4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2300      	movs	r3, #0
 8001acc:	4630      	mov	r0, r6
 8001ace:	4639      	mov	r1, r7
 8001ad0:	f7ff f866 	bl	8000ba0 <__aeabi_dcmpeq>
 8001ad4:	4681      	mov	r9, r0
 8001ad6:	b160      	cbz	r0, 8001af2 <_dtoa_r+0xd2>
 8001ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001ada:	2301      	movs	r3, #1
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8553 	beq.w	800258c <_dtoa_r+0xb6c>
 8001ae6:	4b93      	ldr	r3, [pc, #588]	; (8001d34 <_dtoa_r+0x314>)
 8001ae8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	e7e0      	b.n	8001ab4 <_dtoa_r+0x94>
 8001af2:	aa14      	add	r2, sp, #80	; 0x50
 8001af4:	a915      	add	r1, sp, #84	; 0x54
 8001af6:	ec47 6b10 	vmov	d0, r6, r7
 8001afa:	4620      	mov	r0, r4
 8001afc:	f001 f809 	bl	8002b12 <__d2b>
 8001b00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8001b04:	4682      	mov	sl, r0
 8001b06:	2d00      	cmp	r5, #0
 8001b08:	d07e      	beq.n	8001c08 <_dtoa_r+0x1e8>
 8001b0a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8001b0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001b12:	4630      	mov	r0, r6
 8001b14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001b18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8001b1c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8001b20:	2200      	movs	r2, #0
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <_dtoa_r+0x318>)
 8001b24:	f7fe fc20 	bl	8000368 <__aeabi_dsub>
 8001b28:	a379      	add	r3, pc, #484	; (adr r3, 8001d10 <_dtoa_r+0x2f0>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fdcf 	bl	80006d0 <__aeabi_dmul>
 8001b32:	a379      	add	r3, pc, #484	; (adr r3, 8001d18 <_dtoa_r+0x2f8>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fc18 	bl	800036c <__adddf3>
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	4628      	mov	r0, r5
 8001b40:	460f      	mov	r7, r1
 8001b42:	f7fe fd5f 	bl	8000604 <__aeabi_i2d>
 8001b46:	a376      	add	r3, pc, #472	; (adr r3, 8001d20 <_dtoa_r+0x300>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fdc0 	bl	80006d0 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4630      	mov	r0, r6
 8001b56:	4639      	mov	r1, r7
 8001b58:	f7fe fc08 	bl	800036c <__adddf3>
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	460f      	mov	r7, r1
 8001b60:	f7ff f866 	bl	8000c30 <__aeabi_d2iz>
 8001b64:	2200      	movs	r2, #0
 8001b66:	4683      	mov	fp, r0
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	4639      	mov	r1, r7
 8001b6e:	f7ff f821 	bl	8000bb4 <__aeabi_dcmplt>
 8001b72:	b158      	cbz	r0, 8001b8c <_dtoa_r+0x16c>
 8001b74:	4658      	mov	r0, fp
 8001b76:	f7fe fd45 	bl	8000604 <__aeabi_i2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4630      	mov	r0, r6
 8001b80:	4639      	mov	r1, r7
 8001b82:	f7ff f80d 	bl	8000ba0 <__aeabi_dcmpeq>
 8001b86:	b908      	cbnz	r0, 8001b8c <_dtoa_r+0x16c>
 8001b88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001b8c:	f1bb 0f16 	cmp.w	fp, #22
 8001b90:	d859      	bhi.n	8001c46 <_dtoa_r+0x226>
 8001b92:	496a      	ldr	r1, [pc, #424]	; (8001d3c <_dtoa_r+0x31c>)
 8001b94:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8001b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba0:	f7ff f826 	bl	8000bf0 <__aeabi_dcmpgt>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d050      	beq.n	8001c4a <_dtoa_r+0x22a>
 8001ba8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001bac:	2300      	movs	r3, #0
 8001bae:	930e      	str	r3, [sp, #56]	; 0x38
 8001bb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001bb2:	1b5d      	subs	r5, r3, r5
 8001bb4:	1e6b      	subs	r3, r5, #1
 8001bb6:	9306      	str	r3, [sp, #24]
 8001bb8:	bf45      	ittet	mi
 8001bba:	f1c5 0301 	rsbmi	r3, r5, #1
 8001bbe:	9305      	strmi	r3, [sp, #20]
 8001bc0:	2300      	movpl	r3, #0
 8001bc2:	2300      	movmi	r3, #0
 8001bc4:	bf4c      	ite	mi
 8001bc6:	9306      	strmi	r3, [sp, #24]
 8001bc8:	9305      	strpl	r3, [sp, #20]
 8001bca:	f1bb 0f00 	cmp.w	fp, #0
 8001bce:	db3e      	blt.n	8001c4e <_dtoa_r+0x22e>
 8001bd0:	9b06      	ldr	r3, [sp, #24]
 8001bd2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8001bd6:	445b      	add	r3, fp
 8001bd8:	9306      	str	r3, [sp, #24]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9308      	str	r3, [sp, #32]
 8001bde:	9b07      	ldr	r3, [sp, #28]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	f200 80af 	bhi.w	8001d44 <_dtoa_r+0x324>
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	bfc4      	itt	gt
 8001bea:	3b04      	subgt	r3, #4
 8001bec:	9307      	strgt	r3, [sp, #28]
 8001bee:	9b07      	ldr	r3, [sp, #28]
 8001bf0:	f1a3 0302 	sub.w	r3, r3, #2
 8001bf4:	bfcc      	ite	gt
 8001bf6:	2600      	movgt	r6, #0
 8001bf8:	2601      	movle	r6, #1
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	f200 80ae 	bhi.w	8001d5c <_dtoa_r+0x33c>
 8001c00:	e8df f003 	tbb	[pc, r3]
 8001c04:	772f8482 	.word	0x772f8482
 8001c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001c0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001c0c:	441d      	add	r5, r3
 8001c0e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	dd11      	ble.n	8001c3a <_dtoa_r+0x21a>
 8001c16:	9a00      	ldr	r2, [sp, #0]
 8001c18:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8001c1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c20:	fa22 f000 	lsr.w	r0, r2, r0
 8001c24:	fa08 f303 	lsl.w	r3, r8, r3
 8001c28:	4318      	orrs	r0, r3
 8001c2a:	f7fe fcdb 	bl	80005e4 <__aeabi_ui2d>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001c34:	3d01      	subs	r5, #1
 8001c36:	9312      	str	r3, [sp, #72]	; 0x48
 8001c38:	e772      	b.n	8001b20 <_dtoa_r+0x100>
 8001c3a:	f1c3 0020 	rsb	r0, r3, #32
 8001c3e:	9b00      	ldr	r3, [sp, #0]
 8001c40:	fa03 f000 	lsl.w	r0, r3, r0
 8001c44:	e7f1      	b.n	8001c2a <_dtoa_r+0x20a>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e7b1      	b.n	8001bae <_dtoa_r+0x18e>
 8001c4a:	900e      	str	r0, [sp, #56]	; 0x38
 8001c4c:	e7b0      	b.n	8001bb0 <_dtoa_r+0x190>
 8001c4e:	9b05      	ldr	r3, [sp, #20]
 8001c50:	eba3 030b 	sub.w	r3, r3, fp
 8001c54:	9305      	str	r3, [sp, #20]
 8001c56:	f1cb 0300 	rsb	r3, fp, #0
 8001c5a:	9308      	str	r3, [sp, #32]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c60:	e7bd      	b.n	8001bde <_dtoa_r+0x1be>
 8001c62:	2301      	movs	r3, #1
 8001c64:	9309      	str	r3, [sp, #36]	; 0x24
 8001c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	dd7a      	ble.n	8001d62 <_dtoa_r+0x342>
 8001c6c:	9304      	str	r3, [sp, #16]
 8001c6e:	9303      	str	r3, [sp, #12]
 8001c70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001c72:	2200      	movs	r2, #0
 8001c74:	606a      	str	r2, [r5, #4]
 8001c76:	2104      	movs	r1, #4
 8001c78:	f101 0214 	add.w	r2, r1, #20
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d975      	bls.n	8001d6c <_dtoa_r+0x34c>
 8001c80:	6869      	ldr	r1, [r5, #4]
 8001c82:	4620      	mov	r0, r4
 8001c84:	f000 fcc3 	bl	800260e <_Balloc>
 8001c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c8a:	6028      	str	r0, [r5, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	9b03      	ldr	r3, [sp, #12]
 8001c92:	2b0e      	cmp	r3, #14
 8001c94:	f200 80e5 	bhi.w	8001e62 <_dtoa_r+0x442>
 8001c98:	2e00      	cmp	r6, #0
 8001c9a:	f000 80e2 	beq.w	8001e62 <_dtoa_r+0x442>
 8001c9e:	ed9d 7b00 	vldr	d7, [sp]
 8001ca2:	f1bb 0f00 	cmp.w	fp, #0
 8001ca6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001caa:	dd74      	ble.n	8001d96 <_dtoa_r+0x376>
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <_dtoa_r+0x31c>)
 8001cae:	f00b 030f 	and.w	r3, fp, #15
 8001cb2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8001cb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001cba:	06f0      	lsls	r0, r6, #27
 8001cbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001cc0:	d559      	bpl.n	8001d76 <_dtoa_r+0x356>
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <_dtoa_r+0x320>)
 8001cc4:	ec51 0b17 	vmov	r0, r1, d7
 8001cc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ccc:	f7fe fe2a 	bl	8000924 <__aeabi_ddiv>
 8001cd0:	e9cd 0100 	strd	r0, r1, [sp]
 8001cd4:	f006 060f 	and.w	r6, r6, #15
 8001cd8:	2503      	movs	r5, #3
 8001cda:	4f19      	ldr	r7, [pc, #100]	; (8001d40 <_dtoa_r+0x320>)
 8001cdc:	2e00      	cmp	r6, #0
 8001cde:	d14c      	bne.n	8001d7a <_dtoa_r+0x35a>
 8001ce0:	4642      	mov	r2, r8
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001ce8:	f7fe fe1c 	bl	8000924 <__aeabi_ddiv>
 8001cec:	e9cd 0100 	strd	r0, r1, [sp]
 8001cf0:	e06a      	b.n	8001dc8 <_dtoa_r+0x3a8>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8001cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cf8:	445b      	add	r3, fp
 8001cfa:	9304      	str	r3, [sp, #16]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	9303      	str	r3, [sp, #12]
 8001d02:	bfb8      	it	lt
 8001d04:	2301      	movlt	r3, #1
 8001d06:	e7b3      	b.n	8001c70 <_dtoa_r+0x250>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e7ab      	b.n	8001c64 <_dtoa_r+0x244>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e7f1      	b.n	8001cf4 <_dtoa_r+0x2d4>
 8001d10:	636f4361 	.word	0x636f4361
 8001d14:	3fd287a7 	.word	0x3fd287a7
 8001d18:	8b60c8b3 	.word	0x8b60c8b3
 8001d1c:	3fc68a28 	.word	0x3fc68a28
 8001d20:	509f79fb 	.word	0x509f79fb
 8001d24:	3fd34413 	.word	0x3fd34413
 8001d28:	7ff00000 	.word	0x7ff00000
 8001d2c:	08009be3 	.word	0x08009be3
 8001d30:	08009bda 	.word	0x08009bda
 8001d34:	080156e2 	.word	0x080156e2
 8001d38:	3ff80000 	.word	0x3ff80000
 8001d3c:	08009c10 	.word	0x08009c10
 8001d40:	08009be8 	.word	0x08009be8
 8001d44:	2601      	movs	r6, #1
 8001d46:	2300      	movs	r3, #0
 8001d48:	9307      	str	r3, [sp, #28]
 8001d4a:	9609      	str	r6, [sp, #36]	; 0x24
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	9304      	str	r3, [sp, #16]
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	2312      	movs	r3, #18
 8001d58:	920a      	str	r2, [sp, #40]	; 0x28
 8001d5a:	e789      	b.n	8001c70 <_dtoa_r+0x250>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d60:	e7f4      	b.n	8001d4c <_dtoa_r+0x32c>
 8001d62:	2301      	movs	r3, #1
 8001d64:	9304      	str	r3, [sp, #16]
 8001d66:	9303      	str	r3, [sp, #12]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	e7f5      	b.n	8001d58 <_dtoa_r+0x338>
 8001d6c:	686a      	ldr	r2, [r5, #4]
 8001d6e:	3201      	adds	r2, #1
 8001d70:	606a      	str	r2, [r5, #4]
 8001d72:	0049      	lsls	r1, r1, #1
 8001d74:	e780      	b.n	8001c78 <_dtoa_r+0x258>
 8001d76:	2502      	movs	r5, #2
 8001d78:	e7af      	b.n	8001cda <_dtoa_r+0x2ba>
 8001d7a:	07f1      	lsls	r1, r6, #31
 8001d7c:	d508      	bpl.n	8001d90 <_dtoa_r+0x370>
 8001d7e:	4640      	mov	r0, r8
 8001d80:	4649      	mov	r1, r9
 8001d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d86:	f7fe fca3 	bl	80006d0 <__aeabi_dmul>
 8001d8a:	3501      	adds	r5, #1
 8001d8c:	4680      	mov	r8, r0
 8001d8e:	4689      	mov	r9, r1
 8001d90:	1076      	asrs	r6, r6, #1
 8001d92:	3708      	adds	r7, #8
 8001d94:	e7a2      	b.n	8001cdc <_dtoa_r+0x2bc>
 8001d96:	f000 809d 	beq.w	8001ed4 <_dtoa_r+0x4b4>
 8001d9a:	f1cb 0600 	rsb	r6, fp, #0
 8001d9e:	4b9f      	ldr	r3, [pc, #636]	; (800201c <_dtoa_r+0x5fc>)
 8001da0:	4f9f      	ldr	r7, [pc, #636]	; (8002020 <_dtoa_r+0x600>)
 8001da2:	f006 020f 	and.w	r2, r6, #15
 8001da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001db2:	f7fe fc8d 	bl	80006d0 <__aeabi_dmul>
 8001db6:	e9cd 0100 	strd	r0, r1, [sp]
 8001dba:	1136      	asrs	r6, r6, #4
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2502      	movs	r5, #2
 8001dc0:	2e00      	cmp	r6, #0
 8001dc2:	d17c      	bne.n	8001ebe <_dtoa_r+0x49e>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d191      	bne.n	8001cec <_dtoa_r+0x2cc>
 8001dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8084 	beq.w	8001ed8 <_dtoa_r+0x4b8>
 8001dd0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4b93      	ldr	r3, [pc, #588]	; (8002024 <_dtoa_r+0x604>)
 8001dd8:	4640      	mov	r0, r8
 8001dda:	4649      	mov	r1, r9
 8001ddc:	f7fe feea 	bl	8000bb4 <__aeabi_dcmplt>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d079      	beq.n	8001ed8 <_dtoa_r+0x4b8>
 8001de4:	9b03      	ldr	r3, [sp, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d076      	beq.n	8001ed8 <_dtoa_r+0x4b8>
 8001dea:	9b04      	ldr	r3, [sp, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	dd34      	ble.n	8001e5a <_dtoa_r+0x43a>
 8001df0:	2200      	movs	r2, #0
 8001df2:	4b8d      	ldr	r3, [pc, #564]	; (8002028 <_dtoa_r+0x608>)
 8001df4:	4640      	mov	r0, r8
 8001df6:	4649      	mov	r1, r9
 8001df8:	f7fe fc6a 	bl	80006d0 <__aeabi_dmul>
 8001dfc:	e9cd 0100 	strd	r0, r1, [sp]
 8001e00:	9e04      	ldr	r6, [sp, #16]
 8001e02:	f10b 37ff 	add.w	r7, fp, #4294967295
 8001e06:	3501      	adds	r5, #1
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f7fe fbfb 	bl	8000604 <__aeabi_i2d>
 8001e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001e12:	f7fe fc5d 	bl	80006d0 <__aeabi_dmul>
 8001e16:	2200      	movs	r2, #0
 8001e18:	4b84      	ldr	r3, [pc, #528]	; (800202c <_dtoa_r+0x60c>)
 8001e1a:	f7fe faa7 	bl	800036c <__adddf3>
 8001e1e:	4680      	mov	r8, r0
 8001e20:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8001e24:	2e00      	cmp	r6, #0
 8001e26:	d15a      	bne.n	8001ede <_dtoa_r+0x4be>
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4b81      	ldr	r3, [pc, #516]	; (8002030 <_dtoa_r+0x610>)
 8001e2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001e30:	f7fe fa9a 	bl	8000368 <__aeabi_dsub>
 8001e34:	4642      	mov	r2, r8
 8001e36:	464b      	mov	r3, r9
 8001e38:	e9cd 0100 	strd	r0, r1, [sp]
 8001e3c:	f7fe fed8 	bl	8000bf0 <__aeabi_dcmpgt>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	f040 829b 	bne.w	800237c <_dtoa_r+0x95c>
 8001e46:	4642      	mov	r2, r8
 8001e48:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8001e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001e50:	f7fe feb0 	bl	8000bb4 <__aeabi_dcmplt>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	f040 828f 	bne.w	8002378 <_dtoa_r+0x958>
 8001e5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f2c0 8150 	blt.w	800210a <_dtoa_r+0x6ea>
 8001e6a:	f1bb 0f0e 	cmp.w	fp, #14
 8001e6e:	f300 814c 	bgt.w	800210a <_dtoa_r+0x6ea>
 8001e72:	4b6a      	ldr	r3, [pc, #424]	; (800201c <_dtoa_r+0x5fc>)
 8001e74:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8001e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f280 80da 	bge.w	8002038 <_dtoa_r+0x618>
 8001e84:	9b03      	ldr	r3, [sp, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f300 80d6 	bgt.w	8002038 <_dtoa_r+0x618>
 8001e8c:	f040 8273 	bne.w	8002376 <_dtoa_r+0x956>
 8001e90:	2200      	movs	r2, #0
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <_dtoa_r+0x610>)
 8001e94:	4640      	mov	r0, r8
 8001e96:	4649      	mov	r1, r9
 8001e98:	f7fe fc1a 	bl	80006d0 <__aeabi_dmul>
 8001e9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001ea0:	f7fe fe9c 	bl	8000bdc <__aeabi_dcmpge>
 8001ea4:	9e03      	ldr	r6, [sp, #12]
 8001ea6:	4637      	mov	r7, r6
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	f040 824a 	bne.w	8002342 <_dtoa_r+0x922>
 8001eae:	9b02      	ldr	r3, [sp, #8]
 8001eb0:	9a02      	ldr	r2, [sp, #8]
 8001eb2:	1c5d      	adds	r5, r3, #1
 8001eb4:	2331      	movs	r3, #49	; 0x31
 8001eb6:	7013      	strb	r3, [r2, #0]
 8001eb8:	f10b 0b01 	add.w	fp, fp, #1
 8001ebc:	e245      	b.n	800234a <_dtoa_r+0x92a>
 8001ebe:	07f2      	lsls	r2, r6, #31
 8001ec0:	d505      	bpl.n	8001ece <_dtoa_r+0x4ae>
 8001ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ec6:	f7fe fc03 	bl	80006d0 <__aeabi_dmul>
 8001eca:	3501      	adds	r5, #1
 8001ecc:	2301      	movs	r3, #1
 8001ece:	1076      	asrs	r6, r6, #1
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	e775      	b.n	8001dc0 <_dtoa_r+0x3a0>
 8001ed4:	2502      	movs	r5, #2
 8001ed6:	e777      	b.n	8001dc8 <_dtoa_r+0x3a8>
 8001ed8:	465f      	mov	r7, fp
 8001eda:	9e03      	ldr	r6, [sp, #12]
 8001edc:	e794      	b.n	8001e08 <_dtoa_r+0x3e8>
 8001ede:	9a02      	ldr	r2, [sp, #8]
 8001ee0:	4b4e      	ldr	r3, [pc, #312]	; (800201c <_dtoa_r+0x5fc>)
 8001ee2:	4432      	add	r2, r6
 8001ee4:	9213      	str	r2, [sp, #76]	; 0x4c
 8001ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ee8:	1e71      	subs	r1, r6, #1
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d048      	beq.n	8001f80 <_dtoa_r+0x560>
 8001eee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	494e      	ldr	r1, [pc, #312]	; (8002034 <_dtoa_r+0x614>)
 8001efa:	f7fe fd13 	bl	8000924 <__aeabi_ddiv>
 8001efe:	4642      	mov	r2, r8
 8001f00:	464b      	mov	r3, r9
 8001f02:	f7fe fa31 	bl	8000368 <__aeabi_dsub>
 8001f06:	9d02      	ldr	r5, [sp, #8]
 8001f08:	4680      	mov	r8, r0
 8001f0a:	4689      	mov	r9, r1
 8001f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001f10:	f7fe fe8e 	bl	8000c30 <__aeabi_d2iz>
 8001f14:	4606      	mov	r6, r0
 8001f16:	f7fe fb75 	bl	8000604 <__aeabi_i2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001f22:	f7fe fa21 	bl	8000368 <__aeabi_dsub>
 8001f26:	3630      	adds	r6, #48	; 0x30
 8001f28:	f805 6b01 	strb.w	r6, [r5], #1
 8001f2c:	4642      	mov	r2, r8
 8001f2e:	464b      	mov	r3, r9
 8001f30:	e9cd 0100 	strd	r0, r1, [sp]
 8001f34:	f7fe fe3e 	bl	8000bb4 <__aeabi_dcmplt>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d165      	bne.n	8002008 <_dtoa_r+0x5e8>
 8001f3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001f40:	2000      	movs	r0, #0
 8001f42:	4938      	ldr	r1, [pc, #224]	; (8002024 <_dtoa_r+0x604>)
 8001f44:	f7fe fa10 	bl	8000368 <__aeabi_dsub>
 8001f48:	4642      	mov	r2, r8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	f7fe fe32 	bl	8000bb4 <__aeabi_dcmplt>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	f040 80ba 	bne.w	80020ca <_dtoa_r+0x6aa>
 8001f56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001f58:	429d      	cmp	r5, r3
 8001f5a:	f43f af7e 	beq.w	8001e5a <_dtoa_r+0x43a>
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <_dtoa_r+0x608>)
 8001f62:	4640      	mov	r0, r8
 8001f64:	4649      	mov	r1, r9
 8001f66:	f7fe fbb3 	bl	80006d0 <__aeabi_dmul>
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4680      	mov	r8, r0
 8001f6e:	4689      	mov	r9, r1
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <_dtoa_r+0x608>)
 8001f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001f76:	f7fe fbab 	bl	80006d0 <__aeabi_dmul>
 8001f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8001f7e:	e7c5      	b.n	8001f0c <_dtoa_r+0x4ec>
 8001f80:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001f84:	4642      	mov	r2, r8
 8001f86:	464b      	mov	r3, r9
 8001f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f8c:	f7fe fba0 	bl	80006d0 <__aeabi_dmul>
 8001f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001f94:	9d02      	ldr	r5, [sp, #8]
 8001f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001f9a:	f7fe fe49 	bl	8000c30 <__aeabi_d2iz>
 8001f9e:	4606      	mov	r6, r0
 8001fa0:	f7fe fb30 	bl	8000604 <__aeabi_i2d>
 8001fa4:	3630      	adds	r6, #48	; 0x30
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001fae:	f7fe f9db 	bl	8000368 <__aeabi_dsub>
 8001fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8001fb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001fb8:	42ab      	cmp	r3, r5
 8001fba:	4680      	mov	r8, r0
 8001fbc:	4689      	mov	r9, r1
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	d125      	bne.n	8002010 <_dtoa_r+0x5f0>
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <_dtoa_r+0x614>)
 8001fc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001fca:	f7fe f9cf 	bl	800036c <__adddf3>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	f7fe fe0b 	bl	8000bf0 <__aeabi_dcmpgt>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	d175      	bne.n	80020ca <_dtoa_r+0x6aa>
 8001fde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	4913      	ldr	r1, [pc, #76]	; (8002034 <_dtoa_r+0x614>)
 8001fe6:	f7fe f9bf 	bl	8000368 <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4640      	mov	r0, r8
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	f7fe fddf 	bl	8000bb4 <__aeabi_dcmplt>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	f43f af2f 	beq.w	8001e5a <_dtoa_r+0x43a>
 8001ffc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	f105 32ff 	add.w	r2, r5, #4294967295
 8002006:	d001      	beq.n	800200c <_dtoa_r+0x5ec>
 8002008:	46bb      	mov	fp, r7
 800200a:	e04d      	b.n	80020a8 <_dtoa_r+0x688>
 800200c:	4615      	mov	r5, r2
 800200e:	e7f5      	b.n	8001ffc <_dtoa_r+0x5dc>
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <_dtoa_r+0x608>)
 8002012:	f7fe fb5d 	bl	80006d0 <__aeabi_dmul>
 8002016:	e9cd 0100 	strd	r0, r1, [sp]
 800201a:	e7bc      	b.n	8001f96 <_dtoa_r+0x576>
 800201c:	08009c10 	.word	0x08009c10
 8002020:	08009be8 	.word	0x08009be8
 8002024:	3ff00000 	.word	0x3ff00000
 8002028:	40240000 	.word	0x40240000
 800202c:	401c0000 	.word	0x401c0000
 8002030:	40140000 	.word	0x40140000
 8002034:	3fe00000 	.word	0x3fe00000
 8002038:	e9dd 6700 	ldrd	r6, r7, [sp]
 800203c:	9d02      	ldr	r5, [sp, #8]
 800203e:	4642      	mov	r2, r8
 8002040:	464b      	mov	r3, r9
 8002042:	4630      	mov	r0, r6
 8002044:	4639      	mov	r1, r7
 8002046:	f7fe fc6d 	bl	8000924 <__aeabi_ddiv>
 800204a:	f7fe fdf1 	bl	8000c30 <__aeabi_d2iz>
 800204e:	9000      	str	r0, [sp, #0]
 8002050:	f7fe fad8 	bl	8000604 <__aeabi_i2d>
 8002054:	4642      	mov	r2, r8
 8002056:	464b      	mov	r3, r9
 8002058:	f7fe fb3a 	bl	80006d0 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4630      	mov	r0, r6
 8002062:	4639      	mov	r1, r7
 8002064:	f7fe f980 	bl	8000368 <__aeabi_dsub>
 8002068:	9e00      	ldr	r6, [sp, #0]
 800206a:	9f03      	ldr	r7, [sp, #12]
 800206c:	3630      	adds	r6, #48	; 0x30
 800206e:	f805 6b01 	strb.w	r6, [r5], #1
 8002072:	9e02      	ldr	r6, [sp, #8]
 8002074:	1bae      	subs	r6, r5, r6
 8002076:	42b7      	cmp	r7, r6
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	d138      	bne.n	80020f0 <_dtoa_r+0x6d0>
 800207e:	f7fe f975 	bl	800036c <__adddf3>
 8002082:	4606      	mov	r6, r0
 8002084:	460f      	mov	r7, r1
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4640      	mov	r0, r8
 800208c:	4649      	mov	r1, r9
 800208e:	f7fe fd91 	bl	8000bb4 <__aeabi_dcmplt>
 8002092:	b9c8      	cbnz	r0, 80020c8 <_dtoa_r+0x6a8>
 8002094:	4632      	mov	r2, r6
 8002096:	463b      	mov	r3, r7
 8002098:	4640      	mov	r0, r8
 800209a:	4649      	mov	r1, r9
 800209c:	f7fe fd80 	bl	8000ba0 <__aeabi_dcmpeq>
 80020a0:	b110      	cbz	r0, 80020a8 <_dtoa_r+0x688>
 80020a2:	9b00      	ldr	r3, [sp, #0]
 80020a4:	07db      	lsls	r3, r3, #31
 80020a6:	d40f      	bmi.n	80020c8 <_dtoa_r+0x6a8>
 80020a8:	4651      	mov	r1, sl
 80020aa:	4620      	mov	r0, r4
 80020ac:	f000 fae3 	bl	8002676 <_Bfree>
 80020b0:	2300      	movs	r3, #0
 80020b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80020b4:	702b      	strb	r3, [r5, #0]
 80020b6:	f10b 0301 	add.w	r3, fp, #1
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f43f acf8 	beq.w	8001ab4 <_dtoa_r+0x94>
 80020c4:	601d      	str	r5, [r3, #0]
 80020c6:	e4f5      	b.n	8001ab4 <_dtoa_r+0x94>
 80020c8:	465f      	mov	r7, fp
 80020ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80020ce:	2a39      	cmp	r2, #57	; 0x39
 80020d0:	f105 33ff 	add.w	r3, r5, #4294967295
 80020d4:	d106      	bne.n	80020e4 <_dtoa_r+0x6c4>
 80020d6:	9a02      	ldr	r2, [sp, #8]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <_dtoa_r+0x6cc>
 80020dc:	2330      	movs	r3, #48	; 0x30
 80020de:	7013      	strb	r3, [r2, #0]
 80020e0:	3701      	adds	r7, #1
 80020e2:	4613      	mov	r3, r2
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	3201      	adds	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e78d      	b.n	8002008 <_dtoa_r+0x5e8>
 80020ec:	461d      	mov	r5, r3
 80020ee:	e7ec      	b.n	80020ca <_dtoa_r+0x6aa>
 80020f0:	2200      	movs	r2, #0
 80020f2:	4ba4      	ldr	r3, [pc, #656]	; (8002384 <_dtoa_r+0x964>)
 80020f4:	f7fe faec 	bl	80006d0 <__aeabi_dmul>
 80020f8:	2200      	movs	r2, #0
 80020fa:	2300      	movs	r3, #0
 80020fc:	4606      	mov	r6, r0
 80020fe:	460f      	mov	r7, r1
 8002100:	f7fe fd4e 	bl	8000ba0 <__aeabi_dcmpeq>
 8002104:	2800      	cmp	r0, #0
 8002106:	d09a      	beq.n	800203e <_dtoa_r+0x61e>
 8002108:	e7ce      	b.n	80020a8 <_dtoa_r+0x688>
 800210a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800210c:	2a00      	cmp	r2, #0
 800210e:	f000 80cd 	beq.w	80022ac <_dtoa_r+0x88c>
 8002112:	9a07      	ldr	r2, [sp, #28]
 8002114:	2a01      	cmp	r2, #1
 8002116:	f300 80af 	bgt.w	8002278 <_dtoa_r+0x858>
 800211a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800211c:	2a00      	cmp	r2, #0
 800211e:	f000 80a7 	beq.w	8002270 <_dtoa_r+0x850>
 8002122:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002126:	9e08      	ldr	r6, [sp, #32]
 8002128:	9d05      	ldr	r5, [sp, #20]
 800212a:	9a05      	ldr	r2, [sp, #20]
 800212c:	441a      	add	r2, r3
 800212e:	9205      	str	r2, [sp, #20]
 8002130:	9a06      	ldr	r2, [sp, #24]
 8002132:	2101      	movs	r1, #1
 8002134:	441a      	add	r2, r3
 8002136:	4620      	mov	r0, r4
 8002138:	9206      	str	r2, [sp, #24]
 800213a:	f000 fb3c 	bl	80027b6 <__i2b>
 800213e:	4607      	mov	r7, r0
 8002140:	2d00      	cmp	r5, #0
 8002142:	dd0c      	ble.n	800215e <_dtoa_r+0x73e>
 8002144:	9b06      	ldr	r3, [sp, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	dd09      	ble.n	800215e <_dtoa_r+0x73e>
 800214a:	42ab      	cmp	r3, r5
 800214c:	9a05      	ldr	r2, [sp, #20]
 800214e:	bfa8      	it	ge
 8002150:	462b      	movge	r3, r5
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	9205      	str	r2, [sp, #20]
 8002156:	9a06      	ldr	r2, [sp, #24]
 8002158:	1aed      	subs	r5, r5, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	9306      	str	r3, [sp, #24]
 800215e:	9b08      	ldr	r3, [sp, #32]
 8002160:	b1f3      	cbz	r3, 80021a0 <_dtoa_r+0x780>
 8002162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a5 	beq.w	80022b4 <_dtoa_r+0x894>
 800216a:	2e00      	cmp	r6, #0
 800216c:	dd10      	ble.n	8002190 <_dtoa_r+0x770>
 800216e:	4639      	mov	r1, r7
 8002170:	4632      	mov	r2, r6
 8002172:	4620      	mov	r0, r4
 8002174:	f000 fbb6 	bl	80028e4 <__pow5mult>
 8002178:	4652      	mov	r2, sl
 800217a:	4601      	mov	r1, r0
 800217c:	4607      	mov	r7, r0
 800217e:	4620      	mov	r0, r4
 8002180:	f000 fb22 	bl	80027c8 <__multiply>
 8002184:	4651      	mov	r1, sl
 8002186:	4680      	mov	r8, r0
 8002188:	4620      	mov	r0, r4
 800218a:	f000 fa74 	bl	8002676 <_Bfree>
 800218e:	46c2      	mov	sl, r8
 8002190:	9b08      	ldr	r3, [sp, #32]
 8002192:	1b9a      	subs	r2, r3, r6
 8002194:	d004      	beq.n	80021a0 <_dtoa_r+0x780>
 8002196:	4651      	mov	r1, sl
 8002198:	4620      	mov	r0, r4
 800219a:	f000 fba3 	bl	80028e4 <__pow5mult>
 800219e:	4682      	mov	sl, r0
 80021a0:	2101      	movs	r1, #1
 80021a2:	4620      	mov	r0, r4
 80021a4:	f000 fb07 	bl	80027b6 <__i2b>
 80021a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	4606      	mov	r6, r0
 80021ae:	f340 8083 	ble.w	80022b8 <_dtoa_r+0x898>
 80021b2:	461a      	mov	r2, r3
 80021b4:	4601      	mov	r1, r0
 80021b6:	4620      	mov	r0, r4
 80021b8:	f000 fb94 	bl	80028e4 <__pow5mult>
 80021bc:	9b07      	ldr	r3, [sp, #28]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	4606      	mov	r6, r0
 80021c2:	dd7c      	ble.n	80022be <_dtoa_r+0x89e>
 80021c4:	f04f 0800 	mov.w	r8, #0
 80021c8:	6933      	ldr	r3, [r6, #16]
 80021ca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80021ce:	6918      	ldr	r0, [r3, #16]
 80021d0:	f000 faa3 	bl	800271a <__hi0bits>
 80021d4:	f1c0 0020 	rsb	r0, r0, #32
 80021d8:	9b06      	ldr	r3, [sp, #24]
 80021da:	4418      	add	r0, r3
 80021dc:	f010 001f 	ands.w	r0, r0, #31
 80021e0:	f000 8096 	beq.w	8002310 <_dtoa_r+0x8f0>
 80021e4:	f1c0 0320 	rsb	r3, r0, #32
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	f340 8087 	ble.w	80022fc <_dtoa_r+0x8dc>
 80021ee:	9b05      	ldr	r3, [sp, #20]
 80021f0:	f1c0 001c 	rsb	r0, r0, #28
 80021f4:	4403      	add	r3, r0
 80021f6:	9305      	str	r3, [sp, #20]
 80021f8:	9b06      	ldr	r3, [sp, #24]
 80021fa:	4405      	add	r5, r0
 80021fc:	4403      	add	r3, r0
 80021fe:	9306      	str	r3, [sp, #24]
 8002200:	9b05      	ldr	r3, [sp, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dd05      	ble.n	8002212 <_dtoa_r+0x7f2>
 8002206:	4651      	mov	r1, sl
 8002208:	461a      	mov	r2, r3
 800220a:	4620      	mov	r0, r4
 800220c:	f000 fbb8 	bl	8002980 <__lshift>
 8002210:	4682      	mov	sl, r0
 8002212:	9b06      	ldr	r3, [sp, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	dd05      	ble.n	8002224 <_dtoa_r+0x804>
 8002218:	4631      	mov	r1, r6
 800221a:	461a      	mov	r2, r3
 800221c:	4620      	mov	r0, r4
 800221e:	f000 fbaf 	bl	8002980 <__lshift>
 8002222:	4606      	mov	r6, r0
 8002224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002226:	2b00      	cmp	r3, #0
 8002228:	d074      	beq.n	8002314 <_dtoa_r+0x8f4>
 800222a:	4631      	mov	r1, r6
 800222c:	4650      	mov	r0, sl
 800222e:	f000 fbf8 	bl	8002a22 <__mcmp>
 8002232:	2800      	cmp	r0, #0
 8002234:	da6e      	bge.n	8002314 <_dtoa_r+0x8f4>
 8002236:	2300      	movs	r3, #0
 8002238:	4651      	mov	r1, sl
 800223a:	220a      	movs	r2, #10
 800223c:	4620      	mov	r0, r4
 800223e:	f000 fa31 	bl	80026a4 <__multadd>
 8002242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002244:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002248:	4682      	mov	sl, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 81a8 	beq.w	80025a0 <_dtoa_r+0xb80>
 8002250:	2300      	movs	r3, #0
 8002252:	4639      	mov	r1, r7
 8002254:	220a      	movs	r2, #10
 8002256:	4620      	mov	r0, r4
 8002258:	f000 fa24 	bl	80026a4 <__multadd>
 800225c:	9b04      	ldr	r3, [sp, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	4607      	mov	r7, r0
 8002262:	f300 80c8 	bgt.w	80023f6 <_dtoa_r+0x9d6>
 8002266:	9b07      	ldr	r3, [sp, #28]
 8002268:	2b02      	cmp	r3, #2
 800226a:	f340 80c4 	ble.w	80023f6 <_dtoa_r+0x9d6>
 800226e:	e059      	b.n	8002324 <_dtoa_r+0x904>
 8002270:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002272:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002276:	e756      	b.n	8002126 <_dtoa_r+0x706>
 8002278:	9b03      	ldr	r3, [sp, #12]
 800227a:	1e5e      	subs	r6, r3, #1
 800227c:	9b08      	ldr	r3, [sp, #32]
 800227e:	42b3      	cmp	r3, r6
 8002280:	bfbf      	itttt	lt
 8002282:	9b08      	ldrlt	r3, [sp, #32]
 8002284:	9608      	strlt	r6, [sp, #32]
 8002286:	1af2      	sublt	r2, r6, r3
 8002288:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800228a:	bfb6      	itet	lt
 800228c:	189b      	addlt	r3, r3, r2
 800228e:	1b9e      	subge	r6, r3, r6
 8002290:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8002292:	9b03      	ldr	r3, [sp, #12]
 8002294:	bfb8      	it	lt
 8002296:	2600      	movlt	r6, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	bfb9      	ittee	lt
 800229c:	9b05      	ldrlt	r3, [sp, #20]
 800229e:	9a03      	ldrlt	r2, [sp, #12]
 80022a0:	9d05      	ldrge	r5, [sp, #20]
 80022a2:	9b03      	ldrge	r3, [sp, #12]
 80022a4:	bfbc      	itt	lt
 80022a6:	1a9d      	sublt	r5, r3, r2
 80022a8:	2300      	movlt	r3, #0
 80022aa:	e73e      	b.n	800212a <_dtoa_r+0x70a>
 80022ac:	9e08      	ldr	r6, [sp, #32]
 80022ae:	9d05      	ldr	r5, [sp, #20]
 80022b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80022b2:	e745      	b.n	8002140 <_dtoa_r+0x720>
 80022b4:	9a08      	ldr	r2, [sp, #32]
 80022b6:	e76e      	b.n	8002196 <_dtoa_r+0x776>
 80022b8:	9b07      	ldr	r3, [sp, #28]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	dc19      	bgt.n	80022f2 <_dtoa_r+0x8d2>
 80022be:	9b00      	ldr	r3, [sp, #0]
 80022c0:	b9bb      	cbnz	r3, 80022f2 <_dtoa_r+0x8d2>
 80022c2:	9b01      	ldr	r3, [sp, #4]
 80022c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c8:	b99b      	cbnz	r3, 80022f2 <_dtoa_r+0x8d2>
 80022ca:	9b01      	ldr	r3, [sp, #4]
 80022cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d0:	0d1b      	lsrs	r3, r3, #20
 80022d2:	051b      	lsls	r3, r3, #20
 80022d4:	b183      	cbz	r3, 80022f8 <_dtoa_r+0x8d8>
 80022d6:	9b05      	ldr	r3, [sp, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	9305      	str	r3, [sp, #20]
 80022dc:	9b06      	ldr	r3, [sp, #24]
 80022de:	3301      	adds	r3, #1
 80022e0:	9306      	str	r3, [sp, #24]
 80022e2:	f04f 0801 	mov.w	r8, #1
 80022e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f af6d 	bne.w	80021c8 <_dtoa_r+0x7a8>
 80022ee:	2001      	movs	r0, #1
 80022f0:	e772      	b.n	80021d8 <_dtoa_r+0x7b8>
 80022f2:	f04f 0800 	mov.w	r8, #0
 80022f6:	e7f6      	b.n	80022e6 <_dtoa_r+0x8c6>
 80022f8:	4698      	mov	r8, r3
 80022fa:	e7f4      	b.n	80022e6 <_dtoa_r+0x8c6>
 80022fc:	d080      	beq.n	8002200 <_dtoa_r+0x7e0>
 80022fe:	9a05      	ldr	r2, [sp, #20]
 8002300:	331c      	adds	r3, #28
 8002302:	441a      	add	r2, r3
 8002304:	9205      	str	r2, [sp, #20]
 8002306:	9a06      	ldr	r2, [sp, #24]
 8002308:	441a      	add	r2, r3
 800230a:	441d      	add	r5, r3
 800230c:	4613      	mov	r3, r2
 800230e:	e776      	b.n	80021fe <_dtoa_r+0x7de>
 8002310:	4603      	mov	r3, r0
 8002312:	e7f4      	b.n	80022fe <_dtoa_r+0x8de>
 8002314:	9b03      	ldr	r3, [sp, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	dc36      	bgt.n	8002388 <_dtoa_r+0x968>
 800231a:	9b07      	ldr	r3, [sp, #28]
 800231c:	2b02      	cmp	r3, #2
 800231e:	dd33      	ble.n	8002388 <_dtoa_r+0x968>
 8002320:	9b03      	ldr	r3, [sp, #12]
 8002322:	9304      	str	r3, [sp, #16]
 8002324:	9b04      	ldr	r3, [sp, #16]
 8002326:	b963      	cbnz	r3, 8002342 <_dtoa_r+0x922>
 8002328:	4631      	mov	r1, r6
 800232a:	2205      	movs	r2, #5
 800232c:	4620      	mov	r0, r4
 800232e:	f000 f9b9 	bl	80026a4 <__multadd>
 8002332:	4601      	mov	r1, r0
 8002334:	4606      	mov	r6, r0
 8002336:	4650      	mov	r0, sl
 8002338:	f000 fb73 	bl	8002a22 <__mcmp>
 800233c:	2800      	cmp	r0, #0
 800233e:	f73f adb6 	bgt.w	8001eae <_dtoa_r+0x48e>
 8002342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002344:	9d02      	ldr	r5, [sp, #8]
 8002346:	ea6f 0b03 	mvn.w	fp, r3
 800234a:	2300      	movs	r3, #0
 800234c:	9303      	str	r3, [sp, #12]
 800234e:	4631      	mov	r1, r6
 8002350:	4620      	mov	r0, r4
 8002352:	f000 f990 	bl	8002676 <_Bfree>
 8002356:	2f00      	cmp	r7, #0
 8002358:	f43f aea6 	beq.w	80020a8 <_dtoa_r+0x688>
 800235c:	9b03      	ldr	r3, [sp, #12]
 800235e:	b12b      	cbz	r3, 800236c <_dtoa_r+0x94c>
 8002360:	42bb      	cmp	r3, r7
 8002362:	d003      	beq.n	800236c <_dtoa_r+0x94c>
 8002364:	4619      	mov	r1, r3
 8002366:	4620      	mov	r0, r4
 8002368:	f000 f985 	bl	8002676 <_Bfree>
 800236c:	4639      	mov	r1, r7
 800236e:	4620      	mov	r0, r4
 8002370:	f000 f981 	bl	8002676 <_Bfree>
 8002374:	e698      	b.n	80020a8 <_dtoa_r+0x688>
 8002376:	2600      	movs	r6, #0
 8002378:	4637      	mov	r7, r6
 800237a:	e7e2      	b.n	8002342 <_dtoa_r+0x922>
 800237c:	46bb      	mov	fp, r7
 800237e:	4637      	mov	r7, r6
 8002380:	e595      	b.n	8001eae <_dtoa_r+0x48e>
 8002382:	bf00      	nop
 8002384:	40240000 	.word	0x40240000
 8002388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800238a:	bb93      	cbnz	r3, 80023f2 <_dtoa_r+0x9d2>
 800238c:	9b03      	ldr	r3, [sp, #12]
 800238e:	9304      	str	r3, [sp, #16]
 8002390:	9d02      	ldr	r5, [sp, #8]
 8002392:	4631      	mov	r1, r6
 8002394:	4650      	mov	r0, sl
 8002396:	f7ff fab7 	bl	8001908 <quorem>
 800239a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800239e:	f805 9b01 	strb.w	r9, [r5], #1
 80023a2:	9b02      	ldr	r3, [sp, #8]
 80023a4:	9a04      	ldr	r2, [sp, #16]
 80023a6:	1aeb      	subs	r3, r5, r3
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f300 80dc 	bgt.w	8002566 <_dtoa_r+0xb46>
 80023ae:	9b02      	ldr	r3, [sp, #8]
 80023b0:	2a01      	cmp	r2, #1
 80023b2:	bfac      	ite	ge
 80023b4:	189b      	addge	r3, r3, r2
 80023b6:	3301      	addlt	r3, #1
 80023b8:	4698      	mov	r8, r3
 80023ba:	2300      	movs	r3, #0
 80023bc:	9303      	str	r3, [sp, #12]
 80023be:	4651      	mov	r1, sl
 80023c0:	2201      	movs	r2, #1
 80023c2:	4620      	mov	r0, r4
 80023c4:	f000 fadc 	bl	8002980 <__lshift>
 80023c8:	4631      	mov	r1, r6
 80023ca:	4682      	mov	sl, r0
 80023cc:	f000 fb29 	bl	8002a22 <__mcmp>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	f300 808d 	bgt.w	80024f0 <_dtoa_r+0xad0>
 80023d6:	d103      	bne.n	80023e0 <_dtoa_r+0x9c0>
 80023d8:	f019 0f01 	tst.w	r9, #1
 80023dc:	f040 8088 	bne.w	80024f0 <_dtoa_r+0xad0>
 80023e0:	4645      	mov	r5, r8
 80023e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80023e6:	2b30      	cmp	r3, #48	; 0x30
 80023e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80023ec:	d1af      	bne.n	800234e <_dtoa_r+0x92e>
 80023ee:	4615      	mov	r5, r2
 80023f0:	e7f7      	b.n	80023e2 <_dtoa_r+0x9c2>
 80023f2:	9b03      	ldr	r3, [sp, #12]
 80023f4:	9304      	str	r3, [sp, #16]
 80023f6:	2d00      	cmp	r5, #0
 80023f8:	dd05      	ble.n	8002406 <_dtoa_r+0x9e6>
 80023fa:	4639      	mov	r1, r7
 80023fc:	462a      	mov	r2, r5
 80023fe:	4620      	mov	r0, r4
 8002400:	f000 fabe 	bl	8002980 <__lshift>
 8002404:	4607      	mov	r7, r0
 8002406:	f1b8 0f00 	cmp.w	r8, #0
 800240a:	d04c      	beq.n	80024a6 <_dtoa_r+0xa86>
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4620      	mov	r0, r4
 8002410:	f000 f8fd 	bl	800260e <_Balloc>
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	3202      	adds	r2, #2
 8002418:	4605      	mov	r5, r0
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	f107 010c 	add.w	r1, r7, #12
 8002420:	300c      	adds	r0, #12
 8002422:	f000 f8e9 	bl	80025f8 <memcpy>
 8002426:	2201      	movs	r2, #1
 8002428:	4629      	mov	r1, r5
 800242a:	4620      	mov	r0, r4
 800242c:	f000 faa8 	bl	8002980 <__lshift>
 8002430:	9b00      	ldr	r3, [sp, #0]
 8002432:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8002436:	9703      	str	r7, [sp, #12]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	4607      	mov	r7, r0
 800243e:	9305      	str	r3, [sp, #20]
 8002440:	4631      	mov	r1, r6
 8002442:	4650      	mov	r0, sl
 8002444:	f7ff fa60 	bl	8001908 <quorem>
 8002448:	9903      	ldr	r1, [sp, #12]
 800244a:	4605      	mov	r5, r0
 800244c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002450:	4650      	mov	r0, sl
 8002452:	f000 fae6 	bl	8002a22 <__mcmp>
 8002456:	463a      	mov	r2, r7
 8002458:	9000      	str	r0, [sp, #0]
 800245a:	4631      	mov	r1, r6
 800245c:	4620      	mov	r0, r4
 800245e:	f000 fafa 	bl	8002a56 <__mdiff>
 8002462:	68c3      	ldr	r3, [r0, #12]
 8002464:	4602      	mov	r2, r0
 8002466:	bb03      	cbnz	r3, 80024aa <_dtoa_r+0xa8a>
 8002468:	4601      	mov	r1, r0
 800246a:	9006      	str	r0, [sp, #24]
 800246c:	4650      	mov	r0, sl
 800246e:	f000 fad8 	bl	8002a22 <__mcmp>
 8002472:	9a06      	ldr	r2, [sp, #24]
 8002474:	4603      	mov	r3, r0
 8002476:	4611      	mov	r1, r2
 8002478:	4620      	mov	r0, r4
 800247a:	9306      	str	r3, [sp, #24]
 800247c:	f000 f8fb 	bl	8002676 <_Bfree>
 8002480:	9b06      	ldr	r3, [sp, #24]
 8002482:	b9a3      	cbnz	r3, 80024ae <_dtoa_r+0xa8e>
 8002484:	9a07      	ldr	r2, [sp, #28]
 8002486:	b992      	cbnz	r2, 80024ae <_dtoa_r+0xa8e>
 8002488:	9a05      	ldr	r2, [sp, #20]
 800248a:	b982      	cbnz	r2, 80024ae <_dtoa_r+0xa8e>
 800248c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8002490:	d029      	beq.n	80024e6 <_dtoa_r+0xac6>
 8002492:	9b00      	ldr	r3, [sp, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	dd01      	ble.n	800249c <_dtoa_r+0xa7c>
 8002498:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800249c:	f108 0501 	add.w	r5, r8, #1
 80024a0:	f888 9000 	strb.w	r9, [r8]
 80024a4:	e753      	b.n	800234e <_dtoa_r+0x92e>
 80024a6:	4638      	mov	r0, r7
 80024a8:	e7c2      	b.n	8002430 <_dtoa_r+0xa10>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e7e3      	b.n	8002476 <_dtoa_r+0xa56>
 80024ae:	9a00      	ldr	r2, [sp, #0]
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	db04      	blt.n	80024be <_dtoa_r+0xa9e>
 80024b4:	d125      	bne.n	8002502 <_dtoa_r+0xae2>
 80024b6:	9a07      	ldr	r2, [sp, #28]
 80024b8:	bb1a      	cbnz	r2, 8002502 <_dtoa_r+0xae2>
 80024ba:	9a05      	ldr	r2, [sp, #20]
 80024bc:	bb0a      	cbnz	r2, 8002502 <_dtoa_r+0xae2>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	ddec      	ble.n	800249c <_dtoa_r+0xa7c>
 80024c2:	4651      	mov	r1, sl
 80024c4:	2201      	movs	r2, #1
 80024c6:	4620      	mov	r0, r4
 80024c8:	f000 fa5a 	bl	8002980 <__lshift>
 80024cc:	4631      	mov	r1, r6
 80024ce:	4682      	mov	sl, r0
 80024d0:	f000 faa7 	bl	8002a22 <__mcmp>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	dc03      	bgt.n	80024e0 <_dtoa_r+0xac0>
 80024d8:	d1e0      	bne.n	800249c <_dtoa_r+0xa7c>
 80024da:	f019 0f01 	tst.w	r9, #1
 80024de:	d0dd      	beq.n	800249c <_dtoa_r+0xa7c>
 80024e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80024e4:	d1d8      	bne.n	8002498 <_dtoa_r+0xa78>
 80024e6:	2339      	movs	r3, #57	; 0x39
 80024e8:	f888 3000 	strb.w	r3, [r8]
 80024ec:	f108 0801 	add.w	r8, r8, #1
 80024f0:	4645      	mov	r5, r8
 80024f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80024f6:	2b39      	cmp	r3, #57	; 0x39
 80024f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80024fc:	d03b      	beq.n	8002576 <_dtoa_r+0xb56>
 80024fe:	3301      	adds	r3, #1
 8002500:	e040      	b.n	8002584 <_dtoa_r+0xb64>
 8002502:	2b00      	cmp	r3, #0
 8002504:	f108 0501 	add.w	r5, r8, #1
 8002508:	dd05      	ble.n	8002516 <_dtoa_r+0xaf6>
 800250a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800250e:	d0ea      	beq.n	80024e6 <_dtoa_r+0xac6>
 8002510:	f109 0901 	add.w	r9, r9, #1
 8002514:	e7c4      	b.n	80024a0 <_dtoa_r+0xa80>
 8002516:	9b02      	ldr	r3, [sp, #8]
 8002518:	9a04      	ldr	r2, [sp, #16]
 800251a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800251e:	1aeb      	subs	r3, r5, r3
 8002520:	4293      	cmp	r3, r2
 8002522:	46a8      	mov	r8, r5
 8002524:	f43f af4b 	beq.w	80023be <_dtoa_r+0x99e>
 8002528:	4651      	mov	r1, sl
 800252a:	2300      	movs	r3, #0
 800252c:	220a      	movs	r2, #10
 800252e:	4620      	mov	r0, r4
 8002530:	f000 f8b8 	bl	80026a4 <__multadd>
 8002534:	9b03      	ldr	r3, [sp, #12]
 8002536:	9903      	ldr	r1, [sp, #12]
 8002538:	42bb      	cmp	r3, r7
 800253a:	4682      	mov	sl, r0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f04f 020a 	mov.w	r2, #10
 8002544:	4620      	mov	r0, r4
 8002546:	d104      	bne.n	8002552 <_dtoa_r+0xb32>
 8002548:	f000 f8ac 	bl	80026a4 <__multadd>
 800254c:	9003      	str	r0, [sp, #12]
 800254e:	4607      	mov	r7, r0
 8002550:	e776      	b.n	8002440 <_dtoa_r+0xa20>
 8002552:	f000 f8a7 	bl	80026a4 <__multadd>
 8002556:	2300      	movs	r3, #0
 8002558:	9003      	str	r0, [sp, #12]
 800255a:	220a      	movs	r2, #10
 800255c:	4639      	mov	r1, r7
 800255e:	4620      	mov	r0, r4
 8002560:	f000 f8a0 	bl	80026a4 <__multadd>
 8002564:	e7f3      	b.n	800254e <_dtoa_r+0xb2e>
 8002566:	4651      	mov	r1, sl
 8002568:	2300      	movs	r3, #0
 800256a:	220a      	movs	r2, #10
 800256c:	4620      	mov	r0, r4
 800256e:	f000 f899 	bl	80026a4 <__multadd>
 8002572:	4682      	mov	sl, r0
 8002574:	e70d      	b.n	8002392 <_dtoa_r+0x972>
 8002576:	9b02      	ldr	r3, [sp, #8]
 8002578:	4293      	cmp	r3, r2
 800257a:	d105      	bne.n	8002588 <_dtoa_r+0xb68>
 800257c:	9a02      	ldr	r2, [sp, #8]
 800257e:	f10b 0b01 	add.w	fp, fp, #1
 8002582:	2331      	movs	r3, #49	; 0x31
 8002584:	7013      	strb	r3, [r2, #0]
 8002586:	e6e2      	b.n	800234e <_dtoa_r+0x92e>
 8002588:	4615      	mov	r5, r2
 800258a:	e7b2      	b.n	80024f2 <_dtoa_r+0xad2>
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <_dtoa_r+0xb94>)
 800258e:	f7ff baae 	b.w	8001aee <_dtoa_r+0xce>
 8002592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f aa88 	bne.w	8001aaa <_dtoa_r+0x8a>
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_dtoa_r+0xb98>)
 800259c:	f7ff baa7 	b.w	8001aee <_dtoa_r+0xce>
 80025a0:	9b04      	ldr	r3, [sp, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f73f aef4 	bgt.w	8002390 <_dtoa_r+0x970>
 80025a8:	9b07      	ldr	r3, [sp, #28]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f77f aef0 	ble.w	8002390 <_dtoa_r+0x970>
 80025b0:	e6b8      	b.n	8002324 <_dtoa_r+0x904>
 80025b2:	bf00      	nop
 80025b4:	080156e1 	.word	0x080156e1
 80025b8:	08009bda 	.word	0x08009bda

080025bc <_localeconv_r>:
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <_localeconv_r+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a18      	ldr	r0, [r3, #32]
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <_localeconv_r+0x18>)
 80025c4:	2800      	cmp	r0, #0
 80025c6:	bf08      	it	eq
 80025c8:	4618      	moveq	r0, r3
 80025ca:	30f0      	adds	r0, #240	; 0xf0
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000064 	.word	0x20000064

080025d8 <malloc>:
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <malloc+0xc>)
 80025da:	4601      	mov	r1, r0
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	f000 bb43 	b.w	8002c68 <_malloc_r>
 80025e2:	bf00      	nop
 80025e4:	20000000 	.word	0x20000000

080025e8 <free>:
 80025e8:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <free+0xc>)
 80025ea:	4601      	mov	r1, r0
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	f000 baed 	b.w	8002bcc <_free_r>
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000

080025f8 <memcpy>:
 80025f8:	b510      	push	{r4, lr}
 80025fa:	1e43      	subs	r3, r0, #1
 80025fc:	440a      	add	r2, r1
 80025fe:	4291      	cmp	r1, r2
 8002600:	d100      	bne.n	8002604 <memcpy+0xc>
 8002602:	bd10      	pop	{r4, pc}
 8002604:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002608:	f803 4f01 	strb.w	r4, [r3, #1]!
 800260c:	e7f7      	b.n	80025fe <memcpy+0x6>

0800260e <_Balloc>:
 800260e:	b570      	push	{r4, r5, r6, lr}
 8002610:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002612:	4604      	mov	r4, r0
 8002614:	460e      	mov	r6, r1
 8002616:	b93d      	cbnz	r5, 8002628 <_Balloc+0x1a>
 8002618:	2010      	movs	r0, #16
 800261a:	f7ff ffdd 	bl	80025d8 <malloc>
 800261e:	6260      	str	r0, [r4, #36]	; 0x24
 8002620:	6045      	str	r5, [r0, #4]
 8002622:	6085      	str	r5, [r0, #8]
 8002624:	6005      	str	r5, [r0, #0]
 8002626:	60c5      	str	r5, [r0, #12]
 8002628:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800262a:	68eb      	ldr	r3, [r5, #12]
 800262c:	b183      	cbz	r3, 8002650 <_Balloc+0x42>
 800262e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002636:	b9b8      	cbnz	r0, 8002668 <_Balloc+0x5a>
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f506 	lsl.w	r5, r1, r6
 800263e:	1d6a      	adds	r2, r5, #5
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	4620      	mov	r0, r4
 8002644:	f000 fab4 	bl	8002bb0 <_calloc_r>
 8002648:	b160      	cbz	r0, 8002664 <_Balloc+0x56>
 800264a:	6046      	str	r6, [r0, #4]
 800264c:	6085      	str	r5, [r0, #8]
 800264e:	e00e      	b.n	800266e <_Balloc+0x60>
 8002650:	2221      	movs	r2, #33	; 0x21
 8002652:	2104      	movs	r1, #4
 8002654:	4620      	mov	r0, r4
 8002656:	f000 faab 	bl	8002bb0 <_calloc_r>
 800265a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800265c:	60e8      	str	r0, [r5, #12]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e4      	bne.n	800262e <_Balloc+0x20>
 8002664:	2000      	movs	r0, #0
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	6802      	ldr	r2, [r0, #0]
 800266a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800266e:	2300      	movs	r3, #0
 8002670:	6103      	str	r3, [r0, #16]
 8002672:	60c3      	str	r3, [r0, #12]
 8002674:	bd70      	pop	{r4, r5, r6, pc}

08002676 <_Bfree>:
 8002676:	b570      	push	{r4, r5, r6, lr}
 8002678:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800267a:	4606      	mov	r6, r0
 800267c:	460d      	mov	r5, r1
 800267e:	b93c      	cbnz	r4, 8002690 <_Bfree+0x1a>
 8002680:	2010      	movs	r0, #16
 8002682:	f7ff ffa9 	bl	80025d8 <malloc>
 8002686:	6270      	str	r0, [r6, #36]	; 0x24
 8002688:	6044      	str	r4, [r0, #4]
 800268a:	6084      	str	r4, [r0, #8]
 800268c:	6004      	str	r4, [r0, #0]
 800268e:	60c4      	str	r4, [r0, #12]
 8002690:	b13d      	cbz	r5, 80026a2 <_Bfree+0x2c>
 8002692:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002694:	686a      	ldr	r2, [r5, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800269c:	6029      	str	r1, [r5, #0]
 800269e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80026a2:	bd70      	pop	{r4, r5, r6, pc}

080026a4 <__multadd>:
 80026a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a8:	690d      	ldr	r5, [r1, #16]
 80026aa:	461f      	mov	r7, r3
 80026ac:	4606      	mov	r6, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	f101 0e14 	add.w	lr, r1, #20
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8de 0000 	ldr.w	r0, [lr]
 80026ba:	b281      	uxth	r1, r0
 80026bc:	fb02 7101 	mla	r1, r2, r1, r7
 80026c0:	0c0f      	lsrs	r7, r1, #16
 80026c2:	0c00      	lsrs	r0, r0, #16
 80026c4:	fb02 7000 	mla	r0, r2, r0, r7
 80026c8:	b289      	uxth	r1, r1
 80026ca:	3301      	adds	r3, #1
 80026cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80026d0:	429d      	cmp	r5, r3
 80026d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80026d6:	f84e 1b04 	str.w	r1, [lr], #4
 80026da:	dcec      	bgt.n	80026b6 <__multadd+0x12>
 80026dc:	b1d7      	cbz	r7, 8002714 <__multadd+0x70>
 80026de:	68a3      	ldr	r3, [r4, #8]
 80026e0:	429d      	cmp	r5, r3
 80026e2:	db12      	blt.n	800270a <__multadd+0x66>
 80026e4:	6861      	ldr	r1, [r4, #4]
 80026e6:	4630      	mov	r0, r6
 80026e8:	3101      	adds	r1, #1
 80026ea:	f7ff ff90 	bl	800260e <_Balloc>
 80026ee:	6922      	ldr	r2, [r4, #16]
 80026f0:	3202      	adds	r2, #2
 80026f2:	f104 010c 	add.w	r1, r4, #12
 80026f6:	4680      	mov	r8, r0
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	300c      	adds	r0, #12
 80026fc:	f7ff ff7c 	bl	80025f8 <memcpy>
 8002700:	4621      	mov	r1, r4
 8002702:	4630      	mov	r0, r6
 8002704:	f7ff ffb7 	bl	8002676 <_Bfree>
 8002708:	4644      	mov	r4, r8
 800270a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800270e:	3501      	adds	r5, #1
 8002710:	615f      	str	r7, [r3, #20]
 8002712:	6125      	str	r5, [r4, #16]
 8002714:	4620      	mov	r0, r4
 8002716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800271a <__hi0bits>:
 800271a:	0c02      	lsrs	r2, r0, #16
 800271c:	0412      	lsls	r2, r2, #16
 800271e:	4603      	mov	r3, r0
 8002720:	b9b2      	cbnz	r2, 8002750 <__hi0bits+0x36>
 8002722:	0403      	lsls	r3, r0, #16
 8002724:	2010      	movs	r0, #16
 8002726:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800272a:	bf04      	itt	eq
 800272c:	021b      	lsleq	r3, r3, #8
 800272e:	3008      	addeq	r0, #8
 8002730:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8002734:	bf04      	itt	eq
 8002736:	011b      	lsleq	r3, r3, #4
 8002738:	3004      	addeq	r0, #4
 800273a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800273e:	bf04      	itt	eq
 8002740:	009b      	lsleq	r3, r3, #2
 8002742:	3002      	addeq	r0, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	db06      	blt.n	8002756 <__hi0bits+0x3c>
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	d503      	bpl.n	8002754 <__hi0bits+0x3a>
 800274c:	3001      	adds	r0, #1
 800274e:	4770      	bx	lr
 8002750:	2000      	movs	r0, #0
 8002752:	e7e8      	b.n	8002726 <__hi0bits+0xc>
 8002754:	2020      	movs	r0, #32
 8002756:	4770      	bx	lr

08002758 <__lo0bits>:
 8002758:	6803      	ldr	r3, [r0, #0]
 800275a:	f013 0207 	ands.w	r2, r3, #7
 800275e:	4601      	mov	r1, r0
 8002760:	d00b      	beq.n	800277a <__lo0bits+0x22>
 8002762:	07da      	lsls	r2, r3, #31
 8002764:	d423      	bmi.n	80027ae <__lo0bits+0x56>
 8002766:	0798      	lsls	r0, r3, #30
 8002768:	bf49      	itett	mi
 800276a:	085b      	lsrmi	r3, r3, #1
 800276c:	089b      	lsrpl	r3, r3, #2
 800276e:	2001      	movmi	r0, #1
 8002770:	600b      	strmi	r3, [r1, #0]
 8002772:	bf5c      	itt	pl
 8002774:	600b      	strpl	r3, [r1, #0]
 8002776:	2002      	movpl	r0, #2
 8002778:	4770      	bx	lr
 800277a:	b298      	uxth	r0, r3
 800277c:	b9a8      	cbnz	r0, 80027aa <__lo0bits+0x52>
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	2010      	movs	r0, #16
 8002782:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002786:	bf04      	itt	eq
 8002788:	0a1b      	lsreq	r3, r3, #8
 800278a:	3008      	addeq	r0, #8
 800278c:	071a      	lsls	r2, r3, #28
 800278e:	bf04      	itt	eq
 8002790:	091b      	lsreq	r3, r3, #4
 8002792:	3004      	addeq	r0, #4
 8002794:	079a      	lsls	r2, r3, #30
 8002796:	bf04      	itt	eq
 8002798:	089b      	lsreq	r3, r3, #2
 800279a:	3002      	addeq	r0, #2
 800279c:	07da      	lsls	r2, r3, #31
 800279e:	d402      	bmi.n	80027a6 <__lo0bits+0x4e>
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	d006      	beq.n	80027b2 <__lo0bits+0x5a>
 80027a4:	3001      	adds	r0, #1
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	4770      	bx	lr
 80027aa:	4610      	mov	r0, r2
 80027ac:	e7e9      	b.n	8002782 <__lo0bits+0x2a>
 80027ae:	2000      	movs	r0, #0
 80027b0:	4770      	bx	lr
 80027b2:	2020      	movs	r0, #32
 80027b4:	4770      	bx	lr

080027b6 <__i2b>:
 80027b6:	b510      	push	{r4, lr}
 80027b8:	460c      	mov	r4, r1
 80027ba:	2101      	movs	r1, #1
 80027bc:	f7ff ff27 	bl	800260e <_Balloc>
 80027c0:	2201      	movs	r2, #1
 80027c2:	6144      	str	r4, [r0, #20]
 80027c4:	6102      	str	r2, [r0, #16]
 80027c6:	bd10      	pop	{r4, pc}

080027c8 <__multiply>:
 80027c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	4614      	mov	r4, r2
 80027ce:	690a      	ldr	r2, [r1, #16]
 80027d0:	6923      	ldr	r3, [r4, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	bfb8      	it	lt
 80027d6:	460b      	movlt	r3, r1
 80027d8:	4689      	mov	r9, r1
 80027da:	bfbc      	itt	lt
 80027dc:	46a1      	movlt	r9, r4
 80027de:	461c      	movlt	r4, r3
 80027e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80027e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80027e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80027ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80027f0:	eb07 060a 	add.w	r6, r7, sl
 80027f4:	429e      	cmp	r6, r3
 80027f6:	bfc8      	it	gt
 80027f8:	3101      	addgt	r1, #1
 80027fa:	f7ff ff08 	bl	800260e <_Balloc>
 80027fe:	f100 0514 	add.w	r5, r0, #20
 8002802:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8002806:	462b      	mov	r3, r5
 8002808:	2200      	movs	r2, #0
 800280a:	4543      	cmp	r3, r8
 800280c:	d316      	bcc.n	800283c <__multiply+0x74>
 800280e:	f104 0214 	add.w	r2, r4, #20
 8002812:	f109 0114 	add.w	r1, r9, #20
 8002816:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800281a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9c01      	ldr	r4, [sp, #4]
 8002822:	4294      	cmp	r4, r2
 8002824:	4613      	mov	r3, r2
 8002826:	d80c      	bhi.n	8002842 <__multiply+0x7a>
 8002828:	2e00      	cmp	r6, #0
 800282a:	dd03      	ble.n	8002834 <__multiply+0x6c>
 800282c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8002830:	2b00      	cmp	r3, #0
 8002832:	d054      	beq.n	80028de <__multiply+0x116>
 8002834:	6106      	str	r6, [r0, #16]
 8002836:	b003      	add	sp, #12
 8002838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800283c:	f843 2b04 	str.w	r2, [r3], #4
 8002840:	e7e3      	b.n	800280a <__multiply+0x42>
 8002842:	f8b3 a000 	ldrh.w	sl, [r3]
 8002846:	3204      	adds	r2, #4
 8002848:	f1ba 0f00 	cmp.w	sl, #0
 800284c:	d020      	beq.n	8002890 <__multiply+0xc8>
 800284e:	46ae      	mov	lr, r5
 8002850:	4689      	mov	r9, r1
 8002852:	f04f 0c00 	mov.w	ip, #0
 8002856:	f859 4b04 	ldr.w	r4, [r9], #4
 800285a:	f8be b000 	ldrh.w	fp, [lr]
 800285e:	b2a3      	uxth	r3, r4
 8002860:	fb0a b303 	mla	r3, sl, r3, fp
 8002864:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8002868:	f8de 4000 	ldr.w	r4, [lr]
 800286c:	4463      	add	r3, ip
 800286e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002872:	fb0a c40b 	mla	r4, sl, fp, ip
 8002876:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800287a:	b29b      	uxth	r3, r3
 800287c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002880:	454f      	cmp	r7, r9
 8002882:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002886:	f84e 3b04 	str.w	r3, [lr], #4
 800288a:	d8e4      	bhi.n	8002856 <__multiply+0x8e>
 800288c:	f8ce c000 	str.w	ip, [lr]
 8002890:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8002894:	f1b9 0f00 	cmp.w	r9, #0
 8002898:	d01f      	beq.n	80028da <__multiply+0x112>
 800289a:	682b      	ldr	r3, [r5, #0]
 800289c:	46ae      	mov	lr, r5
 800289e:	468c      	mov	ip, r1
 80028a0:	f04f 0a00 	mov.w	sl, #0
 80028a4:	f8bc 4000 	ldrh.w	r4, [ip]
 80028a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80028ac:	fb09 b404 	mla	r4, r9, r4, fp
 80028b0:	44a2      	add	sl, r4
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80028b8:	f84e 3b04 	str.w	r3, [lr], #4
 80028bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80028c0:	f8be 4000 	ldrh.w	r4, [lr]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	fb09 4303 	mla	r3, r9, r3, r4
 80028ca:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80028ce:	4567      	cmp	r7, ip
 80028d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80028d4:	d8e6      	bhi.n	80028a4 <__multiply+0xdc>
 80028d6:	f8ce 3000 	str.w	r3, [lr]
 80028da:	3504      	adds	r5, #4
 80028dc:	e7a0      	b.n	8002820 <__multiply+0x58>
 80028de:	3e01      	subs	r6, #1
 80028e0:	e7a2      	b.n	8002828 <__multiply+0x60>
	...

080028e4 <__pow5mult>:
 80028e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028e8:	4615      	mov	r5, r2
 80028ea:	f012 0203 	ands.w	r2, r2, #3
 80028ee:	4606      	mov	r6, r0
 80028f0:	460f      	mov	r7, r1
 80028f2:	d007      	beq.n	8002904 <__pow5mult+0x20>
 80028f4:	3a01      	subs	r2, #1
 80028f6:	4c21      	ldr	r4, [pc, #132]	; (800297c <__pow5mult+0x98>)
 80028f8:	2300      	movs	r3, #0
 80028fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80028fe:	f7ff fed1 	bl	80026a4 <__multadd>
 8002902:	4607      	mov	r7, r0
 8002904:	10ad      	asrs	r5, r5, #2
 8002906:	d035      	beq.n	8002974 <__pow5mult+0x90>
 8002908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800290a:	b93c      	cbnz	r4, 800291c <__pow5mult+0x38>
 800290c:	2010      	movs	r0, #16
 800290e:	f7ff fe63 	bl	80025d8 <malloc>
 8002912:	6270      	str	r0, [r6, #36]	; 0x24
 8002914:	6044      	str	r4, [r0, #4]
 8002916:	6084      	str	r4, [r0, #8]
 8002918:	6004      	str	r4, [r0, #0]
 800291a:	60c4      	str	r4, [r0, #12]
 800291c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8002920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8002924:	b94c      	cbnz	r4, 800293a <__pow5mult+0x56>
 8002926:	f240 2171 	movw	r1, #625	; 0x271
 800292a:	4630      	mov	r0, r6
 800292c:	f7ff ff43 	bl	80027b6 <__i2b>
 8002930:	2300      	movs	r3, #0
 8002932:	f8c8 0008 	str.w	r0, [r8, #8]
 8002936:	4604      	mov	r4, r0
 8002938:	6003      	str	r3, [r0, #0]
 800293a:	f04f 0800 	mov.w	r8, #0
 800293e:	07eb      	lsls	r3, r5, #31
 8002940:	d50a      	bpl.n	8002958 <__pow5mult+0x74>
 8002942:	4639      	mov	r1, r7
 8002944:	4622      	mov	r2, r4
 8002946:	4630      	mov	r0, r6
 8002948:	f7ff ff3e 	bl	80027c8 <__multiply>
 800294c:	4639      	mov	r1, r7
 800294e:	4681      	mov	r9, r0
 8002950:	4630      	mov	r0, r6
 8002952:	f7ff fe90 	bl	8002676 <_Bfree>
 8002956:	464f      	mov	r7, r9
 8002958:	106d      	asrs	r5, r5, #1
 800295a:	d00b      	beq.n	8002974 <__pow5mult+0x90>
 800295c:	6820      	ldr	r0, [r4, #0]
 800295e:	b938      	cbnz	r0, 8002970 <__pow5mult+0x8c>
 8002960:	4622      	mov	r2, r4
 8002962:	4621      	mov	r1, r4
 8002964:	4630      	mov	r0, r6
 8002966:	f7ff ff2f 	bl	80027c8 <__multiply>
 800296a:	6020      	str	r0, [r4, #0]
 800296c:	f8c0 8000 	str.w	r8, [r0]
 8002970:	4604      	mov	r4, r0
 8002972:	e7e4      	b.n	800293e <__pow5mult+0x5a>
 8002974:	4638      	mov	r0, r7
 8002976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800297a:	bf00      	nop
 800297c:	08009cd8 	.word	0x08009cd8

08002980 <__lshift>:
 8002980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002984:	460c      	mov	r4, r1
 8002986:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800298a:	6923      	ldr	r3, [r4, #16]
 800298c:	6849      	ldr	r1, [r1, #4]
 800298e:	eb0a 0903 	add.w	r9, sl, r3
 8002992:	68a3      	ldr	r3, [r4, #8]
 8002994:	4607      	mov	r7, r0
 8002996:	4616      	mov	r6, r2
 8002998:	f109 0501 	add.w	r5, r9, #1
 800299c:	42ab      	cmp	r3, r5
 800299e:	db31      	blt.n	8002a04 <__lshift+0x84>
 80029a0:	4638      	mov	r0, r7
 80029a2:	f7ff fe34 	bl	800260e <_Balloc>
 80029a6:	2200      	movs	r2, #0
 80029a8:	4680      	mov	r8, r0
 80029aa:	f100 0314 	add.w	r3, r0, #20
 80029ae:	4611      	mov	r1, r2
 80029b0:	4552      	cmp	r2, sl
 80029b2:	db2a      	blt.n	8002a0a <__lshift+0x8a>
 80029b4:	6920      	ldr	r0, [r4, #16]
 80029b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80029ba:	f104 0114 	add.w	r1, r4, #20
 80029be:	f016 021f 	ands.w	r2, r6, #31
 80029c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80029c6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80029ca:	d022      	beq.n	8002a12 <__lshift+0x92>
 80029cc:	f1c2 0c20 	rsb	ip, r2, #32
 80029d0:	2000      	movs	r0, #0
 80029d2:	680e      	ldr	r6, [r1, #0]
 80029d4:	4096      	lsls	r6, r2
 80029d6:	4330      	orrs	r0, r6
 80029d8:	f843 0b04 	str.w	r0, [r3], #4
 80029dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80029e0:	458e      	cmp	lr, r1
 80029e2:	fa20 f00c 	lsr.w	r0, r0, ip
 80029e6:	d8f4      	bhi.n	80029d2 <__lshift+0x52>
 80029e8:	6018      	str	r0, [r3, #0]
 80029ea:	b108      	cbz	r0, 80029f0 <__lshift+0x70>
 80029ec:	f109 0502 	add.w	r5, r9, #2
 80029f0:	3d01      	subs	r5, #1
 80029f2:	4638      	mov	r0, r7
 80029f4:	f8c8 5010 	str.w	r5, [r8, #16]
 80029f8:	4621      	mov	r1, r4
 80029fa:	f7ff fe3c 	bl	8002676 <_Bfree>
 80029fe:	4640      	mov	r0, r8
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	3101      	adds	r1, #1
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	e7c8      	b.n	800299c <__lshift+0x1c>
 8002a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002a0e:	3201      	adds	r2, #1
 8002a10:	e7ce      	b.n	80029b0 <__lshift+0x30>
 8002a12:	3b04      	subs	r3, #4
 8002a14:	f851 2b04 	ldr.w	r2, [r1], #4
 8002a18:	f843 2f04 	str.w	r2, [r3, #4]!
 8002a1c:	458e      	cmp	lr, r1
 8002a1e:	d8f9      	bhi.n	8002a14 <__lshift+0x94>
 8002a20:	e7e6      	b.n	80029f0 <__lshift+0x70>

08002a22 <__mcmp>:
 8002a22:	6903      	ldr	r3, [r0, #16]
 8002a24:	690a      	ldr	r2, [r1, #16]
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	b530      	push	{r4, r5, lr}
 8002a2a:	d10c      	bne.n	8002a46 <__mcmp+0x24>
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	3014      	adds	r0, #20
 8002a30:	3114      	adds	r1, #20
 8002a32:	1884      	adds	r4, r0, r2
 8002a34:	4411      	add	r1, r2
 8002a36:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8002a3a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8002a3e:	4295      	cmp	r5, r2
 8002a40:	d003      	beq.n	8002a4a <__mcmp+0x28>
 8002a42:	d305      	bcc.n	8002a50 <__mcmp+0x2e>
 8002a44:	2301      	movs	r3, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd30      	pop	{r4, r5, pc}
 8002a4a:	42a0      	cmp	r0, r4
 8002a4c:	d3f3      	bcc.n	8002a36 <__mcmp+0x14>
 8002a4e:	e7fa      	b.n	8002a46 <__mcmp+0x24>
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	e7f7      	b.n	8002a46 <__mcmp+0x24>

08002a56 <__mdiff>:
 8002a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	4607      	mov	r7, r0
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4628      	mov	r0, r5
 8002a62:	4614      	mov	r4, r2
 8002a64:	f7ff ffdd 	bl	8002a22 <__mcmp>
 8002a68:	1e06      	subs	r6, r0, #0
 8002a6a:	d108      	bne.n	8002a7e <__mdiff+0x28>
 8002a6c:	4631      	mov	r1, r6
 8002a6e:	4638      	mov	r0, r7
 8002a70:	f7ff fdcd 	bl	800260e <_Balloc>
 8002a74:	2301      	movs	r3, #1
 8002a76:	6103      	str	r3, [r0, #16]
 8002a78:	6146      	str	r6, [r0, #20]
 8002a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7e:	bfa4      	itt	ge
 8002a80:	4623      	movge	r3, r4
 8002a82:	462c      	movge	r4, r5
 8002a84:	4638      	mov	r0, r7
 8002a86:	6861      	ldr	r1, [r4, #4]
 8002a88:	bfa6      	itte	ge
 8002a8a:	461d      	movge	r5, r3
 8002a8c:	2600      	movge	r6, #0
 8002a8e:	2601      	movlt	r6, #1
 8002a90:	f7ff fdbd 	bl	800260e <_Balloc>
 8002a94:	692b      	ldr	r3, [r5, #16]
 8002a96:	60c6      	str	r6, [r0, #12]
 8002a98:	6926      	ldr	r6, [r4, #16]
 8002a9a:	f105 0914 	add.w	r9, r5, #20
 8002a9e:	f104 0214 	add.w	r2, r4, #20
 8002aa2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8002aa6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8002aaa:	f100 0514 	add.w	r5, r0, #20
 8002aae:	f04f 0c00 	mov.w	ip, #0
 8002ab2:	f852 ab04 	ldr.w	sl, [r2], #4
 8002ab6:	f859 4b04 	ldr.w	r4, [r9], #4
 8002aba:	fa1c f18a 	uxtah	r1, ip, sl
 8002abe:	b2a3      	uxth	r3, r4
 8002ac0:	1ac9      	subs	r1, r1, r3
 8002ac2:	0c23      	lsrs	r3, r4, #16
 8002ac4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8002ac8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8002acc:	b289      	uxth	r1, r1
 8002ace:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8002ad2:	45c8      	cmp	r8, r9
 8002ad4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002ad8:	4696      	mov	lr, r2
 8002ada:	f845 3b04 	str.w	r3, [r5], #4
 8002ade:	d8e8      	bhi.n	8002ab2 <__mdiff+0x5c>
 8002ae0:	45be      	cmp	lr, r7
 8002ae2:	d305      	bcc.n	8002af0 <__mdiff+0x9a>
 8002ae4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8002ae8:	b18b      	cbz	r3, 8002b0e <__mdiff+0xb8>
 8002aea:	6106      	str	r6, [r0, #16]
 8002aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af0:	f85e 1b04 	ldr.w	r1, [lr], #4
 8002af4:	fa1c f381 	uxtah	r3, ip, r1
 8002af8:	141a      	asrs	r2, r3, #16
 8002afa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002b08:	f845 3b04 	str.w	r3, [r5], #4
 8002b0c:	e7e8      	b.n	8002ae0 <__mdiff+0x8a>
 8002b0e:	3e01      	subs	r6, #1
 8002b10:	e7e8      	b.n	8002ae4 <__mdiff+0x8e>

08002b12 <__d2b>:
 8002b12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b16:	460e      	mov	r6, r1
 8002b18:	2101      	movs	r1, #1
 8002b1a:	ec59 8b10 	vmov	r8, r9, d0
 8002b1e:	4615      	mov	r5, r2
 8002b20:	f7ff fd75 	bl	800260e <_Balloc>
 8002b24:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002b28:	4607      	mov	r7, r0
 8002b2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002b2e:	bb34      	cbnz	r4, 8002b7e <__d2b+0x6c>
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	f1b8 0f00 	cmp.w	r8, #0
 8002b36:	d027      	beq.n	8002b88 <__d2b+0x76>
 8002b38:	a802      	add	r0, sp, #8
 8002b3a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8002b3e:	f7ff fe0b 	bl	8002758 <__lo0bits>
 8002b42:	9900      	ldr	r1, [sp, #0]
 8002b44:	b1f0      	cbz	r0, 8002b84 <__d2b+0x72>
 8002b46:	9a01      	ldr	r2, [sp, #4]
 8002b48:	f1c0 0320 	rsb	r3, r0, #32
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	430b      	orrs	r3, r1
 8002b52:	40c2      	lsrs	r2, r0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	9201      	str	r2, [sp, #4]
 8002b58:	9b01      	ldr	r3, [sp, #4]
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf14      	ite	ne
 8002b60:	2102      	movne	r1, #2
 8002b62:	2101      	moveq	r1, #1
 8002b64:	6139      	str	r1, [r7, #16]
 8002b66:	b1c4      	cbz	r4, 8002b9a <__d2b+0x88>
 8002b68:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8002b6c:	4404      	add	r4, r0
 8002b6e:	6034      	str	r4, [r6, #0]
 8002b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8002b74:	6028      	str	r0, [r5, #0]
 8002b76:	4638      	mov	r0, r7
 8002b78:	b003      	add	sp, #12
 8002b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b82:	e7d5      	b.n	8002b30 <__d2b+0x1e>
 8002b84:	6179      	str	r1, [r7, #20]
 8002b86:	e7e7      	b.n	8002b58 <__d2b+0x46>
 8002b88:	a801      	add	r0, sp, #4
 8002b8a:	f7ff fde5 	bl	8002758 <__lo0bits>
 8002b8e:	9b01      	ldr	r3, [sp, #4]
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	2101      	movs	r1, #1
 8002b94:	6139      	str	r1, [r7, #16]
 8002b96:	3020      	adds	r0, #32
 8002b98:	e7e5      	b.n	8002b66 <__d2b+0x54>
 8002b9a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8002b9e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8002ba2:	6030      	str	r0, [r6, #0]
 8002ba4:	6918      	ldr	r0, [r3, #16]
 8002ba6:	f7ff fdb8 	bl	800271a <__hi0bits>
 8002baa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8002bae:	e7e1      	b.n	8002b74 <__d2b+0x62>

08002bb0 <_calloc_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	fb02 f401 	mul.w	r4, r2, r1
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	f000 f856 	bl	8002c68 <_malloc_r>
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	b118      	cbz	r0, 8002bc8 <_calloc_r+0x18>
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	f000 f8d0 	bl	8002d68 <memset>
 8002bc8:	4628      	mov	r0, r5
 8002bca:	bd38      	pop	{r3, r4, r5, pc}

08002bcc <_free_r>:
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4605      	mov	r5, r0
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d045      	beq.n	8002c60 <_free_r+0x94>
 8002bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bd8:	1f0c      	subs	r4, r1, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bfb8      	it	lt
 8002bde:	18e4      	addlt	r4, r4, r3
 8002be0:	f000 f8ca 	bl	8002d78 <__malloc_lock>
 8002be4:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <_free_r+0x98>)
 8002be6:	6813      	ldr	r3, [r2, #0]
 8002be8:	4610      	mov	r0, r2
 8002bea:	b933      	cbnz	r3, 8002bfa <_free_r+0x2e>
 8002bec:	6063      	str	r3, [r4, #4]
 8002bee:	6014      	str	r4, [r2, #0]
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bf6:	f000 b8c0 	b.w	8002d7a <__malloc_unlock>
 8002bfa:	42a3      	cmp	r3, r4
 8002bfc:	d90c      	bls.n	8002c18 <_free_r+0x4c>
 8002bfe:	6821      	ldr	r1, [r4, #0]
 8002c00:	1862      	adds	r2, r4, r1
 8002c02:	4293      	cmp	r3, r2
 8002c04:	bf04      	itt	eq
 8002c06:	681a      	ldreq	r2, [r3, #0]
 8002c08:	685b      	ldreq	r3, [r3, #4]
 8002c0a:	6063      	str	r3, [r4, #4]
 8002c0c:	bf04      	itt	eq
 8002c0e:	1852      	addeq	r2, r2, r1
 8002c10:	6022      	streq	r2, [r4, #0]
 8002c12:	6004      	str	r4, [r0, #0]
 8002c14:	e7ec      	b.n	8002bf0 <_free_r+0x24>
 8002c16:	4613      	mov	r3, r2
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	b10a      	cbz	r2, 8002c20 <_free_r+0x54>
 8002c1c:	42a2      	cmp	r2, r4
 8002c1e:	d9fa      	bls.n	8002c16 <_free_r+0x4a>
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	1858      	adds	r0, r3, r1
 8002c24:	42a0      	cmp	r0, r4
 8002c26:	d10b      	bne.n	8002c40 <_free_r+0x74>
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	4401      	add	r1, r0
 8002c2c:	1858      	adds	r0, r3, r1
 8002c2e:	4282      	cmp	r2, r0
 8002c30:	6019      	str	r1, [r3, #0]
 8002c32:	d1dd      	bne.n	8002bf0 <_free_r+0x24>
 8002c34:	6810      	ldr	r0, [r2, #0]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	4401      	add	r1, r0
 8002c3c:	6019      	str	r1, [r3, #0]
 8002c3e:	e7d7      	b.n	8002bf0 <_free_r+0x24>
 8002c40:	d902      	bls.n	8002c48 <_free_r+0x7c>
 8002c42:	230c      	movs	r3, #12
 8002c44:	602b      	str	r3, [r5, #0]
 8002c46:	e7d3      	b.n	8002bf0 <_free_r+0x24>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	1821      	adds	r1, r4, r0
 8002c4c:	428a      	cmp	r2, r1
 8002c4e:	bf04      	itt	eq
 8002c50:	6811      	ldreq	r1, [r2, #0]
 8002c52:	6852      	ldreq	r2, [r2, #4]
 8002c54:	6062      	str	r2, [r4, #4]
 8002c56:	bf04      	itt	eq
 8002c58:	1809      	addeq	r1, r1, r0
 8002c5a:	6021      	streq	r1, [r4, #0]
 8002c5c:	605c      	str	r4, [r3, #4]
 8002c5e:	e7c7      	b.n	8002bf0 <_free_r+0x24>
 8002c60:	bd38      	pop	{r3, r4, r5, pc}
 8002c62:	bf00      	nop
 8002c64:	200085bc 	.word	0x200085bc

08002c68 <_malloc_r>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	1ccd      	adds	r5, r1, #3
 8002c6c:	f025 0503 	bic.w	r5, r5, #3
 8002c70:	3508      	adds	r5, #8
 8002c72:	2d0c      	cmp	r5, #12
 8002c74:	bf38      	it	cc
 8002c76:	250c      	movcc	r5, #12
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	4606      	mov	r6, r0
 8002c7c:	db01      	blt.n	8002c82 <_malloc_r+0x1a>
 8002c7e:	42a9      	cmp	r1, r5
 8002c80:	d903      	bls.n	8002c8a <_malloc_r+0x22>
 8002c82:	230c      	movs	r3, #12
 8002c84:	6033      	str	r3, [r6, #0]
 8002c86:	2000      	movs	r0, #0
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	f000 f875 	bl	8002d78 <__malloc_lock>
 8002c8e:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <_malloc_r+0xb4>)
 8002c90:	6814      	ldr	r4, [r2, #0]
 8002c92:	4621      	mov	r1, r4
 8002c94:	b991      	cbnz	r1, 8002cbc <_malloc_r+0x54>
 8002c96:	4c22      	ldr	r4, [pc, #136]	; (8002d20 <_malloc_r+0xb8>)
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	b91b      	cbnz	r3, 8002ca4 <_malloc_r+0x3c>
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f000 f841 	bl	8002d24 <_sbrk_r>
 8002ca2:	6020      	str	r0, [r4, #0]
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f000 f83c 	bl	8002d24 <_sbrk_r>
 8002cac:	1c43      	adds	r3, r0, #1
 8002cae:	d126      	bne.n	8002cfe <_malloc_r+0x96>
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	6033      	str	r3, [r6, #0]
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f000 f860 	bl	8002d7a <__malloc_unlock>
 8002cba:	e7e4      	b.n	8002c86 <_malloc_r+0x1e>
 8002cbc:	680b      	ldr	r3, [r1, #0]
 8002cbe:	1b5b      	subs	r3, r3, r5
 8002cc0:	d41a      	bmi.n	8002cf8 <_malloc_r+0x90>
 8002cc2:	2b0b      	cmp	r3, #11
 8002cc4:	d90f      	bls.n	8002ce6 <_malloc_r+0x7e>
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	50cd      	str	r5, [r1, r3]
 8002cca:	18cc      	adds	r4, r1, r3
 8002ccc:	4630      	mov	r0, r6
 8002cce:	f000 f854 	bl	8002d7a <__malloc_unlock>
 8002cd2:	f104 000b 	add.w	r0, r4, #11
 8002cd6:	1d23      	adds	r3, r4, #4
 8002cd8:	f020 0007 	bic.w	r0, r0, #7
 8002cdc:	1ac3      	subs	r3, r0, r3
 8002cde:	d01b      	beq.n	8002d18 <_malloc_r+0xb0>
 8002ce0:	425a      	negs	r2, r3
 8002ce2:	50e2      	str	r2, [r4, r3]
 8002ce4:	bd70      	pop	{r4, r5, r6, pc}
 8002ce6:	428c      	cmp	r4, r1
 8002ce8:	bf0d      	iteet	eq
 8002cea:	6863      	ldreq	r3, [r4, #4]
 8002cec:	684b      	ldrne	r3, [r1, #4]
 8002cee:	6063      	strne	r3, [r4, #4]
 8002cf0:	6013      	streq	r3, [r2, #0]
 8002cf2:	bf18      	it	ne
 8002cf4:	460c      	movne	r4, r1
 8002cf6:	e7e9      	b.n	8002ccc <_malloc_r+0x64>
 8002cf8:	460c      	mov	r4, r1
 8002cfa:	6849      	ldr	r1, [r1, #4]
 8002cfc:	e7ca      	b.n	8002c94 <_malloc_r+0x2c>
 8002cfe:	1cc4      	adds	r4, r0, #3
 8002d00:	f024 0403 	bic.w	r4, r4, #3
 8002d04:	42a0      	cmp	r0, r4
 8002d06:	d005      	beq.n	8002d14 <_malloc_r+0xac>
 8002d08:	1a21      	subs	r1, r4, r0
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f000 f80a 	bl	8002d24 <_sbrk_r>
 8002d10:	3001      	adds	r0, #1
 8002d12:	d0cd      	beq.n	8002cb0 <_malloc_r+0x48>
 8002d14:	6025      	str	r5, [r4, #0]
 8002d16:	e7d9      	b.n	8002ccc <_malloc_r+0x64>
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200085bc 	.word	0x200085bc
 8002d20:	200085c0 	.word	0x200085c0

08002d24 <_sbrk_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4c06      	ldr	r4, [pc, #24]	; (8002d40 <_sbrk_r+0x1c>)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	6023      	str	r3, [r4, #0]
 8002d30:	f000 f832 	bl	8002d98 <_sbrk>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_sbrk_r+0x1a>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_sbrk_r+0x1a>
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	2000860c 	.word	0x2000860c

08002d44 <__ascii_mbtowc>:
 8002d44:	b082      	sub	sp, #8
 8002d46:	b901      	cbnz	r1, 8002d4a <__ascii_mbtowc+0x6>
 8002d48:	a901      	add	r1, sp, #4
 8002d4a:	b142      	cbz	r2, 8002d5e <__ascii_mbtowc+0x1a>
 8002d4c:	b14b      	cbz	r3, 8002d62 <__ascii_mbtowc+0x1e>
 8002d4e:	7813      	ldrb	r3, [r2, #0]
 8002d50:	600b      	str	r3, [r1, #0]
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	1c10      	adds	r0, r2, #0
 8002d56:	bf18      	it	ne
 8002d58:	2001      	movne	r0, #1
 8002d5a:	b002      	add	sp, #8
 8002d5c:	4770      	bx	lr
 8002d5e:	4610      	mov	r0, r2
 8002d60:	e7fb      	b.n	8002d5a <__ascii_mbtowc+0x16>
 8002d62:	f06f 0001 	mvn.w	r0, #1
 8002d66:	e7f8      	b.n	8002d5a <__ascii_mbtowc+0x16>

08002d68 <memset>:
 8002d68:	4402      	add	r2, r0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d100      	bne.n	8002d72 <memset+0xa>
 8002d70:	4770      	bx	lr
 8002d72:	f803 1b01 	strb.w	r1, [r3], #1
 8002d76:	e7f9      	b.n	8002d6c <memset+0x4>

08002d78 <__malloc_lock>:
 8002d78:	4770      	bx	lr

08002d7a <__malloc_unlock>:
 8002d7a:	4770      	bx	lr

08002d7c <__ascii_wctomb>:
 8002d7c:	b149      	cbz	r1, 8002d92 <__ascii_wctomb+0x16>
 8002d7e:	2aff      	cmp	r2, #255	; 0xff
 8002d80:	bf85      	ittet	hi
 8002d82:	238a      	movhi	r3, #138	; 0x8a
 8002d84:	6003      	strhi	r3, [r0, #0]
 8002d86:	700a      	strbls	r2, [r1, #0]
 8002d88:	f04f 30ff 	movhi.w	r0, #4294967295
 8002d8c:	bf98      	it	ls
 8002d8e:	2001      	movls	r0, #1
 8002d90:	4770      	bx	lr
 8002d92:	4608      	mov	r0, r1
 8002d94:	4770      	bx	lr
	...

08002d98 <_sbrk>:
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <_sbrk+0x38>)
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	b510      	push	{r4, lr}
 8002d9e:	4602      	mov	r2, r0
 8002da0:	b909      	cbnz	r1, 8002da6 <_sbrk+0xe>
 8002da2:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <_sbrk+0x3c>)
 8002da4:	6019      	str	r1, [r3, #0]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	4669      	mov	r1, sp
 8002daa:	4402      	add	r2, r0
 8002dac:	428a      	cmp	r2, r1
 8002dae:	d806      	bhi.n	8002dbe <_sbrk+0x26>
 8002db0:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <_sbrk+0x40>)
 8002db2:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <_sbrk+0x44>)
 8002db4:	6809      	ldr	r1, [r1, #0]
 8002db6:	42a1      	cmp	r1, r4
 8002db8:	d008      	beq.n	8002dcc <_sbrk+0x34>
 8002dba:	428a      	cmp	r2, r1
 8002dbc:	d906      	bls.n	8002dcc <_sbrk+0x34>
 8002dbe:	f005 ff95 	bl	8008cec <__errno>
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	6003      	str	r3, [r0, #0]
 8002dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dca:	bd10      	pop	{r4, pc}
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	bd10      	pop	{r4, pc}
 8002dd0:	200085c4 	.word	0x200085c4
 8002dd4:	20008fb8 	.word	0x20008fb8
 8002dd8:	200001d0 	.word	0x200001d0
 8002ddc:	cafedead 	.word	0xcafedead

08002de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_InitTick+0x24>)
{
 8002de4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dec:	fbb0 f0f3 	udiv	r0, r0, r3
 8002df0:	f000 faa2 	bl	8003338 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	4621      	mov	r1, r4
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f000 fa5c 	bl	80032b8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8002e00:	2000      	movs	r0, #0
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	20008598 	.word	0x20008598

08002e08 <HAL_Init>:
{
 8002e08:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_Init+0x30>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f000 fa35 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7ff ffd8 	bl	8002de0 <HAL_InitTick>
  HAL_MspInit();
 8002e30:	f005 fd15 	bl	800885e <HAL_MspInit>
}
 8002e34:	2000      	movs	r0, #0
 8002e36:	bd08      	pop	{r3, pc}
 8002e38:	40023c00 	.word	0x40023c00

08002e3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002e3c:	4a02      	ldr	r2, [pc, #8]	; (8002e48 <HAL_IncTick+0xc>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20008610 	.word	0x20008610

08002e4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e4c:	4b01      	ldr	r3, [pc, #4]	; (8002e54 <HAL_GetTick+0x8>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20008610 	.word	0x20008610

08002e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e5a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff fff6 	bl	8002e4c <HAL_GetTick>
  uint32_t wait = Delay;
 8002e60:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e62:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002e64:	4605      	mov	r5, r0
  {
     wait++;
 8002e66:	bf18      	it	ne
 8002e68:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e6a:	f7ff ffef 	bl	8002e4c <HAL_GetTick>
 8002e6e:	1b40      	subs	r0, r0, r5
 8002e70:	42a0      	cmp	r0, r4
 8002e72:	d3fa      	bcc.n	8002e6a <HAL_Delay+0x12>
  {
  }
}
 8002e74:	b003      	add	sp, #12
 8002e76:	bd30      	pop	{r4, r5, pc}

08002e78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e78:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	f000 8099 	beq.w	8002fb4 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e84:	b923      	cbnz	r3, 8002e90 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e86:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8c:	f005 fd18 	bl	80088c0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e92:	06db      	lsls	r3, r3, #27
 8002e94:	f100 808c 	bmi.w	8002fb0 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e9e:	f023 0302 	bic.w	r3, r3, #2
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ea8:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_ADC_Init+0x140>)
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002eb0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	6861      	ldr	r1, [r4, #4]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eba:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ebc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ecc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ece:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ed0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ed2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ed6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ede:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ee0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eee:	4933      	ldr	r1, [pc, #204]	; (8002fbc <HAL_ADC_Init+0x144>)
 8002ef0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ef2:	428a      	cmp	r2, r1
 8002ef4:	d050      	beq.n	8002f98 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002efc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f04:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f12:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f14:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8002f16:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f18:	f022 0202 	bic.w	r2, r2, #2
 8002f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002f24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f26:	6a22      	ldr	r2, [r4, #32]
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d03d      	beq.n	8002fa8 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f2c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f34:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f3c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	3901      	subs	r1, #1
 8002f42:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f4a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	3901      	subs	r1, #1
 8002f56:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f5c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002f5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002f6c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f6e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f70:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f78:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f7c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002f80:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002f82:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002f90:	2300      	movs	r3, #0
 8002f92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8002f96:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fa6:	e7b4      	b.n	8002f12 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fae:	e7ca      	b.n	8002f46 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	e7ed      	b.n	8002f90 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8002fb4:	2001      	movs	r0, #1
}
 8002fb6:	bd10      	pop	{r4, pc}
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	0f000001 	.word	0x0f000001

08002fc0 <HAL_ADC_Start>:
{
 8002fc0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002fc6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d04e      	beq.n	800306c <HAL_ADC_Start+0xac>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fd4:	6803      	ldr	r3, [r0, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	07d1      	lsls	r1, r2, #31
 8002fda:	d505      	bpl.n	8002fe8 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	07d2      	lsls	r2, r2, #31
 8002fe0:	d414      	bmi.n	800300c <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8002fe2:	2000      	movs	r0, #0
}
 8002fe4:	b002      	add	sp, #8
 8002fe6:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8002fe8:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fea:	4921      	ldr	r1, [pc, #132]	; (8003070 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ff2:	4a20      	ldr	r2, [pc, #128]	; (8003074 <HAL_ADC_Start+0xb4>)
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	fbb2 f2f1 	udiv	r2, r2, r1
 8002ffa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8002ffe:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8003000:	9a01      	ldr	r2, [sp, #4]
 8003002:	2a00      	cmp	r2, #0
 8003004:	d0ea      	beq.n	8002fdc <HAL_ADC_Start+0x1c>
      counter--;
 8003006:	9a01      	ldr	r2, [sp, #4]
 8003008:	3a01      	subs	r2, #1
 800300a:	e7f8      	b.n	8002ffe <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 800300c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800300e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003020:	bf41      	itttt	mi
 8003022:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8003024:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8003028:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800302c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800302e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003034:	bf1c      	itt	ne
 8003036:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8003038:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800303c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800303e:	2200      	movs	r2, #0
 8003040:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003044:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003048:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <HAL_ADC_Start+0xb8>)
 800304c:	6852      	ldr	r2, [r2, #4]
 800304e:	06d2      	lsls	r2, r2, #27
 8003050:	d108      	bne.n	8003064 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003052:	6898      	ldr	r0, [r3, #8]
 8003054:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8003058:	d1c3      	bne.n	8002fe2 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	e7bf      	b.n	8002fe4 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003064:	4a05      	ldr	r2, [pc, #20]	; (800307c <HAL_ADC_Start+0xbc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d1bb      	bne.n	8002fe2 <HAL_ADC_Start+0x22>
 800306a:	e7f2      	b.n	8003052 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 800306c:	2002      	movs	r0, #2
 800306e:	e7b9      	b.n	8002fe4 <HAL_ADC_Start+0x24>
 8003070:	000f4240 	.word	0x000f4240
 8003074:	20008598 	.word	0x20008598
 8003078:	40012300 	.word	0x40012300
 800307c:	40012000 	.word	0x40012000

08003080 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003080:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d017      	beq.n	80030b8 <HAL_ADC_Stop+0x38>
 8003088:	2301      	movs	r3, #1
 800308a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800308e:	6803      	ldr	r3, [r0, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	07db      	lsls	r3, r3, #31
 800309c:	d407      	bmi.n	80030ae <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 800309e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80030a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80030ae:	2300      	movs	r3, #0
 80030b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80030b4:	4618      	mov	r0, r3
 80030b6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80030b8:	2002      	movs	r0, #2
}
 80030ba:	4770      	bx	lr

080030bc <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030bc:	6803      	ldr	r3, [r0, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
{
 80030c0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030c2:	0556      	lsls	r6, r2, #21
{
 80030c4:	4604      	mov	r4, r0
 80030c6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030c8:	d50b      	bpl.n	80030e2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80030ca:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030cc:	05d8      	lsls	r0, r3, #23
 80030ce:	d508      	bpl.n	80030e2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030d2:	f043 0320 	orr.w	r3, r3, #32
 80030d6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80030d8:	2300      	movs	r3, #0
 80030da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80030de:	2001      	movs	r0, #1
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80030e2:	f7ff feb3 	bl	8002e4c <HAL_GetTick>
 80030e6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	0792      	lsls	r2, r2, #30
 80030ee:	d50c      	bpl.n	800310a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030f0:	f06f 0212 	mvn.w	r2, #18
 80030f4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fc:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8003104:	d013      	beq.n	800312e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8003106:	2000      	movs	r0, #0
 8003108:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800310a:	1c69      	adds	r1, r5, #1
 800310c:	d0ed      	beq.n	80030ea <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800310e:	b945      	cbnz	r5, 8003122 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8003118:	2300      	movs	r3, #0
 800311a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800311e:	2003      	movs	r0, #3
 8003120:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003122:	f7ff fe93 	bl	8002e4c <HAL_GetTick>
 8003126:	1b80      	subs	r0, r0, r6
 8003128:	4285      	cmp	r5, r0
 800312a:	d2dd      	bcs.n	80030e8 <HAL_ADC_PollForConversion+0x2c>
 800312c:	e7f0      	b.n	8003110 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800312e:	69a2      	ldr	r2, [r4, #24]
 8003130:	2a00      	cmp	r2, #0
 8003132:	d1e8      	bne.n	8003106 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003136:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800313a:	d002      	beq.n	8003142 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800313c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800313e:	055b      	lsls	r3, r3, #21
 8003140:	d4e1      	bmi.n	8003106 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003148:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800314a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800314c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8003150:	d1d9      	bne.n	8003106 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6423      	str	r3, [r4, #64]	; 0x40
}
 800315a:	bd70      	pop	{r4, r5, r6, pc}

0800315c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800315c:	6803      	ldr	r3, [r0, #0]
 800315e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003160:	4770      	bx	lr
	...

08003164 <HAL_ADC_ConfigChannel>:
{
 8003164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800316a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d06a      	beq.n	8003248 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003172:	680d      	ldr	r5, [r1, #0]
 8003174:	6804      	ldr	r4, [r0, #0]
 8003176:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8003178:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800317a:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800317c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003180:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003182:	d92a      	bls.n	80031da <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003184:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003188:	68e7      	ldr	r7, [r4, #12]
 800318a:	3b1e      	subs	r3, #30
 800318c:	f04f 0e07 	mov.w	lr, #7
 8003190:	fa0e fe03 	lsl.w	lr, lr, r3
 8003194:	ea27 070e 	bic.w	r7, r7, lr
 8003198:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800319a:	68e7      	ldr	r7, [r4, #12]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	433b      	orrs	r3, r7
 80031a2:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80031a4:	684a      	ldr	r2, [r1, #4]
 80031a6:	2a06      	cmp	r2, #6
 80031a8:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80031ac:	d825      	bhi.n	80031fa <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ae:	4413      	add	r3, r2
 80031b0:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80031b2:	1f59      	subs	r1, r3, #5
 80031b4:	231f      	movs	r3, #31
 80031b6:	408b      	lsls	r3, r1
 80031b8:	ea27 0303 	bic.w	r3, r7, r3
 80031bc:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80031c0:	fa06 f101 	lsl.w	r1, r6, r1
 80031c4:	4311      	orrs	r1, r2
 80031c6:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_ADC_ConfigChannel+0x11c>)
 80031ca:	429c      	cmp	r4, r3
 80031cc:	d034      	beq.n	8003238 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80031ce:	2300      	movs	r3, #0
 80031d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80031d4:	4618      	mov	r0, r3
}
 80031d6:	b003      	add	sp, #12
 80031d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031da:	6927      	ldr	r7, [r4, #16]
 80031dc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80031e0:	f04f 0e07 	mov.w	lr, #7
 80031e4:	fa0e fe03 	lsl.w	lr, lr, r3
 80031e8:	ea27 070e 	bic.w	r7, r7, lr
 80031ec:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031ee:	6927      	ldr	r7, [r4, #16]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	433b      	orrs	r3, r7
 80031f6:	6123      	str	r3, [r4, #16]
 80031f8:	e7d4      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80031fa:	2a0c      	cmp	r2, #12
 80031fc:	d80e      	bhi.n	800321c <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031fe:	4413      	add	r3, r2
 8003200:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003202:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8003206:	231f      	movs	r3, #31
 8003208:	4093      	lsls	r3, r2
 800320a:	ea21 0303 	bic.w	r3, r1, r3
 800320e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003210:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003212:	fa06 f202 	lsl.w	r2, r6, r2
 8003216:	431a      	orrs	r2, r3
 8003218:	6322      	str	r2, [r4, #48]	; 0x30
 800321a:	e7d5      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800321c:	4413      	add	r3, r2
 800321e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003220:	3b41      	subs	r3, #65	; 0x41
 8003222:	221f      	movs	r2, #31
 8003224:	409a      	lsls	r2, r3
 8003226:	ea21 0202 	bic.w	r2, r1, r2
 800322a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800322c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800322e:	fa06 f103 	lsl.w	r1, r6, r3
 8003232:	4311      	orrs	r1, r2
 8003234:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003236:	e7c7      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003238:	2d12      	cmp	r5, #18
 800323a:	d107      	bne.n	800324c <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800323c:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_ADC_ConfigChannel+0x120>)
 800323e:	6853      	ldr	r3, [r2, #4]
 8003240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003244:	6053      	str	r3, [r2, #4]
 8003246:	e7c2      	b.n	80031ce <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8003248:	2002      	movs	r0, #2
 800324a:	e7c4      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_ADC_ConfigChannel+0x124>)
 800324e:	429d      	cmp	r5, r3
 8003250:	d001      	beq.n	8003256 <HAL_ADC_ConfigChannel+0xf2>
 8003252:	2d11      	cmp	r5, #17
 8003254:	d1bb      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003256:	490b      	ldr	r1, [pc, #44]	; (8003284 <HAL_ADC_ConfigChannel+0x120>)
 8003258:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800325a:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800325c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003260:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003262:	d1b4      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_ADC_ConfigChannel+0x128>)
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_ADC_ConfigChannel+0x12c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fbb3 f2f2 	udiv	r2, r3, r2
 800326e:	230a      	movs	r3, #10
 8003270:	4353      	muls	r3, r2
        counter--;
 8003272:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003274:	9b01      	ldr	r3, [sp, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0a9      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800327a:	9b01      	ldr	r3, [sp, #4]
 800327c:	3b01      	subs	r3, #1
 800327e:	e7f8      	b.n	8003272 <HAL_ADC_ConfigChannel+0x10e>
 8003280:	40012000 	.word	0x40012000
 8003284:	40012300 	.word	0x40012300
 8003288:	10000012 	.word	0x10000012
 800328c:	20008598 	.word	0x20008598
 8003290:	000f4240 	.word	0x000f4240

08003294 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003294:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003296:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003298:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80032a4:	0200      	lsls	r0, r0, #8
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80032ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80032b0:	60d3      	str	r3, [r2, #12]
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ba:	b530      	push	{r4, r5, lr}
 80032bc:	68dc      	ldr	r4, [r3, #12]
 80032be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	bf28      	it	cs
 80032cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	f04f 0501 	mov.w	r5, #1
 80032d4:	fa05 f303 	lsl.w	r3, r5, r3
 80032d8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032dc:	bf8c      	ite	hi
 80032de:	3c03      	subhi	r4, #3
 80032e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e2:	4019      	ands	r1, r3
 80032e4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e6:	fa05 f404 	lsl.w	r4, r5, r4
 80032ea:	3c01      	subs	r4, #1
 80032ec:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80032ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	ea42 0201 	orr.w	r2, r2, r1
 80032f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f8:	bfaf      	iteee	ge
 80032fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fe:	f000 000f 	andlt.w	r0, r0, #15
 8003302:	4b06      	ldrlt	r3, [pc, #24]	; (800331c <HAL_NVIC_SetPriority+0x64>)
 8003304:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	bfa5      	ittet	ge
 8003308:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800330c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003310:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8003314:	bd30      	pop	{r4, r5, pc}
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00
 800331c:	e000ed14 	.word	0xe000ed14

08003320 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003320:	0942      	lsrs	r2, r0, #5
 8003322:	2301      	movs	r3, #1
 8003324:	f000 001f 	and.w	r0, r0, #31
 8003328:	fa03 f000 	lsl.w	r0, r3, r0
 800332c:	4b01      	ldr	r3, [pc, #4]	; (8003334 <HAL_NVIC_EnableIRQ+0x14>)
 800332e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100

08003338 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	3801      	subs	r0, #1
 800333a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800333e:	d20a      	bcs.n	8003356 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003344:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003346:	21f0      	movs	r1, #240	; 0xf0
 8003348:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800334c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003356:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000e010 	.word	0xe000e010
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003366:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003368:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800336a:	bf0c      	ite	eq
 800336c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003370:	f022 0204 	bicne.w	r2, r2, #4
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	4770      	bx	lr
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800337c:	4770      	bx	lr

0800337e <HAL_SYSTICK_IRQHandler>:
{
 800337e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003380:	f7ff fffc 	bl	800337c <HAL_SYSTICK_Callback>
 8003384:	bd08      	pop	{r3, pc}
	...

08003388 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003390:	f023 0303 	bic.w	r3, r3, #3
 8003394:	2118      	movs	r1, #24
 8003396:	3a10      	subs	r2, #16
 8003398:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800339c:	4904      	ldr	r1, [pc, #16]	; (80033b0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800339e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033a0:	bf88      	it	hi
 80033a2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033a4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033a6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033a8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80033aa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	08009ded 	.word	0x08009ded

080033b4 <HAL_DMA_Init>:
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff fd48 	bl	8002e4c <HAL_GetTick>
 80033bc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80033be:	2c00      	cmp	r4, #0
 80033c0:	d071      	beq.n	80034a6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80033c2:	2300      	movs	r3, #0
 80033c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80033c8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ca:	2302      	movs	r3, #2
 80033cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d8:	6821      	ldr	r1, [r4, #0]
 80033da:	680b      	ldr	r3, [r1, #0]
 80033dc:	07d8      	lsls	r0, r3, #31
 80033de:	d43c      	bmi.n	800345a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80033e0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033e2:	4d32      	ldr	r5, [pc, #200]	; (80034ac <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e4:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033e8:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ea:	68a3      	ldr	r3, [r4, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	68e2      	ldr	r2, [r4, #12]
 80033f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f2:	6922      	ldr	r2, [r4, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	6962      	ldr	r2, [r4, #20]
 80033f8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fa:	69e2      	ldr	r2, [r4, #28]
 80033fc:	4303      	orrs	r3, r0
 80033fe:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003400:	6a22      	ldr	r2, [r4, #32]
 8003402:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003404:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003406:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003408:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800340c:	bf01      	itttt	eq
 800340e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8003410:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8003412:	4335      	orreq	r5, r6
 8003414:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8003416:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003418:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800341a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800341c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003420:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003424:	d10b      	bne.n	800343e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8003426:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003428:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800342a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800342c:	b13d      	cbz	r5, 800343e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800342e:	b9f8      	cbnz	r0, 8003470 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8003430:	2a01      	cmp	r2, #1
 8003432:	d02d      	beq.n	8003490 <HAL_DMA_Init+0xdc>
 8003434:	d301      	bcc.n	800343a <HAL_DMA_Init+0x86>
 8003436:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003438:	d101      	bne.n	800343e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800343a:	01ea      	lsls	r2, r5, #7
 800343c:	d42b      	bmi.n	8003496 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800343e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff ffa1 	bl	8003388 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003446:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003448:	233f      	movs	r3, #63	; 0x3f
 800344a:	4093      	lsls	r3, r2
 800344c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003450:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003452:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003454:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003458:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800345a:	f7ff fcf7 	bl	8002e4c <HAL_GetTick>
 800345e:	1b40      	subs	r0, r0, r5
 8003460:	2805      	cmp	r0, #5
 8003462:	d9b9      	bls.n	80033d8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003464:	2320      	movs	r3, #32
 8003466:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003468:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800346a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800346e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003470:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003474:	d113      	bne.n	800349e <HAL_DMA_Init+0xea>
    switch (tmp)
 8003476:	2a03      	cmp	r2, #3
 8003478:	d8e1      	bhi.n	800343e <HAL_DMA_Init+0x8a>
 800347a:	a001      	add	r0, pc, #4	; (adr r0, 8003480 <HAL_DMA_Init+0xcc>)
 800347c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003480:	08003497 	.word	0x08003497
 8003484:	0800343b 	.word	0x0800343b
 8003488:	08003497 	.word	0x08003497
 800348c:	08003491 	.word	0x08003491
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003490:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003494:	d1d3      	bne.n	800343e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003496:	2340      	movs	r3, #64	; 0x40
 8003498:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800349a:	2001      	movs	r0, #1
 800349c:	e7e5      	b.n	800346a <HAL_DMA_Init+0xb6>
    switch (tmp)
 800349e:	2a02      	cmp	r2, #2
 80034a0:	d9f9      	bls.n	8003496 <HAL_DMA_Init+0xe2>
 80034a2:	2a03      	cmp	r2, #3
 80034a4:	e7c8      	b.n	8003438 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80034a6:	2001      	movs	r0, #1
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	bf00      	nop
 80034ac:	f010803f 	.word	0xf010803f

080034b0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d003      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
 80034be:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80034c0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80034c2:	2305      	movs	r3, #5
 80034c4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80034d0:	2000      	movs	r0, #0
}
 80034d2:	4770      	bx	lr

080034d4 <HAL_DMA_IRQHandler>:
{
 80034d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034da:	4b5a      	ldr	r3, [pc, #360]	; (8003644 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034dc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80034de:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80034e2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e4:	2208      	movs	r2, #8
 80034e6:	409a      	lsls	r2, r3
 80034e8:	4216      	tst	r6, r2
{
 80034ea:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ec:	d00c      	beq.n	8003508 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ee:	6801      	ldr	r1, [r0, #0]
 80034f0:	6808      	ldr	r0, [r1, #0]
 80034f2:	0740      	lsls	r0, r0, #29
 80034f4:	d508      	bpl.n	8003508 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034f6:	6808      	ldr	r0, [r1, #0]
 80034f8:	f020 0004 	bic.w	r0, r0, #4
 80034fc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034fe:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003500:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	4216      	tst	r6, r2
 800350e:	d008      	beq.n	8003522 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003510:	6821      	ldr	r1, [r4, #0]
 8003512:	6949      	ldr	r1, [r1, #20]
 8003514:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003516:	bf41      	itttt	mi
 8003518:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800351a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800351c:	f042 0202 	orrmi.w	r2, r2, #2
 8003520:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003522:	2204      	movs	r2, #4
 8003524:	409a      	lsls	r2, r3
 8003526:	4216      	tst	r6, r2
 8003528:	d008      	beq.n	800353c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800352a:	6821      	ldr	r1, [r4, #0]
 800352c:	6809      	ldr	r1, [r1, #0]
 800352e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003530:	bf41      	itttt	mi
 8003532:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003534:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8003536:	f042 0204 	orrmi.w	r2, r2, #4
 800353a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800353c:	2210      	movs	r2, #16
 800353e:	409a      	lsls	r2, r3
 8003540:	4216      	tst	r6, r2
 8003542:	d010      	beq.n	8003566 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	0709      	lsls	r1, r1, #28
 800354a:	d50c      	bpl.n	8003566 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800354c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	0350      	lsls	r0, r2, #13
 8003552:	d535      	bpl.n	80035c0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	0319      	lsls	r1, r3, #12
 8003558:	d401      	bmi.n	800355e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800355a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800355c:	e000      	b.n	8003560 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800355e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8003560:	b10b      	cbz	r3, 8003566 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8003562:	4620      	mov	r0, r4
 8003564:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003566:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003568:	2220      	movs	r2, #32
 800356a:	408a      	lsls	r2, r1
 800356c:	4216      	tst	r6, r2
 800356e:	d038      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	06c6      	lsls	r6, r0, #27
 8003576:	d534      	bpl.n	80035e2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003578:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800357a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800357e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003580:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003582:	d125      	bne.n	80035d0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003584:	f022 0216 	bic.w	r2, r2, #22
 8003588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003590:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003592:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003594:	b90a      	cbnz	r2, 800359a <HAL_DMA_IRQHandler+0xc6>
 8003596:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003598:	b11a      	cbz	r2, 80035a2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f022 0208 	bic.w	r2, r2, #8
 80035a0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a2:	233f      	movs	r3, #63	; 0x3f
 80035a4:	408b      	lsls	r3, r1
 80035a6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80035a8:	2300      	movs	r3, #0
 80035aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80035b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80035b6:	b10b      	cbz	r3, 80035bc <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80035b8:	4620      	mov	r0, r4
 80035ba:	4798      	blx	r3
}
 80035bc:	b003      	add	sp, #12
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035c4:	bf5e      	ittt	pl
 80035c6:	681a      	ldrpl	r2, [r3, #0]
 80035c8:	f022 0208 	bicpl.w	r2, r2, #8
 80035cc:	601a      	strpl	r2, [r3, #0]
 80035ce:	e7c4      	b.n	800355a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d0:	0350      	lsls	r0, r2, #13
 80035d2:	d528      	bpl.n	8003626 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0319      	lsls	r1, r3, #12
 80035d8:	d432      	bmi.n	8003640 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80035da:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80035dc:	b10b      	cbz	r3, 80035e2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80035de:	4620      	mov	r0, r4
 80035e0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0e9      	beq.n	80035bc <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035ea:	07da      	lsls	r2, r3, #31
 80035ec:	d519      	bpl.n	8003622 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ee:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80035f0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80035f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80035f6:	6813      	ldr	r3, [r2, #0]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035fe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003602:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8003606:	9b01      	ldr	r3, [sp, #4]
 8003608:	3301      	adds	r3, #1
 800360a:	429f      	cmp	r7, r3
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	d302      	bcc.n	8003616 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	07db      	lsls	r3, r3, #31
 8003614:	d4f7      	bmi.n	8003606 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8003616:	2300      	movs	r3, #0
 8003618:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800361c:	2301      	movs	r3, #1
 800361e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003622:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003624:	e7c7      	b.n	80035b6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800362c:	d108      	bne.n	8003640 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	f021 0110 	bic.w	r1, r1, #16
 8003634:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003636:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8003638:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800363c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003640:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003642:	e7cb      	b.n	80035dc <HAL_DMA_IRQHandler+0x108>
 8003644:	20008598 	.word	0x20008598

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003650:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8003818 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003654:	4a6e      	ldr	r2, [pc, #440]	; (8003810 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003656:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800381c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800365e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003662:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8003664:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003668:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800366c:	45b6      	cmp	lr, r6
 800366e:	f040 80b6 	bne.w	80037de <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003672:	684c      	ldr	r4, [r1, #4]
 8003674:	f024 0710 	bic.w	r7, r4, #16
 8003678:	2f02      	cmp	r7, #2
 800367a:	d116      	bne.n	80036aa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800367c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003680:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003684:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003688:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800368c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003690:	f04f 0c0f 	mov.w	ip, #15
 8003694:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003698:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800369c:	690d      	ldr	r5, [r1, #16]
 800369e:	fa05 f50b 	lsl.w	r5, r5, fp
 80036a2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80036a6:	f8ca 5020 	str.w	r5, [sl, #32]
 80036aa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80036b0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036b4:	fa05 f50a 	lsl.w	r5, r5, sl
 80036b8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ba:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036cc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80036ce:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036d2:	d811      	bhi.n	80036f8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80036d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036da:	68cf      	ldr	r7, [r1, #12]
 80036dc:	fa07 fc0a 	lsl.w	ip, r7, sl
 80036e0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80036e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80036e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036ec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80036f0:	409f      	lsls	r7, r3
 80036f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80036f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80036f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fc:	688f      	ldr	r7, [r1, #8]
 80036fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8003702:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8003704:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003706:	00e5      	lsls	r5, r4, #3
 8003708:	d569      	bpl.n	80037de <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370a:	f04f 0b00 	mov.w	fp, #0
 800370e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003712:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003716:	4d3f      	ldr	r5, [pc, #252]	; (8003814 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003718:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800371c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8003720:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8003724:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8003728:	9703      	str	r7, [sp, #12]
 800372a:	9f03      	ldr	r7, [sp, #12]
 800372c:	f023 0703 	bic.w	r7, r3, #3
 8003730:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003734:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003738:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800373c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003740:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003744:	f04f 0e0f 	mov.w	lr, #15
 8003748:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800374c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800374e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003752:	d04b      	beq.n	80037ec <HAL_GPIO_Init+0x1a4>
 8003754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003758:	42a8      	cmp	r0, r5
 800375a:	d049      	beq.n	80037f0 <HAL_GPIO_Init+0x1a8>
 800375c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003760:	42a8      	cmp	r0, r5
 8003762:	d047      	beq.n	80037f4 <HAL_GPIO_Init+0x1ac>
 8003764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003768:	42a8      	cmp	r0, r5
 800376a:	d045      	beq.n	80037f8 <HAL_GPIO_Init+0x1b0>
 800376c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003770:	42a8      	cmp	r0, r5
 8003772:	d043      	beq.n	80037fc <HAL_GPIO_Init+0x1b4>
 8003774:	4548      	cmp	r0, r9
 8003776:	d043      	beq.n	8003800 <HAL_GPIO_Init+0x1b8>
 8003778:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800377c:	42a8      	cmp	r0, r5
 800377e:	d041      	beq.n	8003804 <HAL_GPIO_Init+0x1bc>
 8003780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003784:	42a8      	cmp	r0, r5
 8003786:	d03f      	beq.n	8003808 <HAL_GPIO_Init+0x1c0>
 8003788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800378c:	42a8      	cmp	r0, r5
 800378e:	d03d      	beq.n	800380c <HAL_GPIO_Init+0x1c4>
 8003790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003794:	42a8      	cmp	r0, r5
 8003796:	bf14      	ite	ne
 8003798:	250a      	movne	r5, #10
 800379a:	2509      	moveq	r5, #9
 800379c:	fa05 f50c 	lsl.w	r5, r5, ip
 80037a0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80037a6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80037a8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037aa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80037ae:	bf0c      	ite	eq
 80037b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80037b2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80037b4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80037b6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80037bc:	bf0c      	ite	eq
 80037be:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80037c0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80037c2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80037ca:	bf0c      	ite	eq
 80037cc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80037ce:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80037d0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80037d2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037d4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80037d6:	bf54      	ite	pl
 80037d8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80037da:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80037dc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037de:	3301      	adds	r3, #1
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	f47f af3c 	bne.w	800365e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80037e6:	b005      	add	sp, #20
 80037e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ec:	465d      	mov	r5, fp
 80037ee:	e7d5      	b.n	800379c <HAL_GPIO_Init+0x154>
 80037f0:	2501      	movs	r5, #1
 80037f2:	e7d3      	b.n	800379c <HAL_GPIO_Init+0x154>
 80037f4:	2502      	movs	r5, #2
 80037f6:	e7d1      	b.n	800379c <HAL_GPIO_Init+0x154>
 80037f8:	2503      	movs	r5, #3
 80037fa:	e7cf      	b.n	800379c <HAL_GPIO_Init+0x154>
 80037fc:	2504      	movs	r5, #4
 80037fe:	e7cd      	b.n	800379c <HAL_GPIO_Init+0x154>
 8003800:	2505      	movs	r5, #5
 8003802:	e7cb      	b.n	800379c <HAL_GPIO_Init+0x154>
 8003804:	2506      	movs	r5, #6
 8003806:	e7c9      	b.n	800379c <HAL_GPIO_Init+0x154>
 8003808:	2507      	movs	r5, #7
 800380a:	e7c7      	b.n	800379c <HAL_GPIO_Init+0x154>
 800380c:	2508      	movs	r5, #8
 800380e:	e7c5      	b.n	800379c <HAL_GPIO_Init+0x154>
 8003810:	40013c00 	.word	0x40013c00
 8003814:	40020000 	.word	0x40020000
 8003818:	40023800 	.word	0x40023800
 800381c:	40021400 	.word	0x40021400

08003820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003820:	6903      	ldr	r3, [r0, #16]
 8003822:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003824:	bf14      	ite	ne
 8003826:	2001      	movne	r0, #1
 8003828:	2000      	moveq	r0, #0
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	b10a      	cbz	r2, 8003832 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800382e:	6181      	str	r1, [r0, #24]
 8003830:	4770      	bx	lr
 8003832:	0409      	lsls	r1, r1, #16
 8003834:	e7fb      	b.n	800382e <HAL_GPIO_WritePin+0x2>
	...

08003838 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003838:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003840:	4c18      	ldr	r4, [pc, #96]	; (80038a4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003844:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_PWREx_EnableOverDrive+0x70>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800385a:	f7ff faf7 	bl	8002e4c <HAL_GetTick>
 800385e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003860:	6863      	ldr	r3, [r4, #4]
 8003862:	03da      	lsls	r2, r3, #15
 8003864:	d50b      	bpl.n	800387e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003868:	4c0e      	ldr	r4, [pc, #56]	; (80038a4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800386e:	f7ff faed 	bl	8002e4c <HAL_GetTick>
 8003872:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003874:	6863      	ldr	r3, [r4, #4]
 8003876:	039b      	lsls	r3, r3, #14
 8003878:	d50a      	bpl.n	8003890 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800387a:	2000      	movs	r0, #0
 800387c:	e006      	b.n	800388c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800387e:	f7ff fae5 	bl	8002e4c <HAL_GetTick>
 8003882:	1b40      	subs	r0, r0, r5
 8003884:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003888:	d9ea      	bls.n	8003860 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800388a:	2003      	movs	r0, #3
}
 800388c:	b003      	add	sp, #12
 800388e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003890:	f7ff fadc 	bl	8002e4c <HAL_GetTick>
 8003894:	1b40      	subs	r0, r0, r5
 8003896:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800389a:	d9eb      	bls.n	8003874 <HAL_PWREx_EnableOverDrive+0x3c>
 800389c:	e7f5      	b.n	800388a <HAL_PWREx_EnableOverDrive+0x52>
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	420e0040 	.word	0x420e0040
 80038ac:	420e0044 	.word	0x420e0044

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b2:	4604      	mov	r4, r0
 80038b4:	b910      	cbnz	r0, 80038bc <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80038b6:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80038b8:	b003      	add	sp, #12
 80038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038bc:	6803      	ldr	r3, [r0, #0]
 80038be:	07d8      	lsls	r0, r3, #31
 80038c0:	d43b      	bmi.n	800393a <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	0799      	lsls	r1, r3, #30
 80038c6:	f100 8084 	bmi.w	80039d2 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	071e      	lsls	r6, r3, #28
 80038ce:	f100 80c6 	bmi.w	8003a5e <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	075d      	lsls	r5, r3, #29
 80038d6:	d52a      	bpl.n	800392e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	2300      	movs	r3, #0
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	4baa      	ldr	r3, [pc, #680]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 80038de:	4dab      	ldr	r5, [pc, #684]	; (8003b8c <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80038fa:	f7ff faa7 	bl	8002e4c <HAL_GetTick>
 80038fe:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	05da      	lsls	r2, r3, #23
 8003904:	f140 80cd 	bpl.w	8003aa2 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003908:	68a3      	ldr	r3, [r4, #8]
 800390a:	4d9f      	ldr	r5, [pc, #636]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 80cf 	bne.w	8003ab0 <HAL_RCC_OscConfig+0x200>
 8003912:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800391a:	f7ff fa97 	bl	8002e4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391e:	4d9a      	ldr	r5, [pc, #616]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8003920:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003928:	079b      	lsls	r3, r3, #30
 800392a:	f140 80e2 	bpl.w	8003af2 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392e:	69a2      	ldr	r2, [r4, #24]
 8003930:	2a00      	cmp	r2, #0
 8003932:	f040 80e5 	bne.w	8003b00 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8003936:	2000      	movs	r0, #0
 8003938:	e7be      	b.n	80038b8 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	4b93      	ldr	r3, [pc, #588]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	f002 020c 	and.w	r2, r2, #12
 8003942:	2a04      	cmp	r2, #4
 8003944:	d007      	beq.n	8003956 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394c:	2a08      	cmp	r2, #8
 800394e:	d10a      	bne.n	8003966 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	025a      	lsls	r2, r3, #9
 8003954:	d507      	bpl.n	8003966 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003956:	4b8c      	ldr	r3, [pc, #560]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	039b      	lsls	r3, r3, #14
 800395c:	d5b1      	bpl.n	80038c2 <HAL_RCC_OscConfig+0x12>
 800395e:	6863      	ldr	r3, [r4, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ae      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
 8003964:	e7a7      	b.n	80038b6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	4d87      	ldr	r5, [pc, #540]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396e:	d111      	bne.n	8003994 <HAL_RCC_OscConfig+0xe4>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003978:	f7ff fa68 	bl	8002e4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397c:	4d82      	ldr	r5, [pc, #520]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800397e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	039f      	lsls	r7, r3, #14
 8003984:	d49d      	bmi.n	80038c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003986:	f7ff fa61 	bl	8002e4c <HAL_GetTick>
 800398a:	1b80      	subs	r0, r0, r6
 800398c:	2864      	cmp	r0, #100	; 0x64
 800398e:	d9f7      	bls.n	8003980 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8003990:	2003      	movs	r0, #3
 8003992:	e791      	b.n	80038b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003998:	d104      	bne.n	80039a4 <HAL_RCC_OscConfig+0xf4>
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a0:	602b      	str	r3, [r5, #0]
 80039a2:	e7e5      	b.n	8003970 <HAL_RCC_OscConfig+0xc0>
 80039a4:	682a      	ldr	r2, [r5, #0]
 80039a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039aa:	602a      	str	r2, [r5, #0]
 80039ac:	682a      	ldr	r2, [r5, #0]
 80039ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039b2:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1df      	bne.n	8003978 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80039b8:	f7ff fa48 	bl	8002e4c <HAL_GetTick>
 80039bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	0398      	lsls	r0, r3, #14
 80039c2:	f57f af7e 	bpl.w	80038c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c6:	f7ff fa41 	bl	8002e4c <HAL_GetTick>
 80039ca:	1b80      	subs	r0, r0, r6
 80039cc:	2864      	cmp	r0, #100	; 0x64
 80039ce:	d9f6      	bls.n	80039be <HAL_RCC_OscConfig+0x10e>
 80039d0:	e7de      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	f012 0f0c 	tst.w	r2, #12
 80039da:	d007      	beq.n	80039ec <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e2:	2a08      	cmp	r2, #8
 80039e4:	d112      	bne.n	8003a0c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0259      	lsls	r1, r3, #9
 80039ea:	d40f      	bmi.n	8003a0c <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ec:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	0792      	lsls	r2, r2, #30
 80039f2:	d503      	bpl.n	80039fc <HAL_RCC_OscConfig+0x14c>
 80039f4:	68e2      	ldr	r2, [r4, #12]
 80039f6:	2a01      	cmp	r2, #1
 80039f8:	f47f af5d 	bne.w	80038b6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	6921      	ldr	r1, [r4, #16]
 8003a00:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003a04:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003a08:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e75e      	b.n	80038ca <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a0c:	68e2      	ldr	r2, [r4, #12]
 8003a0e:	4b60      	ldr	r3, [pc, #384]	; (8003b90 <HAL_RCC_OscConfig+0x2e0>)
 8003a10:	b1b2      	cbz	r2, 8003a40 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a16:	f7ff fa19 	bl	8002e4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1a:	4d5b      	ldr	r5, [pc, #364]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8003a1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	079b      	lsls	r3, r3, #30
 8003a22:	d507      	bpl.n	8003a34 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	6922      	ldr	r2, [r4, #16]
 8003a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	e74a      	b.n	80038ca <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7ff fa0a 	bl	8002e4c <HAL_GetTick>
 8003a38:	1b80      	subs	r0, r0, r6
 8003a3a:	2802      	cmp	r0, #2
 8003a3c:	d9ef      	bls.n	8003a1e <HAL_RCC_OscConfig+0x16e>
 8003a3e:	e7a7      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8003a40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a42:	f7ff fa03 	bl	8002e4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4d50      	ldr	r5, [pc, #320]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8003a48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	682b      	ldr	r3, [r5, #0]
 8003a4c:	079f      	lsls	r7, r3, #30
 8003a4e:	f57f af3c 	bpl.w	80038ca <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7ff f9fb 	bl	8002e4c <HAL_GetTick>
 8003a56:	1b80      	subs	r0, r0, r6
 8003a58:	2802      	cmp	r0, #2
 8003a5a:	d9f6      	bls.n	8003a4a <HAL_RCC_OscConfig+0x19a>
 8003a5c:	e798      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5e:	6962      	ldr	r2, [r4, #20]
 8003a60:	4b4c      	ldr	r3, [pc, #304]	; (8003b94 <HAL_RCC_OscConfig+0x2e4>)
 8003a62:	b17a      	cbz	r2, 8003a84 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003a68:	f7ff f9f0 	bl	8002e4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6c:	4d46      	ldr	r5, [pc, #280]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8003a6e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a72:	0798      	lsls	r0, r3, #30
 8003a74:	f53f af2d 	bmi.w	80038d2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a78:	f7ff f9e8 	bl	8002e4c <HAL_GetTick>
 8003a7c:	1b80      	subs	r0, r0, r6
 8003a7e:	2802      	cmp	r0, #2
 8003a80:	d9f6      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1c0>
 8003a82:	e785      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8003a84:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003a86:	f7ff f9e1 	bl	8002e4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8a:	4d3f      	ldr	r5, [pc, #252]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8003a8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a90:	0799      	lsls	r1, r3, #30
 8003a92:	f57f af1e 	bpl.w	80038d2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a96:	f7ff f9d9 	bl	8002e4c <HAL_GetTick>
 8003a9a:	1b80      	subs	r0, r0, r6
 8003a9c:	2802      	cmp	r0, #2
 8003a9e:	d9f6      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1de>
 8003aa0:	e776      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7ff f9d3 	bl	8002e4c <HAL_GetTick>
 8003aa6:	1b80      	subs	r0, r0, r6
 8003aa8:	2802      	cmp	r0, #2
 8003aaa:	f67f af29 	bls.w	8003900 <HAL_RCC_OscConfig+0x50>
 8003aae:	e76f      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d104      	bne.n	8003abe <HAL_RCC_OscConfig+0x20e>
 8003ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	672b      	str	r3, [r5, #112]	; 0x70
 8003abc:	e729      	b.n	8003912 <HAL_RCC_OscConfig+0x62>
 8003abe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	672a      	str	r2, [r5, #112]	; 0x70
 8003ac6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003ac8:	f022 0204 	bic.w	r2, r2, #4
 8003acc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f47f af23 	bne.w	800391a <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8003ad4:	f7ff f9ba 	bl	8002e4c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003adc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ae0:	0798      	lsls	r0, r3, #30
 8003ae2:	f57f af24 	bpl.w	800392e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7ff f9b1 	bl	8002e4c <HAL_GetTick>
 8003aea:	1b80      	subs	r0, r0, r6
 8003aec:	42b8      	cmp	r0, r7
 8003aee:	d9f6      	bls.n	8003ade <HAL_RCC_OscConfig+0x22e>
 8003af0:	e74e      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7ff f9ab 	bl	8002e4c <HAL_GetTick>
 8003af6:	1b80      	subs	r0, r0, r6
 8003af8:	42b8      	cmp	r0, r7
 8003afa:	f67f af14 	bls.w	8003926 <HAL_RCC_OscConfig+0x76>
 8003afe:	e747      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b00:	4d21      	ldr	r5, [pc, #132]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
 8003b02:	68ab      	ldr	r3, [r5, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	f43f aed4 	beq.w	80038b6 <HAL_RCC_OscConfig+0x6>
 8003b0e:	4e22      	ldr	r6, [pc, #136]	; (8003b98 <HAL_RCC_OscConfig+0x2e8>)
 8003b10:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b12:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003b14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b16:	d12a      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8003b18:	f7ff f998 	bl	8002e4c <HAL_GetTick>
 8003b1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	0199      	lsls	r1, r3, #6
 8003b22:	d41e      	bmi.n	8003b62 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b24:	6a22      	ldr	r2, [r4, #32]
 8003b26:	69e3      	ldr	r3, [r4, #28]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b2c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003b30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b38:	4c13      	ldr	r4, [pc, #76]	; (8003b88 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3a:	0852      	lsrs	r2, r2, #1
 8003b3c:	3a01      	subs	r2, #1
 8003b3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b42:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b44:	2301      	movs	r3, #1
 8003b46:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003b48:	f7ff f980 	bl	8002e4c <HAL_GetTick>
 8003b4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	019a      	lsls	r2, r3, #6
 8003b52:	f53f aef0 	bmi.w	8003936 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b56:	f7ff f979 	bl	8002e4c <HAL_GetTick>
 8003b5a:	1b40      	subs	r0, r0, r5
 8003b5c:	2802      	cmp	r0, #2
 8003b5e:	d9f6      	bls.n	8003b4e <HAL_RCC_OscConfig+0x29e>
 8003b60:	e716      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7ff f973 	bl	8002e4c <HAL_GetTick>
 8003b66:	1bc0      	subs	r0, r0, r7
 8003b68:	2802      	cmp	r0, #2
 8003b6a:	d9d8      	bls.n	8003b1e <HAL_RCC_OscConfig+0x26e>
 8003b6c:	e710      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8003b6e:	f7ff f96d 	bl	8002e4c <HAL_GetTick>
 8003b72:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	019b      	lsls	r3, r3, #6
 8003b78:	f57f aedd 	bpl.w	8003936 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7ff f966 	bl	8002e4c <HAL_GetTick>
 8003b80:	1b00      	subs	r0, r0, r4
 8003b82:	2802      	cmp	r0, #2
 8003b84:	d9f6      	bls.n	8003b74 <HAL_RCC_OscConfig+0x2c4>
 8003b86:	e703      	b.n	8003990 <HAL_RCC_OscConfig+0xe0>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	42470000 	.word	0x42470000
 8003b94:	42470e80 	.word	0x42470e80
 8003b98:	42470060 	.word	0x42470060

08003b9c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9c:	4913      	ldr	r1, [pc, #76]	; (8003bec <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003b9e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba0:	688b      	ldr	r3, [r1, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x16>
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bae:	4810      	ldr	r0, [pc, #64]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003bb0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003bb2:	4810      	ldr	r0, [pc, #64]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x58>)
 8003bb4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bbc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	bf14      	ite	ne
 8003bc2:	480c      	ldrne	r0, [pc, #48]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc4:	480a      	ldreq	r0, [pc, #40]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003bca:	bf18      	it	ne
 8003bcc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	fba1 0100 	umull	r0, r1, r1, r0
 8003bd6:	f7fd f8a3 	bl	8000d20 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_GetSysClockFreq+0x50>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003be2:	3301      	adds	r3, #1
 8003be4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003be6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bea:	bd08      	pop	{r3, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	017d7840 	.word	0x017d7840

08003bf8 <HAL_RCC_ClockConfig>:
{
 8003bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	4604      	mov	r4, r0
 8003c00:	b910      	cbnz	r0, 8003c08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003c02:	2001      	movs	r0, #1
 8003c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b44      	ldr	r3, [pc, #272]	; (8003d1c <HAL_RCC_ClockConfig+0x124>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f002 020f 	and.w	r2, r2, #15
 8003c10:	428a      	cmp	r2, r1
 8003c12:	d328      	bcc.n	8003c66 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	6821      	ldr	r1, [r4, #0]
 8003c16:	078f      	lsls	r7, r1, #30
 8003c18:	d42d      	bmi.n	8003c76 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	07c8      	lsls	r0, r1, #31
 8003c1c:	d440      	bmi.n	8003ca0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	; (8003d1c <HAL_RCC_ClockConfig+0x124>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f002 020f 	and.w	r2, r2, #15
 8003c26:	4295      	cmp	r5, r2
 8003c28:	d366      	bcc.n	8003cf8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	0751      	lsls	r1, r2, #29
 8003c2e:	d46c      	bmi.n	8003d0a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	0713      	lsls	r3, r2, #28
 8003c32:	d507      	bpl.n	8003c44 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c34:	4a3a      	ldr	r2, [pc, #232]	; (8003d20 <HAL_RCC_ClockConfig+0x128>)
 8003c36:	6921      	ldr	r1, [r4, #16]
 8003c38:	6893      	ldr	r3, [r2, #8]
 8003c3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003c3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c44:	f7ff ffaa 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003c48:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <HAL_RCC_ClockConfig+0x128>)
 8003c4a:	4a36      	ldr	r2, [pc, #216]	; (8003d24 <HAL_RCC_ClockConfig+0x12c>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	40d8      	lsrs	r0, r3
 8003c56:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_RCC_ClockConfig+0x130>)
 8003c58:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f7ff f8c0 	bl	8002de0 <HAL_InitTick>
  return HAL_OK;
 8003c60:	2000      	movs	r0, #0
 8003c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	b2ca      	uxtb	r2, r1
 8003c68:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	4299      	cmp	r1, r3
 8003c72:	d1c6      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xa>
 8003c74:	e7ce      	b.n	8003c14 <HAL_RCC_ClockConfig+0x1c>
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c7c:	bf1e      	ittt	ne
 8003c7e:	689a      	ldrne	r2, [r3, #8]
 8003c80:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8003c84:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	bf42      	ittt	mi
 8003c8a:	689a      	ldrmi	r2, [r3, #8]
 8003c8c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8003c90:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68a0      	ldr	r0, [r4, #8]
 8003c96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c9a:	4302      	orrs	r2, r0
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	e7bc      	b.n	8003c1a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca0:	6862      	ldr	r2, [r4, #4]
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_RCC_ClockConfig+0x128>)
 8003ca4:	2a01      	cmp	r2, #1
 8003ca6:	d11d      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cae:	d0a8      	beq.n	8003c02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb0:	4e1b      	ldr	r6, [pc, #108]	; (8003d20 <HAL_RCC_ClockConfig+0x128>)
 8003cb2:	68b3      	ldr	r3, [r6, #8]
 8003cb4:	f023 0303 	bic.w	r3, r3, #3
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003cbc:	f7ff f8c6 	bl	8002e4c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003cc4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	68b3      	ldr	r3, [r6, #8]
 8003cc8:	6862      	ldr	r2, [r4, #4]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cd2:	d0a4      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd4:	f7ff f8ba 	bl	8002e4c <HAL_GetTick>
 8003cd8:	1bc0      	subs	r0, r0, r7
 8003cda:	4540      	cmp	r0, r8
 8003cdc:	d9f3      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8003cde:	2003      	movs	r0, #3
}
 8003ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce4:	1e91      	subs	r1, r2, #2
 8003ce6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cea:	d802      	bhi.n	8003cf2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cf0:	e7dd      	b.n	8003cae <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf2:	f013 0f02 	tst.w	r3, #2
 8003cf6:	e7da      	b.n	8003cae <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf8:	b2ea      	uxtb	r2, r5
 8003cfa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	429d      	cmp	r5, r3
 8003d04:	f47f af7d 	bne.w	8003c02 <HAL_RCC_ClockConfig+0xa>
 8003d08:	e78f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0a:	4905      	ldr	r1, [pc, #20]	; (8003d20 <HAL_RCC_ClockConfig+0x128>)
 8003d0c:	68e0      	ldr	r0, [r4, #12]
 8003d0e:	688b      	ldr	r3, [r1, #8]
 8003d10:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003d14:	4303      	orrs	r3, r0
 8003d16:	608b      	str	r3, [r1, #8]
 8003d18:	e78a      	b.n	8003c30 <HAL_RCC_ClockConfig+0x38>
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	0801564a 	.word	0x0801564a
 8003d28:	20008598 	.word	0x20008598

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003d2c:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20008598 	.word	0x20008598

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d46:	6810      	ldr	r0, [r2, #0]
}
 8003d48:	40d8      	lsrs	r0, r3
 8003d4a:	4770      	bx	lr
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	0801565a 	.word	0x0801565a
 8003d54:	20008598 	.word	0x20008598

08003d58 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003d5a:	4a05      	ldr	r2, [pc, #20]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	4a03      	ldr	r2, [pc, #12]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003d66:	6810      	ldr	r0, [r2, #0]
}
 8003d68:	40d8      	lsrs	r0, r3
 8003d6a:	4770      	bx	lr
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	0801565a 	.word	0x0801565a
 8003d74:	20008598 	.word	0x20008598

08003d78 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	b089      	sub	sp, #36	; 0x24
 8003d7e:	4605      	mov	r5, r0
 8003d80:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8003d82:	f7ff f863 	bl	8002e4c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8003d86:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8003d88:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d8a:	2108      	movs	r1, #8
 8003d8c:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d92:	f001 fac6 	bl	8005322 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8003d96:	4604      	mov	r4, r0
 8003d98:	bb40      	cbnz	r0, 8003dec <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003d9a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8003d9c:	6828      	ldr	r0, [r5, #0]
 8003d9e:	0409      	lsls	r1, r1, #16
 8003da0:	f001 fbca 	bl	8005538 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8003da4:	4604      	mov	r4, r0
 8003da6:	bb08      	cbnz	r0, 8003dec <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dac:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003dae:	2308      	movs	r3, #8
 8003db0:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003db2:	2330      	movs	r3, #48	; 0x30
 8003db4:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003db6:	2302      	movs	r3, #2
 8003db8:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dba:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003dbc:	2301      	movs	r3, #1
  SDIO_ConfigData(hsd->Instance, &config);
 8003dbe:	a902      	add	r1, sp, #8
 8003dc0:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003dc2:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 8003dc4:	f001 fa9a 	bl	80052fc <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003dc8:	6828      	ldr	r0, [r5, #0]
 8003dca:	f001 fbe6 	bl	800559a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8003dce:	4604      	mov	r4, r0
 8003dd0:	b960      	cbnz	r0, 8003dec <SD_FindSCR+0x74>
 8003dd2:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003dd4:	f240 482a 	movw	r8, #1066	; 0x42a
 8003dd8:	6828      	ldr	r0, [r5, #0]
 8003dda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ddc:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003de0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003de2:	d007      	beq.n	8003df4 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003de4:	0719      	lsls	r1, r3, #28
 8003de6:	d518      	bpl.n	8003e1a <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003de8:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003dea:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 8003dec:	4620      	mov	r0, r4
 8003dee:	b009      	add	sp, #36	; 0x24
 8003df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003df4:	029b      	lsls	r3, r3, #10
 8003df6:	d507      	bpl.n	8003e08 <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003df8:	f001 f9c2 	bl	8005180 <SDIO_ReadFIFO>
 8003dfc:	ab08      	add	r3, sp, #32
 8003dfe:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8003e02:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003e04:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e08:	f7ff f820 	bl	8002e4c <HAL_GetTick>
 8003e0c:	eba0 0009 	sub.w	r0, r0, r9
 8003e10:	3001      	adds	r0, #1
 8003e12:	d1e1      	bne.n	8003dd8 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8003e14:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003e18:	e7e8      	b.n	8003dec <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e1c:	079a      	lsls	r2, r3, #30
 8003e1e:	d501      	bpl.n	8003e24 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003e20:	2402      	movs	r4, #2
 8003e22:	e7e2      	b.n	8003dea <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e26:	069b      	lsls	r3, r3, #26
 8003e28:	d501      	bpl.n	8003e2e <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003e2a:	2420      	movs	r4, #32
 8003e2c:	e7dd      	b.n	8003dea <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e2e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003e32:	6383      	str	r3, [r0, #56]	; 0x38
 8003e34:	9b00      	ldr	r3, [sp, #0]
 8003e36:	ba1b      	rev	r3, r3
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003e38:	6073      	str	r3, [r6, #4]
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003e3e:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8003e40:	e7d4      	b.n	8003dec <SD_FindSCR+0x74>

08003e42 <HAL_SD_ReadBlocks>:
{
 8003e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e46:	b087      	sub	sp, #28
 8003e48:	4604      	mov	r4, r0
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	4691      	mov	r9, r2
 8003e4e:	4698      	mov	r8, r3
 8003e50:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003e52:	f7fe fffb 	bl	8002e4c <HAL_GetTick>
 8003e56:	4607      	mov	r7, r0
  if(NULL == pData)
 8003e58:	b92d      	cbnz	r5, 8003e66 <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003e60:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003e62:	2001      	movs	r0, #1
 8003e64:	e010      	b.n	8003e88 <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8003e66:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003e6a:	b2c0      	uxtb	r0, r0
 8003e6c:	2801      	cmp	r0, #1
 8003e6e:	f040 80c3 	bne.w	8003ff8 <HAL_SD_ReadBlocks+0x1b6>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003e74:	eb09 0308 	add.w	r3, r9, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e78:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e7a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e7c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e7e:	d906      	bls.n	8003e8e <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e86:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003e88:	b007      	add	sp, #28
 8003e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003e94:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e96:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8003e98:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e9a:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8003ea0:	bf18      	it	ne
 8003ea2:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ea6:	f001 fa3c 	bl	8005322 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eaa:	b150      	cbz	r0, 8003ec2 <HAL_SD_ReadBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003eb6:	4318      	orrs	r0, r3
 8003eb8:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8003ec0:	e7e2      	b.n	8003e88 <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003ec8:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003ecc:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ece:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ed0:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003ed2:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ed6:	f04f 0b02 	mov.w	fp, #2
    SDIO_ConfigData(hsd->Instance, &config);
 8003eda:	4669      	mov	r1, sp
 8003edc:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ede:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ee0:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003ee4:	f8cd a014 	str.w	sl, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8003ee8:	f001 fa08 	bl	80052fc <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003eec:	45d0      	cmp	r8, sl
 8003eee:	d90a      	bls.n	8003f06 <HAL_SD_ReadBlocks+0xc4>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003ef0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	6820      	ldr	r0, [r4, #0]
 8003ef8:	f001 fa43 	bl	8005382 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d1d5      	bne.n	8003eac <HAL_SD_ReadBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8003f00:	f240 3a2a 	movw	sl, #810	; 0x32a
 8003f04:	e027      	b.n	8003f56 <HAL_SD_ReadBlocks+0x114>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003f06:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	f001 fa20 	bl	8005352 <SDMMC_CmdReadSingleBlock>
 8003f12:	e7f3      	b.n	8003efc <HAL_SD_ReadBlocks+0xba>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8003f14:	041a      	lsls	r2, r3, #16
 8003f16:	d50b      	bpl.n	8003f30 <HAL_SD_ReadBlocks+0xee>
 8003f18:	f1a5 0904 	sub.w	r9, r5, #4
 8003f1c:	f105 0b1c 	add.w	fp, r5, #28
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	f001 f92d 	bl	8005180 <SDIO_ReadFIFO>
 8003f26:	f849 0f04 	str.w	r0, [r9, #4]!
        for(count = 0U; count < 8U; count++)
 8003f2a:	45d9      	cmp	r9, fp
 8003f2c:	d1f8      	bne.n	8003f20 <HAL_SD_ReadBlocks+0xde>
        tempbuff += 8U;
 8003f2e:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003f30:	b966      	cbnz	r6, 8003f4c <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f40:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003f48:	2003      	movs	r0, #3
 8003f4a:	e79d      	b.n	8003e88 <HAL_SD_ReadBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003f4c:	f7fe ff7e 	bl	8002e4c <HAL_GetTick>
 8003f50:	1bc0      	subs	r0, r0, r7
 8003f52:	4286      	cmp	r6, r0
 8003f54:	d9ed      	bls.n	8003f32 <HAL_SD_ReadBlocks+0xf0>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f5a:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8003f5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8003f60:	d0d8      	beq.n	8003f14 <HAL_SD_ReadBlocks+0xd2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f62:	05db      	lsls	r3, r3, #23
 8003f64:	d509      	bpl.n	8003f7a <HAL_SD_ReadBlocks+0x138>
 8003f66:	f1b8 0f01 	cmp.w	r8, #1
 8003f6a:	d906      	bls.n	8003f7a <HAL_SD_ReadBlocks+0x138>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d003      	beq.n	8003f7a <HAL_SD_ReadBlocks+0x138>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f72:	f001 fa4f 	bl	8005414 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d198      	bne.n	8003eac <HAL_SD_ReadBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7e:	0710      	lsls	r0, r2, #28
 8003f80:	d507      	bpl.n	8003f92 <HAL_SD_ReadBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003f8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f90:	e793      	b.n	8003eba <HAL_SD_ReadBlocks+0x78>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f94:	0791      	lsls	r1, r2, #30
 8003f96:	d506      	bpl.n	8003fa6 <HAL_SD_ReadBlocks+0x164>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	e7f3      	b.n	8003f8e <HAL_SD_ReadBlocks+0x14c>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa8:	0692      	lsls	r2, r2, #26
 8003faa:	d518      	bpl.n	8003fde <HAL_SD_ReadBlocks+0x19c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fb4:	f043 0320 	orr.w	r3, r3, #32
 8003fb8:	e7e9      	b.n	8003f8e <HAL_SD_ReadBlocks+0x14c>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8003fba:	f001 f8e1 	bl	8005180 <SDIO_ReadFIFO>
 8003fbe:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003fc2:	b93e      	cbnz	r6, 8003fd4 <HAL_SD_ReadBlocks+0x192>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fd2:	e7dc      	b.n	8003f8e <HAL_SD_ReadBlocks+0x14c>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003fd4:	f7fe ff3a 	bl	8002e4c <HAL_GetTick>
 8003fd8:	1bc0      	subs	r0, r0, r7
 8003fda:	4286      	cmp	r6, r0
 8003fdc:	d9f2      	bls.n	8003fc4 <HAL_SD_ReadBlocks+0x182>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fe2:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8003fe6:	d1e8      	bne.n	8003fba <HAL_SD_ReadBlocks+0x178>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fe8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003fec:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	e747      	b.n	8003e88 <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffe:	e72f      	b.n	8003e60 <HAL_SD_ReadBlocks+0x1e>

08004000 <HAL_SD_WriteBlocks>:
{
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	4604      	mov	r4, r0
 8004008:	460d      	mov	r5, r1
 800400a:	4691      	mov	r9, r2
 800400c:	461e      	mov	r6, r3
 800400e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8004010:	f7fe ff1c 	bl	8002e4c <HAL_GetTick>
 8004014:	4680      	mov	r8, r0
  if(NULL == pData)
 8004016:	b92d      	cbnz	r5, 8004024 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800401a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800401e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004020:	2001      	movs	r0, #1
 8004022:	e010      	b.n	8004046 <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8004024:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004028:	b2c0      	uxtb	r0, r0
 800402a:	2801      	cmp	r0, #1
 800402c:	f040 809f 	bne.w	800416e <HAL_SD_WriteBlocks+0x16e>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004030:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004032:	eb09 0306 	add.w	r3, r9, r6
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004036:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004038:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800403a:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800403c:	d906      	bls.n	800404c <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800403e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004044:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004046:	b006      	add	sp, #24
 8004048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800404c:	2303      	movs	r3, #3
 800404e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004052:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004054:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8004056:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004058:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800405a:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 800405e:	bf18      	it	ne
 8004060:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004064:	f001 f95d 	bl	8005322 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004068:	b150      	cbz	r0, 8004080 <HAL_SD_WriteBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004074:	4318      	orrs	r0, r3
 8004076:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004078:	2001      	movs	r0, #1
 800407a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800407e:	e7e2      	b.n	8004046 <HAL_SD_WriteBlocks+0x46>
    if(NumberOfBlocks > 1U)
 8004080:	2e01      	cmp	r6, #1
 8004082:	d935      	bls.n	80040f0 <HAL_SD_WriteBlocks+0xf0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004084:	2320      	movs	r3, #32
 8004086:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004088:	4649      	mov	r1, r9
 800408a:	6820      	ldr	r0, [r4, #0]
 800408c:	f001 f9a9 	bl	80053e2 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004090:	2800      	cmp	r0, #0
 8004092:	d1ea      	bne.n	800406a <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004094:	f04f 33ff 	mov.w	r3, #4294967295
 8004098:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800409a:	0273      	lsls	r3, r6, #9
 800409c:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800409e:	2390      	movs	r3, #144	; 0x90
 80040a0:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80040a2:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040a4:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80040a6:	2301      	movs	r3, #1
    SDIO_ConfigData(hsd->Instance, &config);
 80040a8:	4669      	mov	r1, sp
 80040aa:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80040ac:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 80040ae:	f001 f925 	bl	80052fc <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80040b2:	f240 3a1a 	movw	sl, #794	; 0x31a
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80040ba:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80040be:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80040c0:	d01d      	beq.n	80040fe <HAL_SD_WriteBlocks+0xfe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80040c2:	05dd      	lsls	r5, r3, #23
 80040c4:	d508      	bpl.n	80040d8 <HAL_SD_WriteBlocks+0xd8>
 80040c6:	2e01      	cmp	r6, #1
 80040c8:	d906      	bls.n	80040d8 <HAL_SD_WriteBlocks+0xd8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80040ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d003      	beq.n	80040d8 <HAL_SD_WriteBlocks+0xd8>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80040d0:	f001 f9a0 	bl	8005414 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d1c8      	bne.n	800406a <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040dc:	0711      	lsls	r1, r2, #28
 80040de:	d52d      	bpl.n	800413c <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040e8:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80040ee:	e7c3      	b.n	8004078 <HAL_SD_WriteBlocks+0x78>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80040f0:	2310      	movs	r3, #16
 80040f2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80040f4:	4649      	mov	r1, r9
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	f001 f95b 	bl	80053b2 <SDMMC_CmdWriteSingleBlock>
 80040fc:	e7c8      	b.n	8004090 <HAL_SD_WriteBlocks+0x90>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80040fe:	045b      	lsls	r3, r3, #17
 8004100:	d509      	bpl.n	8004116 <HAL_SD_WriteBlocks+0x116>
 8004102:	46a9      	mov	r9, r5
 8004104:	3520      	adds	r5, #32
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8004106:	4649      	mov	r1, r9
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	f109 0904 	add.w	r9, r9, #4
 800410e:	f001 f83a 	bl	8005186 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004112:	454d      	cmp	r5, r9
 8004114:	d1f7      	bne.n	8004106 <HAL_SD_WriteBlocks+0x106>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004116:	b957      	cbnz	r7, 800412e <HAL_SD_WriteBlocks+0x12e>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004122:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004124:	2301      	movs	r3, #1
 8004126:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800412a:	2003      	movs	r0, #3
 800412c:	e78b      	b.n	8004046 <HAL_SD_WriteBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800412e:	f7fe fe8d 	bl	8002e4c <HAL_GetTick>
 8004132:	eba0 0008 	sub.w	r0, r0, r8
 8004136:	4287      	cmp	r7, r0
 8004138:	d8bd      	bhi.n	80040b6 <HAL_SD_WriteBlocks+0xb6>
 800413a:	e7ed      	b.n	8004118 <HAL_SD_WriteBlocks+0x118>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800413c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413e:	0792      	lsls	r2, r2, #30
 8004140:	d506      	bpl.n	8004150 <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004142:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8004148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	e7cd      	b.n	80040ec <HAL_SD_WriteBlocks+0xec>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004150:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004152:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004156:	f010 0010 	ands.w	r0, r0, #16
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800415c:	d003      	beq.n	8004166 <HAL_SD_WriteBlocks+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800415e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004160:	f043 0310 	orr.w	r3, r3, #16
 8004164:	e7c2      	b.n	80040ec <HAL_SD_WriteBlocks+0xec>
    hsd->State = HAL_SD_STATE_READY;
 8004166:	2301      	movs	r3, #1
 8004168:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800416c:	e76b      	b.n	8004046 <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800416e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004174:	e753      	b.n	800401e <HAL_SD_WriteBlocks+0x1e>

08004176 <HAL_SD_TxCpltCallback>:
 8004176:	4770      	bx	lr

08004178 <HAL_SD_RxCpltCallback>:
 8004178:	4770      	bx	lr

0800417a <HAL_SD_ErrorCallback>:
 800417a:	4770      	bx	lr

0800417c <HAL_SD_AbortCallback>:
{
 800417c:	4770      	bx	lr

0800417e <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800417e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8004180:	0f9a      	lsrs	r2, r3, #30
 8004182:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8004184:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8004188:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800418a:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800418e:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8004190:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004194:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8004196:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800419a:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 800419c:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800419e:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80041a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80041a2:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80041a8:	88ca      	ldrh	r2, [r1, #6]
{
 80041aa:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80041ac:	b292      	uxth	r2, r2
 80041ae:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80041b2:	4322      	orrs	r2, r4
 80041b4:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80041b6:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80041ba:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80041bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80041c0:	09d4      	lsrs	r4, r2, #7
 80041c2:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80041c4:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80041c8:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80041ca:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80041ce:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80041d0:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80041d4:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80041d6:	2400      	movs	r4, #0
 80041d8:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80041da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80041dc:	2c00      	cmp	r4, #0
 80041de:	f040 8083 	bne.w	80042e8 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80041e2:	0292      	lsls	r2, r2, #10
 80041e4:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80041e8:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 80041ea:	690a      	ldr	r2, [r1, #16]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80041f2:	4313      	orrs	r3, r2
 80041f4:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80041f6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80041f8:	690b      	ldr	r3, [r1, #16]
 80041fa:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80041fe:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8004200:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8004204:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8004206:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800420a:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800420c:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8004210:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8004212:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8004216:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8004218:	0bd3      	lsrs	r3, r2, #15
 800421a:	f003 0306 	and.w	r3, r3, #6
 800421e:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8004220:	7e0c      	ldrb	r4, [r1, #24]
 8004222:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004226:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800422a:	4322      	orrs	r2, r4
 800422c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800422e:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8004230:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004232:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8004234:	3402      	adds	r4, #2
 8004236:	40a2      	lsls	r2, r4
 8004238:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800423a:	7a0d      	ldrb	r5, [r1, #8]
 800423c:	2401      	movs	r4, #1
 800423e:	40ac      	lsls	r4, r5
 8004240:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8004242:	0a64      	lsrs	r4, r4, #9
 8004244:	4362      	muls	r2, r4
 8004246:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004248:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800424c:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800424e:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8004258:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800425a:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800425c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800425e:	7e8a      	ldrb	r2, [r1, #26]
 8004260:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8004264:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8004266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800426a:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800426c:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800426e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8004270:	0fda      	lsrs	r2, r3, #31
 8004272:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8004274:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8004278:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800427a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800427e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8004280:	0d9a      	lsrs	r2, r3, #22
 8004282:	f002 020c 	and.w	r2, r2, #12
 8004286:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8004288:	7fca      	ldrb	r2, [r1, #31]
 800428a:	f3c3 5081 	ubfx	r0, r3, #22, #2
 800428e:	4302      	orrs	r2, r0
 8004290:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004292:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8004296:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 800429a:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800429c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 80042a0:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80042a4:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80042a8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80042ac:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80042b0:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80042b4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80042b8:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80042bc:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80042c0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80042c4:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80042c8:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80042cc:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80042d0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80042d4:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 80042d8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80042dc:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80042e6:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80042e8:	2c01      	cmp	r4, #1
 80042ea:	d11a      	bne.n	8004322 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80042f2:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80042f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 80042f6:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80042f8:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 80042fa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80042fe:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8004300:	690c      	ldr	r4, [r1, #16]
 8004302:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004306:	4322      	orrs	r2, r4
 8004308:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800430a:	690a      	ldr	r2, [r1, #16]
 800430c:	0292      	lsls	r2, r2, #10
 800430e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004312:	6542      	str	r2, [r0, #84]	; 0x54
 8004314:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8004316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800431a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800431e:	6582      	str	r2, [r0, #88]	; 0x58
 8004320:	e794      	b.n	800424c <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800432a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004332:	2301      	movs	r3, #1
 8004334:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8004338:	4618      	mov	r0, r3
 800433a:	bd30      	pop	{r4, r5, pc}

0800433c <HAL_SD_InitCard>:
{
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004340:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004342:	2376      	movs	r3, #118	; 0x76
 8004344:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004346:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004348:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 800434a:	ab0a      	add	r3, sp, #40	; 0x28
{
 800434c:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 800434e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004352:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 8004356:	4e6f      	ldr	r6, [pc, #444]	; (8004514 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004358:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800435a:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800435c:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 800435e:	ab07      	add	r3, sp, #28
 8004360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	f000 fef0 	bl	8005148 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8004368:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 800436a:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	f000 ff0f 	bl	8005190 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8004372:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8004374:	2002      	movs	r0, #2
 8004376:	f7fe fd6f 	bl	8002e58 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800437a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800437c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800437e:	f001 f87b 	bl	8005478 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004382:	4606      	mov	r6, r0
 8004384:	b968      	cbnz	r0, 80043a2 <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	f001 f89e 	bl	80054c8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800438c:	b380      	cbz	r0, 80043f0 <HAL_SD_InitCard+0xb4>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800438e:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004390:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004394:	9b06      	ldr	r3, [sp, #24]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	42ab      	cmp	r3, r5
 800439a:	9206      	str	r2, [sp, #24]
 800439c:	d108      	bne.n	80043b0 <HAL_SD_InitCard+0x74>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800439e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80043a2:	2001      	movs	r0, #1
 80043a4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80043a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043aa:	430e      	orrs	r6, r1
 80043ac:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 80043ae:	e081      	b.n	80044b4 <HAL_SD_InitCard+0x178>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80043b0:	2100      	movs	r1, #0
 80043b2:	6820      	ldr	r0, [r4, #0]
 80043b4:	f001 f8c0 	bl	8005538 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80043b8:	4601      	mov	r1, r0
 80043ba:	b110      	cbz	r0, 80043c2 <HAL_SD_InitCard+0x86>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043bc:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80043c0:	e7ef      	b.n	80043a2 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	f001 f8d0 	bl	8005568 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80043c8:	4601      	mov	r1, r0
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d1f6      	bne.n	80043bc <HAL_SD_InitCard+0x80>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	f000 fef9 	bl	80051c6 <SDIO_GetResponse>
    while(validvoltage == 0U)
 80043d4:	2800      	cmp	r0, #0
 80043d6:	dadd      	bge.n	8004394 <HAL_SD_InitCard+0x58>
    hsd->SdCard.CardType = CARD_SDSC;
 80043d8:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80043da:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80043dc:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80043de:	2301      	movs	r3, #1
 80043e0:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80043e4:	f000 fed8 	bl	8005198 <SDIO_GetPowerState>
 80043e8:	bb10      	cbnz	r0, 8004430 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043ea:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80043ee:	e06b      	b.n	80044c8 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043f0:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80043f2:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80043f6:	9b06      	ldr	r3, [sp, #24]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	42ab      	cmp	r3, r5
 80043fc:	9206      	str	r2, [sp, #24]
 80043fe:	d0ce      	beq.n	800439e <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004400:	2100      	movs	r1, #0
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	f001 f898 	bl	8005538 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004408:	4606      	mov	r6, r0
 800440a:	2800      	cmp	r0, #0
 800440c:	d1c9      	bne.n	80043a2 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800440e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	f001 f8a8 	bl	8005568 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004418:	4606      	mov	r6, r0
 800441a:	2800      	cmp	r0, #0
 800441c:	d1c1      	bne.n	80043a2 <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800441e:	4601      	mov	r1, r0
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	f000 fed0 	bl	80051c6 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8004426:	0fc3      	lsrs	r3, r0, #31
 8004428:	d0e5      	beq.n	80043f6 <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800442a:	0042      	lsls	r2, r0, #1
 800442c:	d5d4      	bpl.n	80043d8 <HAL_SD_InitCard+0x9c>
 800442e:	e7d4      	b.n	80043da <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004430:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004432:	2b03      	cmp	r3, #3
 8004434:	d01a      	beq.n	800446c <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	f001 f8c7 	bl	80055ca <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800443c:	4605      	mov	r5, r0
 800443e:	2800      	cmp	r0, #0
 8004440:	d142      	bne.n	80044c8 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004442:	4601      	mov	r1, r0
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	f000 febe 	bl	80051c6 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800444a:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800444c:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	f000 feb9 	bl	80051c6 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004454:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004456:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	f000 feb4 	bl	80051c6 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800445e:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004460:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004462:	6820      	ldr	r0, [r4, #0]
 8004464:	f000 feaf 	bl	80051c6 <SDIO_GetResponse>
 8004468:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800446c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800446e:	2b03      	cmp	r3, #3
 8004470:	d122      	bne.n	80044b8 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004472:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004474:	2b03      	cmp	r3, #3
 8004476:	d12e      	bne.n	80044d6 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004478:	2104      	movs	r1, #4
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	f000 fea3 	bl	80051c6 <SDIO_GetResponse>
 8004480:	0d00      	lsrs	r0, r0, #20
 8004482:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004484:	a90d      	add	r1, sp, #52	; 0x34
 8004486:	4620      	mov	r0, r4
 8004488:	f7ff fe79 	bl	800417e <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800448c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800448e:	6820      	ldr	r0, [r4, #0]
 8004490:	0412      	lsls	r2, r2, #16
 8004492:	2300      	movs	r3, #0
 8004494:	f000 ffd8 	bl	8005448 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004498:	4605      	mov	r5, r0
 800449a:	b9a8      	cbnz	r0, 80044c8 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 800449c:	f104 0310 	add.w	r3, r4, #16
 80044a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80044a8:	1d23      	adds	r3, r4, #4
 80044aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044ac:	6820      	ldr	r0, [r4, #0]
 80044ae:	f000 fe4b 	bl	8005148 <SDIO_Init>
  return HAL_OK;
 80044b2:	4628      	mov	r0, r5
}
 80044b4:	b019      	add	sp, #100	; 0x64
 80044b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80044b8:	f10d 0116 	add.w	r1, sp, #22
 80044bc:	6820      	ldr	r0, [r4, #0]
 80044be:	f001 f8af 	bl	8005620 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c2:	4605      	mov	r5, r0
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d0d4      	beq.n	8004472 <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 80044c8:	2001      	movs	r0, #1
 80044ca:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80044ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044d0:	431d      	orrs	r5, r3
 80044d2:	63a5      	str	r5, [r4, #56]	; 0x38
 80044d4:	e7ee      	b.n	80044b4 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 80044d6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80044da:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	0409      	lsls	r1, r1, #16
 80044e0:	f001 f888 	bl	80055f4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80044e4:	4605      	mov	r5, r0
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d1ee      	bne.n	80044c8 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044ea:	4601      	mov	r1, r0
 80044ec:	6820      	ldr	r0, [r4, #0]
 80044ee:	f000 fe6a 	bl	80051c6 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044f2:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044f4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044f6:	6820      	ldr	r0, [r4, #0]
 80044f8:	f000 fe65 	bl	80051c6 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044fc:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044fe:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	f000 fe60 	bl	80051c6 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004506:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004508:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800450a:	6820      	ldr	r0, [r4, #0]
 800450c:	f000 fe5b 	bl	80051c6 <SDIO_GetResponse>
 8004510:	6720      	str	r0, [r4, #112]	; 0x70
 8004512:	e7b1      	b.n	8004478 <HAL_SD_InitCard+0x13c>
 8004514:	422580a0 	.word	0x422580a0

08004518 <HAL_SD_Init>:
{
 8004518:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800451a:	4604      	mov	r4, r0
 800451c:	b1a0      	cbz	r0, 8004548 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800451e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8004522:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004526:	b913      	cbnz	r3, 800452e <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8004528:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800452a:	f004 f9eb 	bl	8008904 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800452e:	2303      	movs	r3, #3
 8004530:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8004534:	4620      	mov	r0, r4
 8004536:	f7ff ff01 	bl	800433c <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800453a:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 800453c:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800453e:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004540:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004542:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004546:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004548:	2001      	movs	r0, #1
}
 800454a:	bd10      	pop	{r4, pc}

0800454c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800454c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800454e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004550:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004552:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004554:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004556:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004558:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800455a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800455c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800455e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004560:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004562:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004564:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004566:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004568:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800456a:	61cb      	str	r3, [r1, #28]
}
 800456c:	2000      	movs	r0, #0
 800456e:	4770      	bx	lr

08004570 <HAL_SD_ConfigWideBusOperation>:
{
 8004570:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8004572:	2303      	movs	r3, #3
 8004574:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004578:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800457a:	2b03      	cmp	r3, #3
{
 800457c:	b08a      	sub	sp, #40	; 0x28
 800457e:	4604      	mov	r4, r0
 8004580:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004582:	d002      	beq.n	800458a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004584:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004588:	d103      	bne.n	8004592 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800458a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	e056      	b.n	8004640 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004592:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004596:	d12d      	bne.n	80045f4 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0U, 0U};
 8004598:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800459a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 800459c:	9104      	str	r1, [sp, #16]
 800459e:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045a0:	f000 fe11 	bl	80051c6 <SDIO_GetResponse>
 80045a4:	0180      	lsls	r0, r0, #6
 80045a6:	d420      	bmi.n	80045ea <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 80045a8:	a904      	add	r1, sp, #16
 80045aa:	4620      	mov	r0, r4
 80045ac:	f7ff fbe4 	bl	8003d78 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80045b0:	b960      	cbnz	r0, 80045cc <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045b2:	9b05      	ldr	r3, [sp, #20]
 80045b4:	0359      	lsls	r1, r3, #13
 80045b6:	d51a      	bpl.n	80045ee <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045b8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	0409      	lsls	r1, r1, #16
 80045be:	f000 ffbb 	bl	8005538 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80045c2:	b918      	cbnz	r0, 80045cc <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80045c4:	2102      	movs	r1, #2
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	f001 f8ae 	bl	8005728 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80045cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ce:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80045d0:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80045d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	d035      	beq.n	8004644 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 80045de:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045e2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80045e6:	b00a      	add	sp, #40	; 0x28
 80045e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045ea:	4630      	mov	r0, r6
 80045ec:	e7ee      	b.n	80045cc <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80045f2:	e7eb      	b.n	80045cc <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80045f4:	bb09      	cbnz	r1, 800463a <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045f6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80045f8:	9104      	str	r1, [sp, #16]
 80045fa:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045fc:	f000 fde3 	bl	80051c6 <SDIO_GetResponse>
 8004600:	0182      	lsls	r2, r0, #6
 8004602:	d414      	bmi.n	800462e <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8004604:	a904      	add	r1, sp, #16
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff fbb6 	bl	8003d78 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800460c:	b960      	cbnz	r0, 8004628 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800460e:	9b05      	ldr	r3, [sp, #20]
 8004610:	03db      	lsls	r3, r3, #15
 8004612:	d50f      	bpl.n	8004634 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004614:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004616:	6820      	ldr	r0, [r4, #0]
 8004618:	0409      	lsls	r1, r1, #16
 800461a:	f000 ff8d 	bl	8005538 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800461e:	b918      	cbnz	r0, 8004628 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004620:	4601      	mov	r1, r0
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	f001 f880 	bl	8005728 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8004628:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800462a:	4308      	orrs	r0, r1
 800462c:	e7d0      	b.n	80045d0 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800462e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004632:	e7f9      	b.n	8004628 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004634:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004638:	e7f6      	b.n	8004628 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800463a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800463c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004640:	63a3      	str	r3, [r4, #56]	; 0x38
 8004642:	e7c6      	b.n	80045d2 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004644:	6863      	ldr	r3, [r4, #4]
 8004646:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004648:	68a3      	ldr	r3, [r4, #8]
 800464a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800464c:	68e3      	ldr	r3, [r4, #12]
 800464e:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004650:	6963      	ldr	r3, [r4, #20]
 8004652:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004654:	69a3      	ldr	r3, [r4, #24]
 8004656:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 8004658:	9607      	str	r6, [sp, #28]
    SDIO_Init(hsd->Instance, Init);
 800465a:	ab0a      	add	r3, sp, #40	; 0x28
 800465c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004660:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004664:	ab04      	add	r3, sp, #16
 8004666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	f000 fd6d 	bl	8005148 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 800466e:	2301      	movs	r3, #1
 8004670:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004674:	4628      	mov	r0, r5
 8004676:	e7b6      	b.n	80045e6 <HAL_SD_ConfigWideBusOperation+0x76>

08004678 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004678:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800467a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800467c:	0409      	lsls	r1, r1, #16
{
 800467e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004680:	6800      	ldr	r0, [r0, #0]
 8004682:	f001 f821 	bl	80056c8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8004686:	4601      	mov	r1, r0
 8004688:	b928      	cbnz	r0, 8004696 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800468a:	6820      	ldr	r0, [r4, #0]
 800468c:	f000 fd9b 	bl	80051c6 <SDIO_GetResponse>
  return cardstate;
 8004690:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8004694:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8004696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004698:	4319      	orrs	r1, r3
 800469a:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800469c:	2000      	movs	r0, #0
 800469e:	e7f7      	b.n	8004690 <HAL_SD_GetCardState+0x18>

080046a0 <SD_DMATxAbort>:
{
 80046a0:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmatx != NULL)
 80046a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046a6:	b10b      	cbz	r3, 80046ac <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 80046ac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80046ae:	b9c5      	cbnz	r5, 80046e2 <SD_DMATxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ffe1 	bl	8004678 <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046b6:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 80046b8:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046ba:	b2c0      	uxtb	r0, r0
 80046bc:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046be:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046c4:	d80d      	bhi.n	80046e2 <SD_DMATxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	f000 fea4 	bl	8005414 <SDMMC_CmdStopTransfer>
 80046cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ce:	4318      	orrs	r0, r3
 80046d0:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80046d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80046d4:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80046d6:	b113      	cbz	r3, 80046de <SD_DMATxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 80046d8:	f7ff fd50 	bl	800417c <HAL_SD_AbortCallback>
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 80046de:	f7ff fd4c 	bl	800417a <HAL_SD_ErrorCallback>
 80046e2:	bd38      	pop	{r3, r4, r5, pc}

080046e4 <SD_DMARxAbort>:
{
 80046e4:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046e6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmarx != NULL)
 80046e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046ea:	b10b      	cbz	r3, 80046f0 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 80046f0:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80046f2:	b9c5      	cbnz	r5, 8004726 <SD_DMARxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 80046f4:	4620      	mov	r0, r4
 80046f6:	f7ff ffbf 	bl	8004678 <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046fa:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 80046fc:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046fe:	b2c0      	uxtb	r0, r0
 8004700:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004702:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004704:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004708:	d80d      	bhi.n	8004726 <SD_DMARxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800470a:	6820      	ldr	r0, [r4, #0]
 800470c:	f000 fe82 	bl	8005414 <SDMMC_CmdStopTransfer>
 8004710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004712:	4318      	orrs	r0, r3
 8004714:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004716:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8004718:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800471a:	b113      	cbz	r3, 8004722 <SD_DMARxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 800471c:	f7ff fd2e 	bl	800417c <HAL_SD_AbortCallback>
 8004720:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8004722:	f7ff fd2a 	bl	800417a <HAL_SD_ErrorCallback>
 8004726:	bd38      	pop	{r3, r4, r5, pc}

08004728 <HAL_SD_IRQHandler>:
{
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004730:	05da      	lsls	r2, r3, #23
 8004732:	d54f      	bpl.n	80047d4 <HAL_SD_IRQHandler+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8004734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004738:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800473a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800473c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004740:	f023 0302 	bic.w	r3, r3, #2
 8004744:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004748:	f013 0f08 	tst.w	r3, #8
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800474c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800474e:	d01e      	beq.n	800478e <HAL_SD_IRQHandler+0x66>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004750:	079b      	lsls	r3, r3, #30
 8004752:	d402      	bmi.n	800475a <HAL_SD_IRQHandler+0x32>
 8004754:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004756:	069e      	lsls	r6, r3, #26
 8004758:	d508      	bpl.n	800476c <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800475a:	f000 fe5b 	bl	8005414 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800475e:	b128      	cbz	r0, 800476c <HAL_SD_IRQHandler+0x44>
          hsd->ErrorCode |= errorstate;
 8004760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004762:	4318      	orrs	r0, r3
 8004764:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004766:	4620      	mov	r0, r4
 8004768:	f7ff fd07 	bl	800417a <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004774:	2301      	movs	r3, #1
 8004776:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800477a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800477c:	07dd      	lsls	r5, r3, #31
        HAL_SD_RxCpltCallback(hsd);
 800477e:	4620      	mov	r0, r4
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004780:	d402      	bmi.n	8004788 <HAL_SD_IRQHandler+0x60>
 8004782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004784:	079c      	lsls	r4, r3, #30
 8004786:	d522      	bpl.n	80047ce <HAL_SD_IRQHandler+0xa6>
        HAL_SD_RxCpltCallback(hsd);
 8004788:	f7ff fcf6 	bl	8004178 <HAL_SD_RxCpltCallback>
 800478c:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800478e:	0619      	lsls	r1, r3, #24
 8004790:	f140 80a5 	bpl.w	80048de <HAL_SD_IRQHandler+0x1b6>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004794:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004796:	069a      	lsls	r2, r3, #26
 8004798:	d508      	bpl.n	80047ac <HAL_SD_IRQHandler+0x84>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800479a:	f000 fe3b 	bl	8005414 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800479e:	b128      	cbz	r0, 80047ac <HAL_SD_IRQHandler+0x84>
          hsd->ErrorCode |= errorstate;
 80047a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047a2:	4318      	orrs	r0, r3
 80047a4:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7ff fce7 	bl	800417a <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80047ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047ae:	07db      	lsls	r3, r3, #31
 80047b0:	f100 8095 	bmi.w	80048de <HAL_SD_IRQHandler+0x1b6>
 80047b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047b6:	079e      	lsls	r6, r3, #30
 80047b8:	f100 8091 	bmi.w	80048de <HAL_SD_IRQHandler+0x1b6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047c0:	f023 0308 	bic.w	r3, r3, #8
 80047c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7ff fcd2 	bl	8004176 <HAL_SD_TxCpltCallback>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80047d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047d6:	045d      	lsls	r5, r3, #17
 80047d8:	d510      	bpl.n	80047fc <HAL_SD_IRQHandler+0xd4>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80047da:	6a25      	ldr	r5, [r4, #32]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80047dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047e0:	6383      	str	r3, [r0, #56]	; 0x38
 80047e2:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 80047e6:	4629      	mov	r1, r5
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	3504      	adds	r5, #4
 80047ec:	f000 fccb 	bl	8005186 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 80047f0:	42ae      	cmp	r6, r5
 80047f2:	d1f8      	bne.n	80047e6 <HAL_SD_IRQHandler+0xbe>
  }
  
  hsd->pTxBuffPtr += 8U;
 80047f4:	6a23      	ldr	r3, [r4, #32]
 80047f6:	3320      	adds	r3, #32
 80047f8:	6223      	str	r3, [r4, #32]
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 80047fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047fe:	0419      	lsls	r1, r3, #16
 8004800:	d510      	bpl.n	8004824 <HAL_SD_IRQHandler+0xfc>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8004802:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8004804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004808:	1f2e      	subs	r6, r5, #4
 800480a:	6383      	str	r3, [r0, #56]	; 0x38
 800480c:	351c      	adds	r5, #28
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	f000 fcb6 	bl	8005180 <SDIO_ReadFIFO>
 8004814:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0U; count < 8U; count++)
 8004818:	42b5      	cmp	r5, r6
 800481a:	d1f8      	bne.n	800480e <HAL_SD_IRQHandler+0xe6>
  hsd->pRxBuffPtr += 8U;
 800481c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800481e:	3320      	adds	r3, #32
 8004820:	62a3      	str	r3, [r4, #40]	; 0x28
 8004822:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8004824:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004826:	f240 233a 	movw	r3, #570	; 0x23a
 800482a:	421a      	tst	r2, r3
 800482c:	d057      	beq.n	80048de <HAL_SD_IRQHandler+0x1b6>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800482e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004830:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004832:	bf42      	ittt	mi
 8004834:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8004836:	f043 0302 	orrmi.w	r3, r3, #2
 800483a:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800483c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800483e:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8004840:	bf42      	ittt	mi
 8004842:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8004844:	f043 0308 	orrmi.w	r3, r3, #8
 8004848:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800484a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800484c:	069e      	lsls	r6, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800484e:	bf42      	ittt	mi
 8004850:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8004852:	f043 0320 	orrmi.w	r3, r3, #32
 8004856:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8004858:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800485a:	06dd      	lsls	r5, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800485c:	bf42      	ittt	mi
 800485e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8004860:	f043 0310 	orrmi.w	r3, r3, #16
 8004864:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8004866:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004868:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800486a:	bf42      	ittt	mi
 800486c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 800486e:	f043 0308 	orrmi.w	r3, r3, #8
 8004872:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8004874:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004878:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800487a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800487c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004880:	f023 0302 	bic.w	r3, r3, #2
 8004884:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004886:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004888:	061a      	lsls	r2, r3, #24
 800488a:	d51f      	bpl.n	80048cc <HAL_SD_IRQHandler+0x1a4>
      if(hsd->hdmatx != NULL)
 800488c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800488e:	b148      	cbz	r0, 80048a4 <HAL_SD_IRQHandler+0x17c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_SD_IRQHandler+0x1b8>)
 8004892:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004894:	f7fe fe0c 	bl	80034b0 <HAL_DMA_Abort_IT>
 8004898:	b308      	cbz	r0, 80048de <HAL_SD_IRQHandler+0x1b6>
          SD_DMATxAbort(hsd->hdmatx);
 800489a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 800489c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMATxAbort(hsd->hdmatx);
 80048a0:	f7ff befe 	b.w	80046a0 <SD_DMATxAbort>
      else if(hsd->hdmarx != NULL)
 80048a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80048a6:	b148      	cbz	r0, 80048bc <HAL_SD_IRQHandler+0x194>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <HAL_SD_IRQHandler+0x1bc>)
 80048aa:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80048ac:	f7fe fe00 	bl	80034b0 <HAL_DMA_Abort_IT>
 80048b0:	b1a8      	cbz	r0, 80048de <HAL_SD_IRQHandler+0x1b6>
          SD_DMARxAbort(hsd->hdmarx);
 80048b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80048b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMARxAbort(hsd->hdmarx);
 80048b8:	f7ff bf14 	b.w	80046e4 <SD_DMARxAbort>
        hsd->State = HAL_SD_STATE_READY;
 80048bc:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048be:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80048c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80048c4:	4620      	mov	r0, r4
 80048c6:	f7ff fc59 	bl	800417c <HAL_SD_AbortCallback>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80048cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048ce:	071b      	lsls	r3, r3, #28
 80048d0:	d505      	bpl.n	80048de <HAL_SD_IRQHandler+0x1b6>
      hsd->State = HAL_SD_STATE_READY;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80048d8:	4620      	mov	r0, r4
 80048da:	f7ff fc4e 	bl	800417a <HAL_SD_ErrorCallback>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	080046a1 	.word	0x080046a1
 80048e4:	080046e5 	.word	0x080046e5

080048e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048e8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80048ea:	4604      	mov	r4, r0
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d036      	beq.n	800495e <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80048f4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80048f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048fc:	b91b      	cbnz	r3, 8004906 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048fe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004902:	f004 f87b 	bl	80089fc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004906:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004908:	68a0      	ldr	r0, [r4, #8]
 800490a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800490c:	2302      	movs	r3, #2
 800490e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004912:	680b      	ldr	r3, [r1, #0]
 8004914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004918:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800491a:	6863      	ldr	r3, [r4, #4]
 800491c:	4303      	orrs	r3, r0
 800491e:	68e0      	ldr	r0, [r4, #12]
 8004920:	4303      	orrs	r3, r0
 8004922:	6920      	ldr	r0, [r4, #16]
 8004924:	4303      	orrs	r3, r0
 8004926:	6960      	ldr	r0, [r4, #20]
 8004928:	4303      	orrs	r3, r0
 800492a:	69e0      	ldr	r0, [r4, #28]
 800492c:	4303      	orrs	r3, r0
 800492e:	6a20      	ldr	r0, [r4, #32]
 8004930:	4303      	orrs	r3, r0
 8004932:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004934:	4303      	orrs	r3, r0
 8004936:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800493a:	4303      	orrs	r3, r0
 800493c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800493e:	0c12      	lsrs	r2, r2, #16
 8004940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004942:	f002 0204 	and.w	r2, r2, #4
 8004946:	431a      	orrs	r2, r3
 8004948:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800494a:	69cb      	ldr	r3, [r1, #28]
 800494c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004950:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004952:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004956:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004958:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 800495c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800495e:	2001      	movs	r0, #1
}
 8004960:	bd10      	pop	{r4, pc}

08004962 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004962:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004964:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004966:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004968:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 800496c:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800496e:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004970:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004972:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004976:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004978:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800497a:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800497c:	d021      	beq.n	80049c2 <TIM_SlaveTimer_SetConfig+0x60>
 800497e:	d802      	bhi.n	8004986 <TIM_SlaveTimer_SetConfig+0x24>
 8004980:	2840      	cmp	r0, #64	; 0x40
 8004982:	d010      	beq.n	80049a6 <TIM_SlaveTimer_SetConfig+0x44>
 8004984:	bd30      	pop	{r4, r5, pc}
 8004986:	2860      	cmp	r0, #96	; 0x60
 8004988:	d02d      	beq.n	80049e6 <TIM_SlaveTimer_SetConfig+0x84>
 800498a:	2870      	cmp	r0, #112	; 0x70
 800498c:	d13d      	bne.n	8004a0a <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800498e:	68ca      	ldr	r2, [r1, #12]
 8004990:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004992:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004994:	6909      	ldr	r1, [r1, #16]
 8004996:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004998:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800499c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80049a0:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 80049a6:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80049a8:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 80049b2:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049b8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80049bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 80049be:	6218      	str	r0, [r3, #32]
    break;
 80049c0:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c2:	6888      	ldr	r0, [r1, #8]
 80049c4:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80049c6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c8:	6a1c      	ldr	r4, [r3, #32]
 80049ca:	f024 0401 	bic.w	r4, r4, #1
 80049ce:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80049d0:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049da:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80049de:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80049e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e2:	6219      	str	r1, [r3, #32]
 80049e4:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e8:	688c      	ldr	r4, [r1, #8]
 80049ea:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ec:	f020 0010 	bic.w	r0, r0, #16
 80049f0:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80049f4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fe:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a02:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004a06:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	621a      	str	r2, [r3, #32]
 8004a0a:	bd30      	pop	{r4, r5, pc}

08004a0c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a0c:	6803      	ldr	r3, [r0, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	2000      	movs	r0, #0
 8004a20:	4770      	bx	lr

08004a22 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a22:	6803      	ldr	r3, [r0, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8004a2c:	6a19      	ldr	r1, [r3, #32]
 8004a2e:	f241 1211 	movw	r2, #4369	; 0x1111
 8004a32:	4211      	tst	r1, r2
 8004a34:	d108      	bne.n	8004a48 <HAL_TIM_Base_Stop_IT+0x26>
 8004a36:	6a19      	ldr	r1, [r3, #32]
 8004a38:	f240 4244 	movw	r2, #1092	; 0x444
 8004a3c:	4211      	tst	r1, r2
 8004a3e:	bf02      	ittt	eq
 8004a40:	681a      	ldreq	r2, [r3, #0]
 8004a42:	f022 0201 	biceq.w	r2, r2, #1
 8004a46:	601a      	streq	r2, [r3, #0]
}
 8004a48:	2000      	movs	r0, #0
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_SlaveConfigSynchronization>:
{
 8004a4c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004a4e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004a52:	2b01      	cmp	r3, #1
{
 8004a54:	4604      	mov	r4, r0
 8004a56:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8004a5a:	d015      	beq.n	8004a88 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8004a5c:	2501      	movs	r5, #1
 8004a5e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8004a62:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8004a66:	f7ff ff7c 	bl	8004962 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a72:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004a74:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8004a76:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004a78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a7c:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004a7e:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8004a82:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004a88:	4618      	mov	r0, r3
} 
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}

08004a8c <HAL_TIM_PeriodElapsedCallback>:
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_OC_DelayElapsedCallback>:
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIM_IC_CaptureCallback>:
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIM_TriggerCallback>:
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a96:	6803      	ldr	r3, [r0, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	0791      	lsls	r1, r2, #30
{
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aa0:	d50e      	bpl.n	8004ac0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	0792      	lsls	r2, r2, #30
 8004aa6:	d50b      	bpl.n	8004ac0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa8:	f06f 0202 	mvn.w	r2, #2
 8004aac:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aae:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab0:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab4:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab6:	d077      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	f7ff ffea 	bl	8004a90 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abc:	2300      	movs	r3, #0
 8004abe:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	0750      	lsls	r0, r2, #29
 8004ac6:	d510      	bpl.n	8004aea <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	0751      	lsls	r1, r2, #29
 8004acc:	d50d      	bpl.n	8004aea <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ace:	f06f 0204 	mvn.w	r2, #4
 8004ad2:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004adc:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae0:	d068      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	f7ff ffd5 	bl	8004a90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	0712      	lsls	r2, r2, #28
 8004af0:	d50f      	bpl.n	8004b12 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	0710      	lsls	r0, r2, #28
 8004af6:	d50c      	bpl.n	8004b12 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af8:	f06f 0208 	mvn.w	r2, #8
 8004afc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004afe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b00:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b02:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b04:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b08:	d05a      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	f7ff ffc1 	bl	8004a90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	06d2      	lsls	r2, r2, #27
 8004b18:	d510      	bpl.n	8004b3c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	06d0      	lsls	r0, r2, #27
 8004b1e:	d50d      	bpl.n	8004b3c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b20:	f06f 0210 	mvn.w	r2, #16
 8004b24:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b26:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b28:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b2a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004b30:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b32:	d04b      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b34:	f7ff ffac 	bl	8004a90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	07d1      	lsls	r1, r2, #31
 8004b42:	d508      	bpl.n	8004b56 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	07d2      	lsls	r2, r2, #31
 8004b48:	d505      	bpl.n	8004b56 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4a:	f06f 0201 	mvn.w	r2, #1
 8004b4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7ff ff9b 	bl	8004a8c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	0610      	lsls	r0, r2, #24
 8004b5c:	d508      	bpl.n	8004b70 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	0611      	lsls	r1, r2, #24
 8004b62:	d505      	bpl.n	8004b70 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 f8d7 	bl	8004d1e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	0652      	lsls	r2, r2, #25
 8004b76:	d508      	bpl.n	8004b8a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	0650      	lsls	r0, r2, #25
 8004b7c:	d505      	bpl.n	8004b8a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b82:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7ff ff85 	bl	8004a94 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	0691      	lsls	r1, r2, #26
 8004b90:	d522      	bpl.n	8004bd8 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	0692      	lsls	r2, r2, #26
 8004b96:	d51f      	bpl.n	8004bd8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b98:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8004b9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b9e:	611a      	str	r2, [r3, #16]
}
 8004ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8004ba4:	f000 b8ba 	b.w	8004d1c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba8:	f7ff ff71 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff ff70 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bb2:	e783      	b.n	8004abc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb4:	f7ff ff6b 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff ff6a 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bbe:	e792      	b.n	8004ae6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc0:	f7ff ff65 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7ff ff64 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bca:	e7a0      	b.n	8004b0e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bcc:	f7ff ff5f 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7ff ff5e 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bd6:	e7af      	b.n	8004b38 <HAL_TIM_IRQHandler+0xa2>
 8004bd8:	bd10      	pop	{r4, pc}
	...

08004bdc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004bdc:	4a2e      	ldr	r2, [pc, #184]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8004bde:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004be0:	4290      	cmp	r0, r2
 8004be2:	d012      	beq.n	8004c0a <TIM_Base_SetConfig+0x2e>
 8004be4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004be8:	d00f      	beq.n	8004c0a <TIM_Base_SetConfig+0x2e>
 8004bea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004bee:	4290      	cmp	r0, r2
 8004bf0:	d00b      	beq.n	8004c0a <TIM_Base_SetConfig+0x2e>
 8004bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bf6:	4290      	cmp	r0, r2
 8004bf8:	d007      	beq.n	8004c0a <TIM_Base_SetConfig+0x2e>
 8004bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bfe:	4290      	cmp	r0, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0x2e>
 8004c02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c06:	4290      	cmp	r0, r2
 8004c08:	d11d      	bne.n	8004c46 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8004c0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c10:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004c12:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c14:	4290      	cmp	r0, r2
 8004c16:	d104      	bne.n	8004c22 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c18:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	e028      	b.n	8004c74 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004c22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c26:	d0f7      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c28:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <TIM_Base_SetConfig+0xc0>)
 8004c2a:	4290      	cmp	r0, r2
 8004c2c:	d0f4      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c32:	4290      	cmp	r0, r2
 8004c34:	d0f0      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c3a:	4290      	cmp	r0, r2
 8004c3c:	d0ec      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c42:	4290      	cmp	r0, r2
 8004c44:	d0e8      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c46:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <TIM_Base_SetConfig+0xc4>)
 8004c48:	4290      	cmp	r0, r2
 8004c4a:	d0e5      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c50:	4290      	cmp	r0, r2
 8004c52:	d0e1      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c58:	4290      	cmp	r0, r2
 8004c5a:	d0dd      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c5c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004c60:	4290      	cmp	r0, r2
 8004c62:	d0d9      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c68:	4290      	cmp	r0, r2
 8004c6a:	d0d5      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
 8004c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c70:	4290      	cmp	r0, r2
 8004c72:	d0d1      	beq.n	8004c18 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8004c74:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c76:	688b      	ldr	r3, [r1, #8]
 8004c78:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004c7a:	680b      	ldr	r3, [r1, #0]
 8004c7c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <TIM_Base_SetConfig+0xbc>)
 8004c80:	4298      	cmp	r0, r3
 8004c82:	d006      	beq.n	8004c92 <TIM_Base_SetConfig+0xb6>
 8004c84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c88:	4298      	cmp	r0, r3
 8004c8a:	d002      	beq.n	8004c92 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	6143      	str	r3, [r0, #20]
}
 8004c90:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	6303      	str	r3, [r0, #48]	; 0x30
 8004c96:	e7f9      	b.n	8004c8c <TIM_Base_SetConfig+0xb0>
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40014000 	.word	0x40014000

08004ca4 <HAL_TIM_Base_Init>:
{ 
 8004ca4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	b1a0      	cbz	r0, 8004cd4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8004caa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004cae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cb2:	b91b      	cbnz	r3, 8004cbc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004cb4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004cb8:	f003 ff0e 	bl	8008ad8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	1d21      	adds	r1, r4, #4
 8004cc6:	f7ff ff89 	bl	8004bdc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004cd4:	2001      	movs	r0, #1
}
 8004cd6:	bd10      	pop	{r4, pc}

08004cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8004cd8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004cdc:	2b01      	cmp	r3, #1
{
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8004ce4:	d018      	beq.n	8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004cea:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004cec:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004cee:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004cf0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004cf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cf6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	4322      	orrs	r2, r4
 8004cfc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d04:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8004d12:	2300      	movs	r3, #0
 8004d14:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8004d18:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <HAL_TIMEx_CommutationCallback>:
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	4770      	bx	lr

08004d20 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8004d24:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8004d26:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8004d28:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d2a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8004d2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8004d30:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8004d32:	6133      	str	r3, [r6, #16]
{
 8004d34:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d36:	6883      	ldr	r3, [r0, #8]
 8004d38:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8004d3a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d3c:	4303      	orrs	r3, r0
 8004d3e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004d40:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d44:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004d46:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004d4e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8004d50:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8004d52:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8004d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8004d58:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8004d5e:	6173      	str	r3, [r6, #20]
 8004d60:	4b7a      	ldr	r3, [pc, #488]	; (8004f4c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d62:	d17c      	bne.n	8004e5e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d64:	429e      	cmp	r6, r3
 8004d66:	d003      	beq.n	8004d70 <UART_SetConfig+0x50>
 8004d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d6c:	429e      	cmp	r6, r3
 8004d6e:	d144      	bne.n	8004dfa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004d70:	f7fe fff2 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004d74:	2519      	movs	r5, #25
 8004d76:	fb05 f300 	mul.w	r3, r5, r0
 8004d7a:	6860      	ldr	r0, [r4, #4]
 8004d7c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004d80:	0040      	lsls	r0, r0, #1
 8004d82:	fbb3 f3f0 	udiv	r3, r3, r0
 8004d86:	fbb3 f3f9 	udiv	r3, r3, r9
 8004d8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d8e:	f7fe ffe3 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	4368      	muls	r0, r5
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	fbb0 f7f3 	udiv	r7, r0, r3
 8004d9c:	f7fe ffdc 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004da0:	6863      	ldr	r3, [r4, #4]
 8004da2:	4368      	muls	r0, r5
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004daa:	fbb3 f3f9 	udiv	r3, r3, r9
 8004dae:	fb09 7313 	mls	r3, r9, r3, r7
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	3332      	adds	r3, #50	; 0x32
 8004db6:	fbb3 f3f9 	udiv	r3, r3, r9
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8004dc0:	f7fe ffca 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004dc4:	6862      	ldr	r2, [r4, #4]
 8004dc6:	4368      	muls	r0, r5
 8004dc8:	0052      	lsls	r2, r2, #1
 8004dca:	fbb0 faf2 	udiv	sl, r0, r2
 8004dce:	f7fe ffc3 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	4368      	muls	r0, r5
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ddc:	fbb3 f3f9 	udiv	r3, r3, r9
 8004de0:	fb09 a313 	mls	r3, r9, r3, sl
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	3332      	adds	r3, #50	; 0x32
 8004de8:	fbb3 f3f9 	udiv	r3, r3, r9
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004df2:	443b      	add	r3, r7
 8004df4:	60b3      	str	r3, [r6, #8]
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004dfa:	f7fe ff9d 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004dfe:	2519      	movs	r5, #25
 8004e00:	fb05 f300 	mul.w	r3, r5, r0
 8004e04:	6860      	ldr	r0, [r4, #4]
 8004e06:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004e0a:	0040      	lsls	r0, r0, #1
 8004e0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8004e10:	fbb3 f3f9 	udiv	r3, r3, r9
 8004e14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e18:	f7fe ff8e 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	4368      	muls	r0, r5
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fbb0 f7f3 	udiv	r7, r0, r3
 8004e26:	f7fe ff87 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004e2a:	6863      	ldr	r3, [r4, #4]
 8004e2c:	4368      	muls	r0, r5
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e34:	fbb3 f3f9 	udiv	r3, r3, r9
 8004e38:	fb09 7313 	mls	r3, r9, r3, r7
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	3332      	adds	r3, #50	; 0x32
 8004e40:	fbb3 f3f9 	udiv	r3, r3, r9
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8004e4a:	f7fe ff75 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004e4e:	6862      	ldr	r2, [r4, #4]
 8004e50:	4368      	muls	r0, r5
 8004e52:	0052      	lsls	r2, r2, #1
 8004e54:	fbb0 faf2 	udiv	sl, r0, r2
 8004e58:	f7fe ff6e 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004e5c:	e7b9      	b.n	8004dd2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e5e:	429e      	cmp	r6, r3
 8004e60:	d002      	beq.n	8004e68 <UART_SetConfig+0x148>
 8004e62:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <UART_SetConfig+0x230>)
 8004e64:	429e      	cmp	r6, r3
 8004e66:	d140      	bne.n	8004eea <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004e68:	f7fe ff76 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004e6c:	6867      	ldr	r7, [r4, #4]
 8004e6e:	2519      	movs	r5, #25
 8004e70:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004e74:	fb05 f300 	mul.w	r3, r5, r0
 8004e78:	00bf      	lsls	r7, r7, #2
 8004e7a:	fbb3 f3f7 	udiv	r3, r3, r7
 8004e7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8004e82:	011f      	lsls	r7, r3, #4
 8004e84:	f7fe ff68 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004e88:	6863      	ldr	r3, [r4, #4]
 8004e8a:	4368      	muls	r0, r5
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	fbb0 f8f3 	udiv	r8, r0, r3
 8004e92:	f7fe ff61 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	4368      	muls	r0, r5
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea0:	fbb3 f3f9 	udiv	r3, r3, r9
 8004ea4:	fb09 8313 	mls	r3, r9, r3, r8
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	3332      	adds	r3, #50	; 0x32
 8004eac:	fbb3 f3f9 	udiv	r3, r3, r9
 8004eb0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8004eb4:	f7fe ff50 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004eb8:	6862      	ldr	r2, [r4, #4]
 8004eba:	4368      	muls	r0, r5
 8004ebc:	0092      	lsls	r2, r2, #2
 8004ebe:	fbb0 faf2 	udiv	sl, r0, r2
 8004ec2:	f7fe ff49 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004ec6:	6863      	ldr	r3, [r4, #4]
 8004ec8:	4368      	muls	r0, r5
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed0:	fbb3 f3f9 	udiv	r3, r3, r9
 8004ed4:	fb09 a313 	mls	r3, r9, r3, sl
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	3332      	adds	r3, #50	; 0x32
 8004edc:	fbb3 f3f9 	udiv	r3, r3, r9
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	ea43 0308 	orr.w	r3, r3, r8
 8004ee8:	e783      	b.n	8004df2 <UART_SetConfig+0xd2>
 8004eea:	f7fe ff25 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004eee:	6867      	ldr	r7, [r4, #4]
 8004ef0:	2519      	movs	r5, #25
 8004ef2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004ef6:	fb05 f300 	mul.w	r3, r5, r0
 8004efa:	00bf      	lsls	r7, r7, #2
 8004efc:	fbb3 f3f7 	udiv	r3, r3, r7
 8004f00:	fbb3 f3f9 	udiv	r3, r3, r9
 8004f04:	011f      	lsls	r7, r3, #4
 8004f06:	f7fe ff17 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	4368      	muls	r0, r5
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	fbb0 f8f3 	udiv	r8, r0, r3
 8004f14:	f7fe ff10 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	4368      	muls	r0, r5
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f22:	fbb3 f3f9 	udiv	r3, r3, r9
 8004f26:	fb09 8313 	mls	r3, r9, r3, r8
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	3332      	adds	r3, #50	; 0x32
 8004f2e:	fbb3 f3f9 	udiv	r3, r3, r9
 8004f32:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8004f36:	f7fe feff 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	4368      	muls	r0, r5
 8004f3e:	0092      	lsls	r2, r2, #2
 8004f40:	fbb0 faf2 	udiv	sl, r0, r2
 8004f44:	f7fe fef8 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8004f48:	e7bd      	b.n	8004ec6 <UART_SetConfig+0x1a6>
 8004f4a:	bf00      	nop
 8004f4c:	40011000 	.word	0x40011000
 8004f50:	40011400 	.word	0x40011400

08004f54 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	4604      	mov	r4, r0
 8004f58:	460e      	mov	r6, r1
 8004f5a:	4617      	mov	r7, r2
 8004f5c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004f5e:	6821      	ldr	r1, [r4, #0]
 8004f60:	680b      	ldr	r3, [r1, #0]
 8004f62:	ea36 0303 	bics.w	r3, r6, r3
 8004f66:	d101      	bne.n	8004f6c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8004f68:	2000      	movs	r0, #0
}
 8004f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8004f6c:	1c6b      	adds	r3, r5, #1
 8004f6e:	d0f7      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004f70:	b995      	cbnz	r5, 8004f98 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004f84:	2320      	movs	r3, #32
 8004f86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8004f94:	2003      	movs	r0, #3
 8004f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004f98:	f7fd ff58 	bl	8002e4c <HAL_GetTick>
 8004f9c:	1bc0      	subs	r0, r0, r7
 8004f9e:	4285      	cmp	r5, r0
 8004fa0:	d2dd      	bcs.n	8004f5e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8004fa2:	e7e6      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08004fa4 <HAL_UART_Init>:
{
 8004fa4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	b340      	cbz	r0, 8004ffc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004faa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004fae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004fb2:	b91b      	cbnz	r3, 8004fbc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004fb4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004fb8:	f003 fdbe 	bl	8008b38 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004fbc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004fbe:	2324      	movs	r3, #36	; 0x24
 8004fc0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004fc4:	68d3      	ldr	r3, [r2, #12]
 8004fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7ff fea7 	bl	8004d20 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8004fee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004ff2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004ff6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8004ffa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ffc:	2001      	movs	r0, #1
}
 8004ffe:	bd10      	pop	{r4, pc}

08005000 <HAL_UART_Transmit>:
{
 8005000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005004:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8005006:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800500a:	2b20      	cmp	r3, #32
{
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8005012:	d14f      	bne.n	80050b4 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8005014:	2900      	cmp	r1, #0
 8005016:	d04a      	beq.n	80050ae <HAL_UART_Transmit+0xae>
 8005018:	2a00      	cmp	r2, #0
 800501a:	d048      	beq.n	80050ae <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800501c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005020:	2b01      	cmp	r3, #1
 8005022:	d047      	beq.n	80050b4 <HAL_UART_Transmit+0xb4>
 8005024:	2301      	movs	r3, #1
 8005026:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502a:	2300      	movs	r3, #0
 800502c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502e:	2321      	movs	r3, #33	; 0x21
 8005030:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005034:	f7fd ff0a 	bl	8002e4c <HAL_GetTick>
    huart->TxXferSize = Size;
 8005038:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800503c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800503e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8005042:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005044:	b29b      	uxth	r3, r3
 8005046:	b96b      	cbnz	r3, 8005064 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005048:	463b      	mov	r3, r7
 800504a:	4632      	mov	r2, r6
 800504c:	2140      	movs	r1, #64	; 0x40
 800504e:	4620      	mov	r0, r4
 8005050:	f7ff ff80 	bl	8004f54 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8005054:	b9b0      	cbnz	r0, 8005084 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8005056:	2320      	movs	r3, #32
 8005058:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800505c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8005060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8005064:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005066:	3b01      	subs	r3, #1
 8005068:	b29b      	uxth	r3, r3
 800506a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800506c:	68a3      	ldr	r3, [r4, #8]
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005072:	4632      	mov	r2, r6
 8005074:	463b      	mov	r3, r7
 8005076:	f04f 0180 	mov.w	r1, #128	; 0x80
 800507a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800507c:	d10e      	bne.n	800509c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	f7ff ff69 	bl	8004f54 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8005082:	b110      	cbz	r0, 800508a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8005084:	2003      	movs	r0, #3
 8005086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800508a:	882b      	ldrh	r3, [r5, #0]
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005094:	6923      	ldr	r3, [r4, #16]
 8005096:	b943      	cbnz	r3, 80050aa <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8005098:	3502      	adds	r5, #2
 800509a:	e7d2      	b.n	8005042 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800509c:	f7ff ff5a 	bl	8004f54 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d1ef      	bne.n	8005084 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	782a      	ldrb	r2, [r5, #0]
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	3501      	adds	r5, #1
 80050ac:	e7c9      	b.n	8005042 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80050ae:	2001      	movs	r0, #1
 80050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80050b4:	2002      	movs	r0, #2
}
 80050b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080050bc <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <SDMMC_GetCmdResp2+0x48>)
 80050be:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80050c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80050cc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80050ce:	f113 33ff 	adds.w	r3, r3, #4294967295
 80050d2:	d314      	bcc.n	80050fe <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80050d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80050d6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80050da:	d0f8      	beq.n	80050ce <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050de:	075b      	lsls	r3, r3, #29
 80050e0:	d503      	bpl.n	80050ea <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050e2:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050e4:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050ec:	f013 0301 	ands.w	r3, r3, #1
 80050f0:	d001      	beq.n	80050f6 <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050f2:	2301      	movs	r3, #1
 80050f4:	e7f6      	b.n	80050e4 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80050f6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80050fa:	6382      	str	r2, [r0, #56]	; 0x38
 80050fc:	e7f3      	b.n	80050e6 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80050fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005102:	e7f0      	b.n	80050e6 <SDMMC_GetCmdResp2+0x2a>
 8005104:	20008598 	.word	0x20008598

08005108 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <SDMMC_GetCmdResp3+0x3c>)
 800510a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	fbb3 f2f2 	udiv	r2, r3, r2
 8005114:	f241 3388 	movw	r3, #5000	; 0x1388
 8005118:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800511a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800511e:	d30e      	bcc.n	800513e <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005120:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005122:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005126:	d0f8      	beq.n	800511a <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005128:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800512a:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800512e:	bf15      	itete	ne
 8005130:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005132:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005136:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005138:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800513a:	4618      	mov	r0, r3
 800513c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800513e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005142:	4770      	bx	lr
 8005144:	20008598 	.word	0x20008598

08005148 <SDIO_Init>:
{
 8005148:	b084      	sub	sp, #16
 800514a:	b510      	push	{r4, lr}
 800514c:	ac03      	add	r4, sp, #12
 800514e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8005152:	9904      	ldr	r1, [sp, #16]
 8005154:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005156:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8005158:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 800515a:	9905      	ldr	r1, [sp, #20]
 800515c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800515e:	9906      	ldr	r1, [sp, #24]
 8005160:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8005162:	9907      	ldr	r1, [sp, #28]
 8005164:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8005166:	9908      	ldr	r1, [sp, #32]
}
 8005168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800516c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8005170:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005172:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005176:	4313      	orrs	r3, r2
 8005178:	6043      	str	r3, [r0, #4]
}
 800517a:	b004      	add	sp, #16
 800517c:	2000      	movs	r0, #0
 800517e:	4770      	bx	lr

08005180 <SDIO_ReadFIFO>:
 8005180:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8005184:	4770      	bx	lr

08005186 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8005186:	680b      	ldr	r3, [r1, #0]
 8005188:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800518c:	2000      	movs	r0, #0
 800518e:	4770      	bx	lr

08005190 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005190:	2303      	movs	r3, #3
 8005192:	6003      	str	r3, [r0, #0]
}
 8005194:	2000      	movs	r0, #0
 8005196:	4770      	bx	lr

08005198 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005198:	6800      	ldr	r0, [r0, #0]
}
 800519a:	f000 0003 	and.w	r0, r0, #3
 800519e:	4770      	bx	lr

080051a0 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80051a0:	680b      	ldr	r3, [r1, #0]
{
 80051a2:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 80051a4:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80051a6:	688c      	ldr	r4, [r1, #8]
 80051a8:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051aa:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80051ac:	4323      	orrs	r3, r4
                       Command->Response         |\
 80051ae:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80051b0:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80051b2:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051b4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80051b8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80051ba:	f022 020f 	bic.w	r2, r2, #15
 80051be:	4313      	orrs	r3, r2
 80051c0:	60c3      	str	r3, [r0, #12]
}
 80051c2:	2000      	movs	r0, #0
 80051c4:	bd10      	pop	{r4, pc}

080051c6 <SDIO_GetResponse>:
{
 80051c6:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80051c8:	3014      	adds	r0, #20
 80051ca:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80051d0:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80051d2:	9b01      	ldr	r3, [sp, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
}  
 80051d6:	b002      	add	sp, #8
 80051d8:	4770      	bx	lr
	...

080051dc <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80051dc:	4b45      	ldr	r3, [pc, #276]	; (80052f4 <SDMMC_GetCmdResp1+0x118>)
{
 80051de:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80051e6:	fbb3 f3f4 	udiv	r3, r3, r4
 80051ea:	435a      	muls	r2, r3
    if (count-- == 0U)
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d04a      	beq.n	8005286 <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80051f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80051f2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80051f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80051fa:	d0f7      	beq.n	80051ec <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80051fe:	075c      	lsls	r4, r3, #29
 8005200:	d503      	bpl.n	800520a <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005202:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005204:	6383      	str	r3, [r0, #56]	; 0x38
}
 8005206:	4618      	mov	r0, r3
 8005208:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800520a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800520c:	f013 0301 	ands.w	r3, r3, #1
 8005210:	d001      	beq.n	8005216 <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005212:	2301      	movs	r3, #1
 8005214:	e7f6      	b.n	8005204 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8005216:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	4291      	cmp	r1, r2
 800521c:	d136      	bne.n	800528c <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800521e:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005222:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005224:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005226:	f7ff ffce 	bl	80051c6 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800522a:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <SDMMC_GetCmdResp1+0x11c>)
 800522c:	4003      	ands	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0e9      	beq.n	8005206 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005232:	2800      	cmp	r0, #0
 8005234:	db2c      	blt.n	8005290 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005236:	0042      	lsls	r2, r0, #1
 8005238:	d42d      	bmi.n	8005296 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800523a:	0084      	lsls	r4, r0, #2
 800523c:	d42d      	bmi.n	800529a <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800523e:	00c1      	lsls	r1, r0, #3
 8005240:	d42d      	bmi.n	800529e <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005242:	0102      	lsls	r2, r0, #4
 8005244:	d42e      	bmi.n	80052a4 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005246:	0144      	lsls	r4, r0, #5
 8005248:	d42f      	bmi.n	80052aa <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800524a:	01c1      	lsls	r1, r0, #7
 800524c:	d430      	bmi.n	80052b0 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800524e:	0202      	lsls	r2, r0, #8
 8005250:	d431      	bmi.n	80052b6 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005252:	0244      	lsls	r4, r0, #9
 8005254:	d432      	bmi.n	80052bc <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005256:	0281      	lsls	r1, r0, #10
 8005258:	d433      	bmi.n	80052c2 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800525a:	02c2      	lsls	r2, r0, #11
 800525c:	d434      	bmi.n	80052c8 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800525e:	0344      	lsls	r4, r0, #13
 8005260:	d435      	bmi.n	80052ce <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005262:	0381      	lsls	r1, r0, #14
 8005264:	d436      	bmi.n	80052d4 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005266:	03c2      	lsls	r2, r0, #15
 8005268:	d437      	bmi.n	80052da <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800526a:	0404      	lsls	r4, r0, #16
 800526c:	d438      	bmi.n	80052e0 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800526e:	0441      	lsls	r1, r0, #17
 8005270:	d439      	bmi.n	80052e6 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005272:	0482      	lsls	r2, r0, #18
 8005274:	d43a      	bmi.n	80052ec <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005276:	f010 0f08 	tst.w	r0, #8
 800527a:	bf14      	ite	ne
 800527c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005280:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005284:	e7bf      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8005286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800528a:	e7bc      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800528c:	2301      	movs	r3, #1
 800528e:	e7ba      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005294:	e7b7      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005296:	2340      	movs	r3, #64	; 0x40
 8005298:	e7b5      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	e7b3      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800529e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052a2:	e7b0      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80052a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a8:	e7ad      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80052aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ae:	e7aa      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80052b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052b4:	e7a7      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ba:	e7a4      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052c0:	e7a1      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80052c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052c6:	e79e      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 80052c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052cc:	e79b      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80052ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052d2:	e798      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80052d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052d8:	e795      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80052da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80052de:	e792      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80052e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80052e4:	e78f      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80052e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052ea:	e78c      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 80052ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052f0:	e789      	b.n	8005206 <SDMMC_GetCmdResp1+0x2a>
 80052f2:	bf00      	nop
 80052f4:	20008598 	.word	0x20008598
 80052f8:	fdffe008 	.word	0xfdffe008

080052fc <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80052fc:	680b      	ldr	r3, [r1, #0]
{
 80052fe:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8005300:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8005302:	684b      	ldr	r3, [r1, #4]
 8005304:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005306:	68cc      	ldr	r4, [r1, #12]
 8005308:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800530a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800530c:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800530e:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8005310:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8005312:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8005314:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005316:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800531a:	4313      	orrs	r3, r2
 800531c:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800531e:	2000      	movs	r0, #0
 8005320:	bd10      	pop	{r4, pc}

08005322 <SDMMC_CmdBlockLength>:
{
 8005322:	b530      	push	{r4, r5, lr}
 8005324:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005326:	2340      	movs	r3, #64	; 0x40
 8005328:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800532a:	2300      	movs	r3, #0
{
 800532c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800532e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005330:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005332:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005334:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800533c:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800533e:	f7ff ff2f 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	4621      	mov	r1, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f7ff ff47 	bl	80051dc <SDMMC_GetCmdResp1>
}
 800534e:	b007      	add	sp, #28
 8005350:	bd30      	pop	{r4, r5, pc}

08005352 <SDMMC_CmdReadSingleBlock>:
{
 8005352:	b530      	push	{r4, r5, lr}
 8005354:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005356:	2340      	movs	r3, #64	; 0x40
 8005358:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800535a:	2300      	movs	r3, #0
{
 800535c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800535e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005360:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005362:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005364:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800536a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800536c:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800536e:	f7ff ff17 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005372:	f241 3288 	movw	r2, #5000	; 0x1388
 8005376:	4621      	mov	r1, r4
 8005378:	4628      	mov	r0, r5
 800537a:	f7ff ff2f 	bl	80051dc <SDMMC_GetCmdResp1>
}
 800537e:	b007      	add	sp, #28
 8005380:	bd30      	pop	{r4, r5, pc}

08005382 <SDMMC_CmdReadMultiBlock>:
{
 8005382:	b530      	push	{r4, r5, lr}
 8005384:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005386:	2340      	movs	r3, #64	; 0x40
 8005388:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800538a:	2300      	movs	r3, #0
{
 800538c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800538e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005390:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005392:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005394:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800539c:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800539e:	f7ff feff 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4621      	mov	r1, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7ff ff17 	bl	80051dc <SDMMC_GetCmdResp1>
}
 80053ae:	b007      	add	sp, #28
 80053b0:	bd30      	pop	{r4, r5, pc}

080053b2 <SDMMC_CmdWriteSingleBlock>:
{
 80053b2:	b530      	push	{r4, r5, lr}
 80053b4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053b6:	2340      	movs	r3, #64	; 0x40
 80053b8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053ba:	2300      	movs	r3, #0
{
 80053bc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80053be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80053c0:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053c2:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80053cc:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053ce:	f7ff fee7 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f7ff feff 	bl	80051dc <SDMMC_GetCmdResp1>
}
 80053de:	b007      	add	sp, #28
 80053e0:	bd30      	pop	{r4, r5, pc}

080053e2 <SDMMC_CmdWriteMultiBlock>:
{
 80053e2:	b530      	push	{r4, r5, lr}
 80053e4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053e6:	2340      	movs	r3, #64	; 0x40
 80053e8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053ea:	2300      	movs	r3, #0
{
 80053ec:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80053ee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80053f0:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053f2:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053f4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053fa:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80053fc:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053fe:	f7ff fecf 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005402:	f241 3288 	movw	r2, #5000	; 0x1388
 8005406:	4621      	mov	r1, r4
 8005408:	4628      	mov	r0, r5
 800540a:	f7ff fee7 	bl	80051dc <SDMMC_GetCmdResp1>
}
 800540e:	b007      	add	sp, #28
 8005410:	bd30      	pop	{r4, r5, pc}
	...

08005414 <SDMMC_CmdStopTransfer>:
{
 8005414:	b530      	push	{r4, r5, lr}
 8005416:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8005418:	2300      	movs	r3, #0
{
 800541a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 800541c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800541e:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005420:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005422:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005424:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005426:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800542a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800542c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800542e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005430:	f7ff feb6 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8005434:	4a03      	ldr	r2, [pc, #12]	; (8005444 <SDMMC_CmdStopTransfer+0x30>)
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f7ff fecf 	bl	80051dc <SDMMC_GetCmdResp1>
}
 800543e:	b007      	add	sp, #28
 8005440:	bd30      	pop	{r4, r5, pc}
 8005442:	bf00      	nop
 8005444:	05f5e100 	.word	0x05f5e100

08005448 <SDMMC_CmdSelDesel>:
{
 8005448:	b530      	push	{r4, r5, lr}
 800544a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005450:	2300      	movs	r3, #0
{
 8005452:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005454:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005456:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005458:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800545a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800545e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005460:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005462:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005464:	f7ff fe9c 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005468:	f241 3288 	movw	r2, #5000	; 0x1388
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f7ff feb4 	bl	80051dc <SDMMC_GetCmdResp1>
}
 8005474:	b007      	add	sp, #28
 8005476:	bd30      	pop	{r4, r5, pc}

08005478 <SDMMC_CmdGoIdleState>:
{
 8005478:	b510      	push	{r4, lr}
 800547a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005480:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005482:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005484:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005486:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548c:	9305      	str	r3, [sp, #20]
{
 800548e:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005490:	f7ff fe86 	bl	80051a0 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <SDMMC_CmdGoIdleState+0x4c>)
 8005496:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	fbb3 f2f2 	udiv	r2, r3, r2
 80054a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80054a4:	4353      	muls	r3, r2
    if (count-- == 0U)
 80054a6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80054aa:	d308      	bcc.n	80054be <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80054ae:	0612      	lsls	r2, r2, #24
 80054b0:	d5f9      	bpl.n	80054a6 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80054b2:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80054b6:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80054b8:	2000      	movs	r0, #0
}
 80054ba:	b006      	add	sp, #24
 80054bc:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80054be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80054c2:	e7fa      	b.n	80054ba <SDMMC_CmdGoIdleState+0x42>
 80054c4:	20008598 	.word	0x20008598

080054c8 <SDMMC_CmdOperCond>:
{
 80054c8:	b510      	push	{r4, lr}
 80054ca:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80054cc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80054d0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80054d2:	2308      	movs	r3, #8
 80054d4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054d6:	2340      	movs	r3, #64	; 0x40
 80054d8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054da:	2300      	movs	r3, #0
 80054dc:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054de:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e4:	9305      	str	r3, [sp, #20]
{
 80054e6:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e8:	f7ff fe5a 	bl	80051a0 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054ec:	4b11      	ldr	r3, [pc, #68]	; (8005534 <SDMMC_CmdOperCond+0x6c>)
 80054ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80054f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80054fc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80054fe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005502:	d314      	bcc.n	800552e <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005504:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005506:	f012 0f45 	tst.w	r2, #69	; 0x45
 800550a:	d0f8      	beq.n	80054fe <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800550c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800550e:	f012 0204 	ands.w	r2, r2, #4
 8005512:	d004      	beq.n	800551e <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005518:	2004      	movs	r0, #4
}
 800551a:	b006      	add	sp, #24
 800551c:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800551e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005520:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005524:	d0f9      	beq.n	800551a <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800552a:	4610      	mov	r0, r2
 800552c:	e7f5      	b.n	800551a <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800552e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005532:	e7f2      	b.n	800551a <SDMMC_CmdOperCond+0x52>
 8005534:	20008598 	.word	0x20008598

08005538 <SDMMC_CmdAppCommand>:
{
 8005538:	b530      	push	{r4, r5, lr}
 800553a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005540:	2300      	movs	r3, #0
{
 8005542:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005544:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005546:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005548:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800554a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800554c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005550:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005552:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005554:	f7ff fe24 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005558:	f241 3288 	movw	r2, #5000	; 0x1388
 800555c:	4621      	mov	r1, r4
 800555e:	4628      	mov	r0, r5
 8005560:	f7ff fe3c 	bl	80051dc <SDMMC_GetCmdResp1>
}
 8005564:	b007      	add	sp, #28
 8005566:	bd30      	pop	{r4, r5, pc}

08005568 <SDMMC_CmdAppOperCommand>:
{
 8005568:	b510      	push	{r4, lr}
 800556a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800556c:	2329      	movs	r3, #41	; 0x29
 800556e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005570:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005574:	2340      	movs	r3, #64	; 0x40
 8005576:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800557c:	2300      	movs	r3, #0
{
 800557e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005580:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005582:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005584:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558a:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800558c:	f7ff fe08 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005590:	4620      	mov	r0, r4
 8005592:	f7ff fdb9 	bl	8005108 <SDMMC_GetCmdResp3>
}
 8005596:	b006      	add	sp, #24
 8005598:	bd10      	pop	{r4, pc}

0800559a <SDMMC_CmdSendSCR>:
{
 800559a:	b530      	push	{r4, r5, lr}
 800559c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 800559e:	2300      	movs	r3, #0
{
 80055a0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80055a2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80055a4:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055a6:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055a8:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055b0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055b2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80055b4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055b6:	f7ff fdf3 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80055ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80055be:	4621      	mov	r1, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	f7ff fe0b 	bl	80051dc <SDMMC_GetCmdResp1>
}
 80055c6:	b007      	add	sp, #28
 80055c8:	bd30      	pop	{r4, r5, pc}

080055ca <SDMMC_CmdSendCID>:
{
 80055ca:	b510      	push	{r4, lr}
 80055cc:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 80055ce:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80055d0:	2202      	movs	r2, #2
{
 80055d2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80055d4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80055d6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055d8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055da:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055e0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055e2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055e4:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055e6:	f7ff fddb 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7ff fd66 	bl	80050bc <SDMMC_GetCmdResp2>
}
 80055f0:	b006      	add	sp, #24
 80055f2:	bd10      	pop	{r4, pc}

080055f4 <SDMMC_CmdSendCSD>:
{
 80055f4:	b510      	push	{r4, lr}
 80055f6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80055f8:	2309      	movs	r3, #9
 80055fa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055fc:	23c0      	movs	r3, #192	; 0xc0
 80055fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005600:	2300      	movs	r3, #0
{
 8005602:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005604:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005606:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005608:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800560a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800560e:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005610:	f7ff fdc6 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff fd51 	bl	80050bc <SDMMC_GetCmdResp2>
}
 800561a:	b006      	add	sp, #24
 800561c:	bd10      	pop	{r4, pc}
	...

08005620 <SDMMC_CmdSetRelAdd>:
{
 8005620:	b530      	push	{r4, r5, lr}
 8005622:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8005624:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005626:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8005628:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800562a:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800562c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800562e:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005630:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8005634:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005636:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005638:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800563a:	9305      	str	r3, [sp, #20]
{
 800563c:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800563e:	f7ff fdaf 	bl	80051a0 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <SDMMC_CmdSetRelAdd+0xa4>)
 8005644:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	fbb3 f2f2 	udiv	r2, r3, r2
 800564e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005652:	4353      	muls	r3, r2
    if (count-- == 0U)
 8005654:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005658:	d32b      	bcc.n	80056b2 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800565a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800565c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005660:	d0f8      	beq.n	8005654 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005662:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005664:	075a      	lsls	r2, r3, #29
 8005666:	d503      	bpl.n	8005670 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005668:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800566a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800566c:	b007      	add	sp, #28
 800566e:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005672:	f011 0101 	ands.w	r1, r1, #1
 8005676:	d001      	beq.n	800567c <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005678:	2001      	movs	r0, #1
 800567a:	e7f6      	b.n	800566a <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 800567c:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b03      	cmp	r3, #3
 8005682:	d119      	bne.n	80056b8 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005684:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005688:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800568a:	4620      	mov	r0, r4
 800568c:	f7ff fd9b 	bl	80051c6 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005690:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8005694:	d103      	bne.n	800569e <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005696:	0c00      	lsrs	r0, r0, #16
 8005698:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800569a:	4618      	mov	r0, r3
 800569c:	e7e6      	b.n	800566c <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800569e:	0443      	lsls	r3, r0, #17
 80056a0:	d40c      	bmi.n	80056bc <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056a2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80056a6:	bf14      	ite	ne
 80056a8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80056ac:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80056b0:	e7dc      	b.n	800566c <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 80056b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80056b6:	e7d9      	b.n	800566c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056b8:	2001      	movs	r0, #1
 80056ba:	e7d7      	b.n	800566c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056c0:	e7d4      	b.n	800566c <SDMMC_CmdSetRelAdd+0x4c>
 80056c2:	bf00      	nop
 80056c4:	20008598 	.word	0x20008598

080056c8 <SDMMC_CmdSendStatus>:
{
 80056c8:	b530      	push	{r4, r5, lr}
 80056ca:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056cc:	2340      	movs	r3, #64	; 0x40
 80056ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056d0:	2300      	movs	r3, #0
{
 80056d2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056d4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80056d6:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056d8:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056da:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e0:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80056e2:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056e4:	f7ff fd5c 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80056e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f7ff fd74 	bl	80051dc <SDMMC_GetCmdResp1>
}
 80056f4:	b007      	add	sp, #28
 80056f6:	bd30      	pop	{r4, r5, pc}

080056f8 <SDMMC_CmdSwitch>:
{
 80056f8:	b530      	push	{r4, r5, lr}
 80056fa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005700:	2300      	movs	r3, #0
{
 8005702:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8005704:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8005706:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005708:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800570a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800570c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005710:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8005712:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005714:	f7ff fd44 	bl	80051a0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4621      	mov	r1, r4
 800571e:	4628      	mov	r0, r5
 8005720:	f7ff fd5c 	bl	80051dc <SDMMC_GetCmdResp1>
}
 8005724:	b007      	add	sp, #28
 8005726:	bd30      	pop	{r4, r5, pc}

08005728 <SDMMC_CmdBusWidth>:
 8005728:	f7ff bfe6 	b.w	80056f8 <SDMMC_CmdSwitch>

0800572c <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800572c:	4b03      	ldr	r3, [pc, #12]	; (800573c <disk_status+0x10>)
 800572e:	181a      	adds	r2, r3, r0
 8005730:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005734:	7a10      	ldrb	r0, [r2, #8]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4718      	bx	r3
 800573c:	200085e8 	.word	0x200085e8

08005740 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <disk_initialize+0x1c>)
 8005742:	5c1a      	ldrb	r2, [r3, r0]
 8005744:	b942      	cbnz	r2, 8005758 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8005746:	2201      	movs	r2, #1
 8005748:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800574a:	181a      	adds	r2, r3, r0
 800574c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005750:	7a10      	ldrb	r0, [r2, #8]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4718      	bx	r3
  }
  return stat;
}
 8005758:	2000      	movs	r0, #0
 800575a:	4770      	bx	lr
 800575c:	200085e8 	.word	0x200085e8

08005760 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005760:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005762:	4c05      	ldr	r4, [pc, #20]	; (8005778 <disk_read+0x18>)
 8005764:	1825      	adds	r5, r4, r0
 8005766:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800576a:	6860      	ldr	r0, [r4, #4]
 800576c:	6884      	ldr	r4, [r0, #8]
 800576e:	7a28      	ldrb	r0, [r5, #8]
 8005770:	46a4      	mov	ip, r4
  return res;
}
 8005772:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005774:	4760      	bx	ip
 8005776:	bf00      	nop
 8005778:	200085e8 	.word	0x200085e8

0800577c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800577c:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800577e:	4c05      	ldr	r4, [pc, #20]	; (8005794 <disk_write+0x18>)
 8005780:	1825      	adds	r5, r4, r0
 8005782:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005786:	6860      	ldr	r0, [r4, #4]
 8005788:	68c4      	ldr	r4, [r0, #12]
 800578a:	7a28      	ldrb	r0, [r5, #8]
 800578c:	46a4      	mov	ip, r4
  return res;
}
 800578e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005790:	4760      	bx	ip
 8005792:	bf00      	nop
 8005794:	200085e8 	.word	0x200085e8

08005798 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <disk_ioctl+0x18>)
{
 800579a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800579c:	181c      	adds	r4, r3, r0
 800579e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80057a2:	7a20      	ldrb	r0, [r4, #8]
 80057a4:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80057a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	4718      	bx	r3
 80057ae:	bf00      	nop
 80057b0:	200085e8 	.word	0x200085e8

080057b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80057b4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80057b6:	4c06      	ldr	r4, [pc, #24]	; (80057d0 <SD_initialize+0x1c>)
 80057b8:	2301      	movs	r3, #1
 80057ba:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80057bc:	f001 f9c0 	bl	8006b40 <BSP_SD_Init>
 80057c0:	4623      	mov	r3, r4
 80057c2:	b918      	cbnz	r0, 80057cc <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 80057c4:	7822      	ldrb	r2, [r4, #0]
 80057c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057ca:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80057cc:	7818      	ldrb	r0, [r3, #0]
}
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	200001d4 	.word	0x200001d4

080057d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80057d4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80057d6:	4c06      	ldr	r4, [pc, #24]	; (80057f0 <SD_status+0x1c>)
 80057d8:	2301      	movs	r3, #1
 80057da:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80057dc:	f001 f9ea 	bl	8006bb4 <BSP_SD_GetCardState>
 80057e0:	4623      	mov	r3, r4
 80057e2:	b918      	cbnz	r0, 80057ec <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 80057e4:	7822      	ldrb	r2, [r4, #0]
 80057e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057ea:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 80057ec:	7818      	ldrb	r0, [r3, #0]
}
 80057ee:	bd10      	pop	{r4, pc}
 80057f0:	200001d4 	.word	0x200001d4

080057f4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80057f4:	b510      	push	{r4, lr}
 80057f6:	4608      	mov	r0, r1
 80057f8:	4611      	mov	r1, r2
 80057fa:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <SD_read+0x28>)
 80057fe:	f001 f9b9 	bl	8006b74 <BSP_SD_ReadBlocks>
 8005802:	b140      	cbz	r0, 8005816 <SD_read+0x22>
  DRESULT res = RES_ERROR;
 8005804:	2001      	movs	r0, #1
 8005806:	bd10      	pop	{r4, pc}
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
    {
      if (timeout-- == 0)
 8005808:	3c01      	subs	r4, #1
 800580a:	d0fb      	beq.n	8005804 <SD_read+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800580c:	f001 f9d2 	bl	8006bb4 <BSP_SD_GetCardState>
 8005810:	2800      	cmp	r0, #0
 8005812:	d1f9      	bne.n	8005808 <SD_read+0x14>
}
 8005814:	bd10      	pop	{r4, pc}
 8005816:	4c02      	ldr	r4, [pc, #8]	; (8005820 <SD_read+0x2c>)
 8005818:	e7f8      	b.n	800580c <SD_read+0x18>
 800581a:	bf00      	nop
 800581c:	05f5e100 	.word	0x05f5e100
 8005820:	000186a1 	.word	0x000186a1

08005824 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005824:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <SD_ioctl+0x48>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	07db      	lsls	r3, r3, #31
{
 800582c:	b088      	sub	sp, #32
 800582e:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005830:	d41a      	bmi.n	8005868 <SD_ioctl+0x44>
  
  switch (cmd)
 8005832:	2903      	cmp	r1, #3
 8005834:	d803      	bhi.n	800583e <SD_ioctl+0x1a>
 8005836:	e8df f001 	tbb	[pc, r1]
 800583a:	0510      	.short	0x0510
 800583c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize;
    res = RES_OK;
    break;
  
  default:
    res = RES_PARERR;
 800583e:	2004      	movs	r0, #4
  }
  
  return res;
}
 8005840:	b008      	add	sp, #32
 8005842:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005844:	4668      	mov	r0, sp
 8005846:	f001 f9bf 	bl	8006bc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800584a:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	e004      	b.n	800585a <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8005850:	4668      	mov	r0, sp
 8005852:	f001 f9b9 	bl	8006bc8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005856:	9b07      	ldr	r3, [sp, #28]
 8005858:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800585a:	2000      	movs	r0, #0
 800585c:	e7f0      	b.n	8005840 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800585e:	4668      	mov	r0, sp
 8005860:	f001 f9b2 	bl	8006bc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8005864:	9b07      	ldr	r3, [sp, #28]
 8005866:	e7f1      	b.n	800584c <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005868:	2003      	movs	r0, #3
 800586a:	e7e9      	b.n	8005840 <SD_ioctl+0x1c>
 800586c:	200001d4 	.word	0x200001d4

08005870 <SD_write>:
{
 8005870:	b510      	push	{r4, lr}
 8005872:	4608      	mov	r0, r1
 8005874:	4611      	mov	r1, r2
 8005876:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8005878:	4b07      	ldr	r3, [pc, #28]	; (8005898 <SD_write+0x28>)
 800587a:	f001 f98b 	bl	8006b94 <BSP_SD_WriteBlocks>
 800587e:	b140      	cbz	r0, 8005892 <SD_write+0x22>
  DRESULT res = RES_ERROR;
 8005880:	2001      	movs	r0, #1
 8005882:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 8005884:	3c01      	subs	r4, #1
 8005886:	d0fb      	beq.n	8005880 <SD_write+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005888:	f001 f994 	bl	8006bb4 <BSP_SD_GetCardState>
 800588c:	2800      	cmp	r0, #0
 800588e:	d1f9      	bne.n	8005884 <SD_write+0x14>
}
 8005890:	bd10      	pop	{r4, pc}
 8005892:	4c02      	ldr	r4, [pc, #8]	; (800589c <SD_write+0x2c>)
 8005894:	e7f8      	b.n	8005888 <SD_write+0x18>
 8005896:	bf00      	nop
 8005898:	05f5e100 	.word	0x05f5e100
 800589c:	000186a1 	.word	0x000186a1

080058a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80058a0:	3801      	subs	r0, #1
 80058a2:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80058a4:	4291      	cmp	r1, r2
 80058a6:	d100      	bne.n	80058aa <mem_cpy+0xa>
		*d++ = *s++;
}
 80058a8:	4770      	bx	lr
		*d++ = *s++;
 80058aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ae:	f800 3f01 	strb.w	r3, [r0, #1]!
 80058b2:	e7f7      	b.n	80058a4 <mem_cpy+0x4>

080058b4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80058b4:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80058b6:	4290      	cmp	r0, r2
 80058b8:	d100      	bne.n	80058bc <mem_set+0x8>
		*d++ = (BYTE)val;
}
 80058ba:	4770      	bx	lr
		*d++ = (BYTE)val;
 80058bc:	f800 1b01 	strb.w	r1, [r0], #1
 80058c0:	e7f9      	b.n	80058b6 <mem_set+0x2>
	...

080058c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058c4:	4a17      	ldr	r2, [pc, #92]	; (8005924 <chk_lock+0x60>)
 80058c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058c8:	2400      	movs	r4, #0
 80058ca:	4623      	mov	r3, r4
 80058cc:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 80058ce:	6815      	ldr	r5, [r2, #0]
 80058d0:	b1c5      	cbz	r5, 8005904 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80058d2:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 80058d6:	42bd      	cmp	r5, r7
 80058d8:	d115      	bne.n	8005906 <chk_lock+0x42>
 80058da:	6857      	ldr	r7, [r2, #4]
 80058dc:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80058e0:	42af      	cmp	r7, r5
 80058e2:	d110      	bne.n	8005906 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 80058e4:	8917      	ldrh	r7, [r2, #8]
 80058e6:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80058ea:	42af      	cmp	r7, r5
 80058ec:	d10b      	bne.n	8005906 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80058ee:	b9b9      	cbnz	r1, 8005920 <chk_lock+0x5c>
 80058f0:	220c      	movs	r2, #12
 80058f2:	fb02 6303 	mla	r3, r2, r3, r6
 80058f6:	895b      	ldrh	r3, [r3, #10]
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	bf14      	ite	ne
 80058fe:	2000      	movne	r0, #0
 8005900:	2010      	moveq	r0, #16
 8005902:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8005904:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005906:	3301      	adds	r3, #1
 8005908:	2b02      	cmp	r3, #2
 800590a:	f102 020c 	add.w	r2, r2, #12
 800590e:	d1de      	bne.n	80058ce <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005910:	b10c      	cbz	r4, 8005916 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005912:	2000      	movs	r0, #0
 8005914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005916:	2902      	cmp	r1, #2
 8005918:	bf0c      	ite	eq
 800591a:	2000      	moveq	r0, #0
 800591c:	2012      	movne	r0, #18
 800591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005920:	2010      	movs	r0, #16
 8005922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005924:	200085cc 	.word	0x200085cc

08005928 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	4c20      	ldr	r4, [pc, #128]	; (80059ac <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 800592c:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005930:	2300      	movs	r3, #0
 8005932:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8005934:	6825      	ldr	r5, [r4, #0]
 8005936:	42b5      	cmp	r5, r6
 8005938:	d109      	bne.n	800594e <inc_lock+0x26>
 800593a:	6867      	ldr	r7, [r4, #4]
 800593c:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8005940:	42af      	cmp	r7, r5
 8005942:	d104      	bne.n	800594e <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8005944:	8927      	ldrh	r7, [r4, #8]
 8005946:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 800594a:	42af      	cmp	r7, r5
 800594c:	d022      	beq.n	8005994 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800594e:	3301      	adds	r3, #1
 8005950:	2b02      	cmp	r3, #2
 8005952:	f104 040c 	add.w	r4, r4, #12
 8005956:	d1ed      	bne.n	8005934 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005958:	6813      	ldr	r3, [r2, #0]
 800595a:	b113      	cbz	r3, 8005962 <inc_lock+0x3a>
 800595c:	68d3      	ldr	r3, [r2, #12]
 800595e:	bb1b      	cbnz	r3, 80059a8 <inc_lock+0x80>
 8005960:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8005962:	240c      	movs	r4, #12
 8005964:	435c      	muls	r4, r3
 8005966:	1915      	adds	r5, r2, r4
 8005968:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 800596a:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 800596e:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8005972:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8005974:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8005976:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8005978:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800597a:	b991      	cbnz	r1, 80059a2 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800597c:	210c      	movs	r1, #12
 800597e:	fb01 2103 	mla	r1, r1, r3, r2
 8005982:	8949      	ldrh	r1, [r1, #10]
 8005984:	3101      	adds	r1, #1
 8005986:	b289      	uxth	r1, r1
 8005988:	200c      	movs	r0, #12
 800598a:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 800598e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005990:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005994:	2900      	cmp	r1, #0
 8005996:	d0f1      	beq.n	800597c <inc_lock+0x54>
 8005998:	210c      	movs	r1, #12
 800599a:	fb01 2103 	mla	r1, r1, r3, r2
 800599e:	8949      	ldrh	r1, [r1, #10]
 80059a0:	b911      	cbnz	r1, 80059a8 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059a6:	e7ef      	b.n	8005988 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80059a8:	2000      	movs	r0, #0
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ac:	200085cc 	.word	0x200085cc

080059b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059b0:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059b2:	1e45      	subs	r5, r0, #1
 80059b4:	2d01      	cmp	r5, #1
 80059b6:	d811      	bhi.n	80059dc <dec_lock+0x2c>
		n = Files[i].ctr;
 80059b8:	490a      	ldr	r1, [pc, #40]	; (80059e4 <dec_lock+0x34>)
 80059ba:	220c      	movs	r2, #12
 80059bc:	fb02 1305 	mla	r3, r2, r5, r1
 80059c0:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 80059c2:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 80059c6:	b298      	uxth	r0, r3
 80059c8:	b108      	cbz	r0, 80059ce <dec_lock+0x1e>
 80059ca:	3c01      	subs	r4, #1
 80059cc:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 80059ce:	fb02 f305 	mul.w	r3, r2, r5
 80059d2:	18ca      	adds	r2, r1, r3
 80059d4:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80059d6:	b918      	cbnz	r0, 80059e0 <dec_lock+0x30>
 80059d8:	50c8      	str	r0, [r1, r3]
 80059da:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80059dc:	2002      	movs	r0, #2
 80059de:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 80059e0:	2000      	movs	r0, #0
	}
	return res;
}
 80059e2:	bd30      	pop	{r4, r5, pc}
 80059e4:	200085cc 	.word	0x200085cc

080059e8 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80059e8:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80059ec:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80059f0:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80059f2:	0a49      	lsrs	r1, r1, #9
 80059f4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80059f8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059fc:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80059fe:	b130      	cbz	r0, 8005a0e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005a00:	4281      	cmp	r1, r0
 8005a02:	d302      	bcc.n	8005a0a <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a04:	1a09      	subs	r1, r1, r0
 8005a06:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a08:	e7f8      	b.n	80059fc <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a0a:	6858      	ldr	r0, [r3, #4]
 8005a0c:	4408      	add	r0, r1
}
 8005a0e:	4770      	bx	lr

08005a10 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a10:	6802      	ldr	r2, [r0, #0]
{
 8005a12:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8005a14:	b152      	cbz	r2, 8005a2c <get_ldnumber+0x1c>
 8005a16:	4611      	mov	r1, r2
 8005a18:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1e:	2c20      	cmp	r4, #32
 8005a20:	d90c      	bls.n	8005a3c <get_ldnumber+0x2c>
 8005a22:	2c3a      	cmp	r4, #58	; 0x3a
 8005a24:	d1f8      	bne.n	8005a18 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8005a26:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	d002      	beq.n	8005a32 <get_ldnumber+0x22>
	int vol = -1;
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8005a30:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005a32:	7812      	ldrb	r2, [r2, #0]
 8005a34:	2a30      	cmp	r2, #48	; 0x30
 8005a36:	d1f9      	bne.n	8005a2c <get_ldnumber+0x1c>
					*path = ++tt;
 8005a38:	3301      	adds	r3, #1
 8005a3a:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005a40:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005a42:	b190      	cbz	r0, 8005a6a <validate+0x2a>
 8005a44:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8005a48:	b17b      	cbz	r3, 8005a6a <validate+0x2a>
 8005a4a:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8005a4e:	b162      	cbz	r2, 8005a6a <validate+0x2a>
 8005a50:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8005a54:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8005a58:	4291      	cmp	r1, r2
 8005a5a:	d106      	bne.n	8005a6a <validate+0x2a>
 8005a5c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005a60:	f7ff fe64 	bl	800572c <disk_status>
 8005a64:	f010 0001 	ands.w	r0, r0, #1
 8005a68:	d000      	beq.n	8005a6c <validate+0x2c>
		return FR_INVALID_OBJECT;
 8005a6a:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8005a6c:	bd08      	pop	{r3, pc}

08005a6e <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8005a6e:	7eca      	ldrb	r2, [r1, #27]
 8005a70:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8005a72:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8005a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005a78:	bf01      	itttt	eq
 8005a7a:	7d48      	ldrbeq	r0, [r1, #21]
 8005a7c:	7d0a      	ldrbeq	r2, [r1, #20]
 8005a7e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8005a82:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	4770      	bx	lr

08005a8a <sync_window.part.2>:
FRESULT sync_window (
 8005a8a:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8005a8c:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8005a90:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005a92:	4601      	mov	r1, r0
 8005a94:	2301      	movs	r3, #1
 8005a96:	462a      	mov	r2, r5
 8005a98:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8005a9c:	f7ff fe6e 	bl	800577c <disk_write>
 8005aa0:	b9d0      	cbnz	r0, 8005ad8 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005aa2:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8005aa6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8005aaa:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005aae:	1aeb      	subs	r3, r5, r3
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d301      	bcc.n	8005ab8 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ab8:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8005abc:	2e01      	cmp	r6, #1
 8005abe:	d9f9      	bls.n	8005ab4 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8005ac0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005ac4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8005ac8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005aca:	462a      	mov	r2, r5
 8005acc:	2301      	movs	r3, #1
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f7ff fe54 	bl	800577c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ad4:	3e01      	subs	r6, #1
 8005ad6:	e7f1      	b.n	8005abc <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8005ad8:	2001      	movs	r0, #1
}
 8005ada:	bd70      	pop	{r4, r5, r6, pc}

08005adc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005adc:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8005ae0:	b10b      	cbz	r3, 8005ae6 <sync_window+0xa>
 8005ae2:	f7ff bfd2 	b.w	8005a8a <sync_window.part.2>
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	4770      	bx	lr

08005aea <sync_fs>:
{
 8005aea:	b538      	push	{r3, r4, r5, lr}
 8005aec:	4604      	mov	r4, r0
	res = sync_window(fs);
 8005aee:	f7ff fff5 	bl	8005adc <sync_window>
 8005af2:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d154      	bne.n	8005ba2 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005af8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d147      	bne.n	8005b90 <sync_fs+0xa6>
 8005b00:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d143      	bne.n	8005b90 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8005b08:	4601      	mov	r1, r0
 8005b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff fed0 	bl	80058b4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005b14:	2255      	movs	r2, #85	; 0x55
 8005b16:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8005b1a:	22aa      	movs	r2, #170	; 0xaa
 8005b1c:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005b20:	2252      	movs	r2, #82	; 0x52
 8005b22:	7022      	strb	r2, [r4, #0]
 8005b24:	7062      	strb	r2, [r4, #1]
 8005b26:	2261      	movs	r2, #97	; 0x61
 8005b28:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005b2a:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005b2e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8005b32:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005b36:	2141      	movs	r1, #65	; 0x41
 8005b38:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005b3a:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005b3e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005b42:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8005b46:	0c11      	lsrs	r1, r2, #16
 8005b48:	0e12      	lsrs	r2, r2, #24
 8005b4a:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005b4e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005b52:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005b56:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005b5a:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8005b5e:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8005b62:	0c11      	lsrs	r1, r2, #16
 8005b64:	0e12      	lsrs	r2, r2, #24
 8005b66:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8005b6a:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005b6e:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005b72:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8005b74:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005b76:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8005b7a:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8005b7e:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005b82:	4621      	mov	r1, r4
 8005b84:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8005b88:	f7ff fdf8 	bl	800577c <disk_write>
			fs->fsi_flag = 0;
 8005b8c:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005b90:	2200      	movs	r2, #0
 8005b92:	4611      	mov	r1, r2
 8005b94:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8005b98:	f7ff fdfe 	bl	8005798 <disk_ioctl>
 8005b9c:	3000      	adds	r0, #0
 8005b9e:	bf18      	it	ne
 8005ba0:	2001      	movne	r0, #1
}
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}

08005ba4 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ba4:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8005ba8:	428b      	cmp	r3, r1
{
 8005baa:	b570      	push	{r4, r5, r6, lr}
 8005bac:	4606      	mov	r6, r0
 8005bae:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005bb0:	d013      	beq.n	8005bda <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8005bb2:	f7ff ff93 	bl	8005adc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	b968      	cbnz	r0, 8005bd6 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005bba:	462a      	mov	r2, r5
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8005bc4:	f7ff fdcc 	bl	8005760 <disk_read>
 8005bc8:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8005bca:	bf1c      	itt	ne
 8005bcc:	f04f 35ff 	movne.w	r5, #4294967295
 8005bd0:	2401      	movne	r4, #1
			fs->winsect = sector;
 8005bd2:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8005bda:	2400      	movs	r4, #0
 8005bdc:	e7fb      	b.n	8005bd6 <move_window+0x32>
	...

08005be0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005be0:	2300      	movs	r3, #0
{
 8005be2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005be4:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bec:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8005bf0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005bf2:	f7ff ffd7 	bl	8005ba4 <move_window>
 8005bf6:	b9c0      	cbnz	r0, 8005c2a <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005bf8:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8005bfc:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8005c00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c04:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d110      	bne.n	8005c2e <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005c0c:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <check_fs+0x54>)
 8005c12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00a      	beq.n	8005c30 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005c1a:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8005c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8005c22:	1a80      	subs	r0, r0, r2
 8005c24:	bf18      	it	ne
 8005c26:	2001      	movne	r0, #1
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	2003      	movs	r0, #3
 8005c2c:	bd10      	pop	{r4, pc}
		return 2;
 8005c2e:	2002      	movs	r0, #2
}
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	bf00      	nop
 8005c34:	00544146 	.word	0x00544146

08005c38 <find_volume>:
{
 8005c38:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6003      	str	r3, [r0, #0]
{
 8005c3e:	b085      	sub	sp, #20
 8005c40:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8005c42:	4608      	mov	r0, r1
{
 8005c44:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8005c46:	f7ff fee3 	bl	8005a10 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c4a:	1e06      	subs	r6, r0, #0
 8005c4c:	f2c0 8123 	blt.w	8005e96 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005c50:	4b95      	ldr	r3, [pc, #596]	; (8005ea8 <find_volume+0x270>)
 8005c52:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c56:	2c00      	cmp	r4, #0
 8005c58:	f000 811f 	beq.w	8005e9a <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 8005c5c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c5e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8005c62:	b173      	cbz	r3, 8005c82 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8005c64:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8005c68:	f7ff fd60 	bl	800572c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005c6c:	07c7      	lsls	r7, r0, #31
 8005c6e:	d408      	bmi.n	8005c82 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	f000 8114 	beq.w	8005e9e <find_volume+0x266>
 8005c76:	f010 0004 	ands.w	r0, r0, #4
 8005c7a:	d000      	beq.n	8005c7e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8005c7c:	200a      	movs	r0, #10
}
 8005c7e:	b005      	add	sp, #20
 8005c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8005c82:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005c84:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8005c86:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005c8a:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005c8e:	f7ff fd57 	bl	8005740 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005c92:	07c1      	lsls	r1, r0, #31
 8005c94:	f100 8105 	bmi.w	8005ea2 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005c98:	b10d      	cbz	r5, 8005c9e <find_volume+0x66>
 8005c9a:	0742      	lsls	r2, r0, #29
 8005c9c:	d4ee      	bmi.n	8005c7c <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7ff ff9d 	bl	8005be0 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005ca6:	2801      	cmp	r0, #1
 8005ca8:	f040 80dc 	bne.w	8005e64 <find_volume+0x22c>
 8005cac:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8005cb0:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005cb2:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8005cb6:	b103      	cbz	r3, 8005cba <find_volume+0x82>
 8005cb8:	680b      	ldr	r3, [r1, #0]
 8005cba:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005cbe:	3201      	adds	r2, #1
 8005cc0:	2a04      	cmp	r2, #4
 8005cc2:	f101 0110 	add.w	r1, r1, #16
 8005cc6:	d1f4      	bne.n	8005cb2 <find_volume+0x7a>
 8005cc8:	2600      	movs	r6, #0
			bsect = br[i];
 8005cca:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	f000 80bf 	beq.w	8005e52 <find_volume+0x21a>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff ff82 	bl	8005be0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f040 80b9 	bne.w	8005e54 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ce2:	7b22      	ldrb	r2, [r4, #12]
 8005ce4:	7ae3      	ldrb	r3, [r4, #11]
 8005ce6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cee:	f040 80bc 	bne.w	8005e6a <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005cf2:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005cf4:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005cf6:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005cf8:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005cfc:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005d00:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005d04:	bf08      	it	eq
 8005d06:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8005d08:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	f200 80ac 	bhi.w	8005e6a <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005d12:	7b66      	ldrb	r6, [r4, #13]
 8005d14:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	f000 80a6 	beq.w	8005e6a <find_volume+0x232>
 8005d1e:	1e73      	subs	r3, r6, #1
 8005d20:	4233      	tst	r3, r6
 8005d22:	f040 80a2 	bne.w	8005e6a <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005d26:	7ca3      	ldrb	r3, [r4, #18]
 8005d28:	7c67      	ldrb	r7, [r4, #17]
 8005d2a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005d2e:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005d30:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005d34:	f040 8099 	bne.w	8005e6a <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005d38:	7d22      	ldrb	r2, [r4, #20]
 8005d3a:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005d3c:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005d40:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005d44:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005d46:	bf08      	it	eq
 8005d48:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005d4a:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 8005d4e:	f000 808c 	beq.w	8005e6a <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005d52:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005d56:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 8005d5a:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d5c:	4283      	cmp	r3, r0
 8005d5e:	f0c0 8084 	bcc.w	8005e6a <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005d62:	1a1b      	subs	r3, r3, r0
 8005d64:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d07e      	beq.n	8005e6a <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005d6c:	f640 76f5 	movw	r6, #4085	; 0xff5
 8005d70:	42b3      	cmp	r3, r6
 8005d72:	d97e      	bls.n	8005e72 <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005d74:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8005d78:	42b3      	cmp	r3, r6
 8005d7a:	bf94      	ite	ls
 8005d7c:	2602      	movls	r6, #2
 8005d7e:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005d80:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005d82:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8005d84:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 8005d86:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005d88:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005d8c:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005d90:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005d94:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8005d98:	d16d      	bne.n	8005e76 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005d9a:	2f00      	cmp	r7, #0
 8005d9c:	d165      	bne.n	8005e6a <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005d9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005da0:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005da4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005da6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005daa:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8005dae:	d35c      	bcc.n	8005e6a <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8005db8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005dbc:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8005dbe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005dc2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005dc6:	d12d      	bne.n	8005e24 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005dc8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8005dcc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005dd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d125      	bne.n	8005e24 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005dd8:	1c69      	adds	r1, r5, #1
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff fee2 	bl	8005ba4 <move_window>
 8005de0:	bb00      	cbnz	r0, 8005e24 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005de2:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8005de6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8005dea:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005dee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005df2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d114      	bne.n	8005e24 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <find_volume+0x274>)
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d110      	bne.n	8005e24 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005e02:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8005e06:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8005e0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005e0e:	3320      	adds	r3, #32
 8005e10:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005e12:	bf01      	itttt	eq
 8005e14:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8005e18:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005e1c:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8005e20:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8005e24:	4a22      	ldr	r2, [pc, #136]	; (8005eb0 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8005e26:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005e2a:	8813      	ldrh	r3, [r2, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
 8005e32:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e36:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <find_volume+0x27c>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4294      	cmp	r4, r2
 8005e3c:	bf04      	itt	eq
 8005e3e:	2200      	moveq	r2, #0
 8005e40:	601a      	streq	r2, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	4294      	cmp	r4, r2
 8005e46:	f04f 0000 	mov.w	r0, #0
 8005e4a:	f47f af18 	bne.w	8005c7e <find_volume+0x46>
 8005e4e:	60d8      	str	r0, [r3, #12]
 8005e50:	e715      	b.n	8005c7e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005e52:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005e54:	3601      	adds	r6, #1
 8005e56:	2e04      	cmp	r6, #4
 8005e58:	f47f af37 	bne.w	8005cca <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e5c:	2803      	cmp	r0, #3
 8005e5e:	d104      	bne.n	8005e6a <find_volume+0x232>
 8005e60:	2001      	movs	r0, #1
 8005e62:	e70c      	b.n	8005c7e <find_volume+0x46>
 8005e64:	2803      	cmp	r0, #3
 8005e66:	d0fb      	beq.n	8005e60 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005e68:	b108      	cbz	r0, 8005e6e <find_volume+0x236>
 8005e6a:	200d      	movs	r0, #13
 8005e6c:	e707      	b.n	8005c7e <find_volume+0x46>
	bsect = 0;
 8005e6e:	4605      	mov	r5, r0
 8005e70:	e737      	b.n	8005ce2 <find_volume+0xaa>
	fmt = FS_FAT12;
 8005e72:	2601      	movs	r6, #1
 8005e74:	e784      	b.n	8005d80 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005e76:	2f00      	cmp	r7, #0
 8005e78:	d0f7      	beq.n	8005e6a <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005e7a:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e7c:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005e7e:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8005e82:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e86:	bf1b      	ittet	ne
 8005e88:	18d2      	addne	r2, r2, r3
 8005e8a:	f003 0301 	andne.w	r3, r3, #1
 8005e8e:	4613      	moveq	r3, r2
 8005e90:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8005e94:	e787      	b.n	8005da6 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e96:	200b      	movs	r0, #11
 8005e98:	e6f1      	b.n	8005c7e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e9a:	200c      	movs	r0, #12
 8005e9c:	e6ef      	b.n	8005c7e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	e6ed      	b.n	8005c7e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ea2:	2003      	movs	r0, #3
 8005ea4:	e6eb      	b.n	8005c7e <find_volume+0x46>
 8005ea6:	bf00      	nop
 8005ea8:	200085c8 	.word	0x200085c8
 8005eac:	41615252 	.word	0x41615252
 8005eb0:	200085e4 	.word	0x200085e4
 8005eb4:	200085cc 	.word	0x200085cc

08005eb8 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005eb8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8005ebc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ebe:	3b02      	subs	r3, #2
 8005ec0:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8005ec2:	bf3d      	ittte	cc
 8005ec4:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 8005ec8:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 8005ecc:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ed0:	2000      	movcs	r0, #0
}
 8005ed2:	4770      	bx	lr

08005ed4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ed4:	2901      	cmp	r1, #1
{
 8005ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed8:	4606      	mov	r6, r0
 8005eda:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005edc:	d959      	bls.n	8005f92 <get_fat+0xbe>
 8005ede:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d255      	bcs.n	8005f92 <get_fat+0xbe>
		switch (fs->fs_type) {
 8005ee6:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d027      	beq.n	8005f3e <get_fat+0x6a>
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d036      	beq.n	8005f60 <get_fat+0x8c>
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d14d      	bne.n	8005f92 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8005ef6:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005efa:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8005efe:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8005f02:	f7ff fe4f 	bl	8005ba4 <move_window>
 8005f06:	b110      	cbz	r0, 8005f0e <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f0e:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8005f12:	1c67      	adds	r7, r4, #1
 8005f14:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f18:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8005f1c:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8005f1e:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f20:	f7ff fe40 	bl	8005ba4 <move_window>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d1ef      	bne.n	8005f08 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005f28:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005f2c:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005f2e:	5df0      	ldrb	r0, [r6, r7]
 8005f30:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005f34:	bf4c      	ite	mi
 8005f36:	0900      	lsrmi	r0, r0, #4
 8005f38:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8005f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f3e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8005f42:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8005f46:	f7ff fe2d 	bl	8005ba4 <move_window>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d1dc      	bne.n	8005f08 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005f4e:	006d      	lsls	r5, r5, #1
 8005f50:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8005f54:	1973      	adds	r3, r6, r5
 8005f56:	5d70      	ldrb	r0, [r6, r5]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f60:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8005f64:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8005f68:	f7ff fe1c 	bl	8005ba4 <move_window>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d1cb      	bne.n	8005f08 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005f70:	00ad      	lsls	r5, r5, #2
 8005f72:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8005f76:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005f78:	7898      	ldrb	r0, [r3, #2]
 8005f7a:	78da      	ldrb	r2, [r3, #3]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	0400      	lsls	r0, r0, #16
 8005f80:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8005f84:	5d72      	ldrb	r2, [r6, r5]
 8005f86:	4310      	orrs	r0, r2
 8005f88:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005f8c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8005f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8005f92:	2001      	movs	r0, #1
}
 8005f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f96 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005f96:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8005f9a:	b570      	push	{r4, r5, r6, lr}
 8005f9c:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005f9e:	2a01      	cmp	r2, #1
{
 8005fa0:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8005fa2:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005fa6:	d101      	bne.n	8005fac <dir_sdi+0x16>
		return FR_INT_ERR;
 8005fa8:	2002      	movs	r0, #2
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005fac:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8005fb0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8005fb4:	428a      	cmp	r2, r1
 8005fb6:	d2f7      	bcs.n	8005fa8 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005fb8:	b9f2      	cbnz	r2, 8005ff8 <dir_sdi+0x62>
 8005fba:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8005fbe:	2903      	cmp	r1, #3
 8005fc0:	d102      	bne.n	8005fc8 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8005fc2:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fc6:	b9c1      	cbnz	r1, 8005ffa <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005fc8:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8005fcc:	428d      	cmp	r5, r1
 8005fce:	d2eb      	bcs.n	8005fa8 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8005fd0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8005fd4:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d0e5      	beq.n	8005fa8 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005fdc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005fe0:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005fe4:	f005 050f 	and.w	r5, r5, #15
 8005fe8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005fec:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005ff0:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005ffa:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8005ffe:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006000:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8006002:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006004:	4611      	mov	r1, r2
 8006006:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 800600a:	d202      	bcs.n	8006012 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 800600c:	f7ff ff54 	bl	8005eb8 <clust2sect>
 8006010:	e7e0      	b.n	8005fd4 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006012:	f7ff ff5f 	bl	8005ed4 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006016:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006018:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800601a:	d009      	beq.n	8006030 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800601c:	2801      	cmp	r0, #1
 800601e:	d9c3      	bls.n	8005fa8 <dir_sdi+0x12>
 8006020:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8006024:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006028:	4298      	cmp	r0, r3
 800602a:	d2bd      	bcs.n	8005fa8 <dir_sdi+0x12>
			idx -= ic;
 800602c:	1bad      	subs	r5, r5, r6
 800602e:	e7e8      	b.n	8006002 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006030:	2001      	movs	r0, #1
}
 8006032:	bd70      	pop	{r4, r5, r6, pc}

08006034 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006034:	2901      	cmp	r1, #1
{
 8006036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603a:	4605      	mov	r5, r0
 800603c:	460c      	mov	r4, r1
 800603e:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006040:	d96f      	bls.n	8006122 <put_fat+0xee>
 8006042:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006046:	4299      	cmp	r1, r3
 8006048:	d26b      	bcs.n	8006122 <put_fat+0xee>
		switch (fs->fs_type) {
 800604a:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800604e:	2b02      	cmp	r3, #2
 8006050:	d03d      	beq.n	80060ce <put_fat+0x9a>
 8006052:	2b03      	cmp	r3, #3
 8006054:	d04b      	beq.n	80060ee <put_fat+0xba>
 8006056:	2b01      	cmp	r3, #1
 8006058:	d163      	bne.n	8006122 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 800605a:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800605e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8006062:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8006066:	f7ff fd9d 	bl	8005ba4 <move_window>
			if (res != FR_OK) break;
 800606a:	2800      	cmp	r0, #0
 800606c:	d15a      	bne.n	8006124 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 800606e:	f107 0801 	add.w	r8, r7, #1
 8006072:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006076:	f014 0401 	ands.w	r4, r4, #1
 800607a:	bf1f      	itttt	ne
 800607c:	5deb      	ldrbne	r3, [r5, r7]
 800607e:	f003 020f 	andne.w	r2, r3, #15
 8006082:	0133      	lslne	r3, r6, #4
 8006084:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8006088:	bf14      	ite	ne
 800608a:	4313      	orrne	r3, r2
 800608c:	b2f3      	uxtbeq	r3, r6
 800608e:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006090:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8006094:	2301      	movs	r3, #1
 8006096:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800609a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800609e:	4628      	mov	r0, r5
 80060a0:	f7ff fd80 	bl	8005ba4 <move_window>
			if (res != FR_OK) break;
 80060a4:	bbf0      	cbnz	r0, 8006124 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 80060a6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060aa:	b144      	cbz	r4, 80060be <put_fat+0x8a>
 80060ac:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80060b0:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 80060ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060be:	f815 2008 	ldrb.w	r2, [r5, r8]
 80060c2:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80060c6:	f022 020f 	bic.w	r2, r2, #15
 80060ca:	4332      	orrs	r2, r6
 80060cc:	e7f0      	b.n	80060b0 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80060ce:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80060d2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80060d6:	f7ff fd65 	bl	8005ba4 <move_window>
			if (res != FR_OK) break;
 80060da:	bb18      	cbnz	r0, 8006124 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80060dc:	0064      	lsls	r4, r4, #1
 80060de:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 80060e2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80060e6:	552e      	strb	r6, [r5, r4]
 80060e8:	442c      	add	r4, r5
 80060ea:	7062      	strb	r2, [r4, #1]
 80060ec:	e7e2      	b.n	80060b4 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80060ee:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80060f2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80060f6:	f7ff fd55 	bl	8005ba4 <move_window>
			if (res != FR_OK) break;
 80060fa:	b998      	cbnz	r0, 8006124 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80060fc:	00a4      	lsls	r4, r4, #2
 80060fe:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006102:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8006104:	78cb      	ldrb	r3, [r1, #3]
 8006106:	061b      	lsls	r3, r3, #24
 8006108:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800610c:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8006110:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006114:	552a      	strb	r2, [r5, r4]
 8006116:	704b      	strb	r3, [r1, #1]
 8006118:	0c13      	lsrs	r3, r2, #16
 800611a:	0e12      	lsrs	r2, r2, #24
 800611c:	708b      	strb	r3, [r1, #2]
 800611e:	70ca      	strb	r2, [r1, #3]
 8006120:	e7c8      	b.n	80060b4 <put_fat+0x80>
			res = FR_INT_ERR;
 8006122:	2002      	movs	r0, #2
}
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006128 <create_chain>:
{
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800612c:	460f      	mov	r7, r1
 800612e:	b989      	cbnz	r1, 8006154 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8006130:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006134:	b1fe      	cbz	r6, 8006176 <create_chain+0x4e>
 8006136:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800613a:	429e      	cmp	r6, r3
 800613c:	bf28      	it	cs
 800613e:	2601      	movcs	r6, #1
 8006140:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006142:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8006146:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006148:	429c      	cmp	r4, r3
 800614a:	d317      	bcc.n	800617c <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 800614c:	2e01      	cmp	r6, #1
 800614e:	d814      	bhi.n	800617a <create_chain+0x52>
 8006150:	2400      	movs	r4, #0
 8006152:	e008      	b.n	8006166 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006154:	f7ff febe 	bl	8005ed4 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8006158:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800615a:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800615c:	d93b      	bls.n	80061d6 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800615e:	3001      	adds	r0, #1
 8006160:	d103      	bne.n	800616a <create_chain+0x42>
			ncl = 2;
 8006162:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006166:	4620      	mov	r0, r4
 8006168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800616a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800616e:	429c      	cmp	r4, r3
 8006170:	d3f9      	bcc.n	8006166 <create_chain+0x3e>
 8006172:	463e      	mov	r6, r7
 8006174:	e7e4      	b.n	8006140 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006176:	2601      	movs	r6, #1
 8006178:	e7e2      	b.n	8006140 <create_chain+0x18>
			ncl = 2;
 800617a:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	f7ff fea8 	bl	8005ed4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8006184:	b130      	cbz	r0, 8006194 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006186:	1c41      	adds	r1, r0, #1
 8006188:	d0eb      	beq.n	8006162 <create_chain+0x3a>
 800618a:	2801      	cmp	r0, #1
 800618c:	d023      	beq.n	80061d6 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 800618e:	42b4      	cmp	r4, r6
 8006190:	d1d7      	bne.n	8006142 <create_chain+0x1a>
 8006192:	e7dd      	b.n	8006150 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006194:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006198:	4621      	mov	r1, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f7ff ff4a 	bl	8006034 <put_fat>
	if (res == FR_OK && clst != 0) {
 80061a0:	b9b8      	cbnz	r0, 80061d2 <create_chain+0xaa>
 80061a2:	b97f      	cbnz	r7, 80061c4 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80061a4:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 80061a8:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	d0da      	beq.n	8006166 <create_chain+0x3e>
			fs->free_clust--;
 80061b0:	3b01      	subs	r3, #1
 80061b2:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 80061b6:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 80061c2:	e7d0      	b.n	8006166 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80061c4:	4622      	mov	r2, r4
 80061c6:	4639      	mov	r1, r7
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7ff ff33 	bl	8006034 <put_fat>
	if (res == FR_OK) {
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d0e8      	beq.n	80061a4 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80061d2:	2801      	cmp	r0, #1
 80061d4:	d0c5      	beq.n	8006162 <create_chain+0x3a>
 80061d6:	2401      	movs	r4, #1
 80061d8:	e7c5      	b.n	8006166 <create_chain+0x3e>

080061da <dir_next>:
{
 80061da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 80061de:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 80061e2:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80061e4:	b2b3      	uxth	r3, r6
{
 80061e6:	4604      	mov	r4, r0
 80061e8:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80061ea:	b913      	cbnz	r3, 80061f2 <dir_next+0x18>
		return FR_NO_FILE;
 80061ec:	2004      	movs	r0, #4
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80061f2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f8      	beq.n	80061ec <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80061fa:	f016 080f 	ands.w	r8, r6, #15
 80061fe:	d10b      	bne.n	8006218 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8006200:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8006204:	3301      	adds	r3, #1
 8006206:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800620a:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800620e:	b971      	cbnz	r1, 800622e <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006210:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8006214:	429e      	cmp	r6, r3
 8006216:	d2e9      	bcs.n	80061ec <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006218:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800621c:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006220:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8006224:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8006228:	2000      	movs	r0, #0
 800622a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800622e:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8006232:	3f01      	subs	r7, #1
 8006234:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8006238:	d1ee      	bne.n	8006218 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800623a:	f7ff fe4b 	bl	8005ed4 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800623e:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006240:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8006242:	d802      	bhi.n	800624a <dir_next+0x70>
 8006244:	2002      	movs	r0, #2
 8006246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800624a:	1c42      	adds	r2, r0, #1
 800624c:	d102      	bne.n	8006254 <dir_next+0x7a>
 800624e:	2001      	movs	r0, #1
 8006250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006254:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006258:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800625c:	429d      	cmp	r5, r3
 800625e:	d32f      	bcc.n	80062c0 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	d0c2      	beq.n	80061ec <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006266:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800626a:	f7ff ff5d 	bl	8006128 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800626e:	4605      	mov	r5, r0
 8006270:	2800      	cmp	r0, #0
 8006272:	d03e      	beq.n	80062f2 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 8006274:	2801      	cmp	r0, #1
 8006276:	d0e5      	beq.n	8006244 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d0e8      	beq.n	800624e <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800627c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006280:	f7ff fc2c 	bl	8005adc <sync_window>
 8006284:	4601      	mov	r1, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	d1e1      	bne.n	800624e <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800628a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006292:	f7ff fb0f 	bl	80058b4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006296:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800629a:	4629      	mov	r1, r5
 800629c:	4610      	mov	r0, r2
 800629e:	f7ff fe0b 	bl	8005eb8 <clust2sect>
						dp->fs->wflag = 1;
 80062a2:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80062a6:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062aa:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80062ae:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80062b2:	429f      	cmp	r7, r3
 80062b4:	d30e      	bcc.n	80062d4 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 80062b6:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 80062ba:	1bdf      	subs	r7, r3, r7
 80062bc:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 80062c0:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80062c4:	4629      	mov	r1, r5
 80062c6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80062ca:	f7ff fdf5 	bl	8005eb8 <clust2sect>
 80062ce:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 80062d2:	e7a1      	b.n	8006218 <dir_next+0x3e>
						dp->fs->wflag = 1;
 80062d4:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 80062d8:	f7ff fbd7 	bl	8005a8a <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80062dc:	2800      	cmp	r0, #0
 80062de:	d1b6      	bne.n	800624e <dir_next+0x74>
						dp->fs->winsect++;
 80062e0:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80062e4:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 80062e8:	3301      	adds	r3, #1
 80062ea:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062ee:	3701      	adds	r7, #1
 80062f0:	e7db      	b.n	80062aa <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80062f2:	2007      	movs	r0, #7
}
 80062f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080062f8 <follow_path>:
{
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80062fc:	780b      	ldrb	r3, [r1, #0]
 80062fe:	2b2f      	cmp	r3, #47	; 0x2f
{
 8006300:	4604      	mov	r4, r0
 8006302:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006304:	d001      	beq.n	800630a <follow_path+0x12>
 8006306:	2b5c      	cmp	r3, #92	; 0x5c
 8006308:	d100      	bne.n	800630c <follow_path+0x14>
		path++;
 800630a:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800630c:	2600      	movs	r6, #0
 800630e:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006312:	782b      	ldrb	r3, [r5, #0]
 8006314:	2b1f      	cmp	r3, #31
 8006316:	d936      	bls.n	8006386 <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006318:	4e5f      	ldr	r6, [pc, #380]	; (8006498 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800631a:	782b      	ldrb	r3, [r5, #0]
 800631c:	2b2f      	cmp	r3, #47	; 0x2f
 800631e:	46a8      	mov	r8, r5
 8006320:	f105 0501 	add.w	r5, r5, #1
 8006324:	d0f9      	beq.n	800631a <follow_path+0x22>
 8006326:	2b5c      	cmp	r3, #92	; 0x5c
 8006328:	d0f7      	beq.n	800631a <follow_path+0x22>
	sfn = dp->fn;
 800632a:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 800632e:	220b      	movs	r2, #11
 8006330:	2120      	movs	r1, #32
 8006332:	4638      	mov	r0, r7
 8006334:	f7ff fabe 	bl	80058b4 <mem_set>
	si = i = b = 0; ni = 8;
 8006338:	f04f 0e00 	mov.w	lr, #0
 800633c:	f108 39ff 	add.w	r9, r8, #4294967295
 8006340:	46f4      	mov	ip, lr
 8006342:	2108      	movs	r1, #8
 8006344:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 8006346:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800634a:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 800634c:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006350:	d928      	bls.n	80063a4 <follow_path+0xac>
 8006352:	2b2f      	cmp	r3, #47	; 0x2f
 8006354:	d026      	beq.n	80063a4 <follow_path+0xac>
 8006356:	2b5c      	cmp	r3, #92	; 0x5c
 8006358:	d024      	beq.n	80063a4 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 800635a:	2b2e      	cmp	r3, #46	; 0x2e
 800635c:	f000 8085 	beq.w	800646a <follow_path+0x172>
 8006360:	4571      	cmp	r1, lr
 8006362:	d90d      	bls.n	8006380 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8006364:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006366:	bf48      	it	mi
 8006368:	3b80      	submi	r3, #128	; 0x80
 800636a:	4d4c      	ldr	r5, [pc, #304]	; (800649c <follow_path+0x1a4>)
 800636c:	bf44      	itt	mi
 800636e:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 8006370:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8006374:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8006378:	2800      	cmp	r0, #0
 800637a:	d07d      	beq.n	8006478 <follow_path+0x180>
 800637c:	4283      	cmp	r3, r0
 800637e:	d1f9      	bne.n	8006374 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006380:	2006      	movs	r0, #6
	return res;
 8006382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8006386:	4631      	mov	r1, r6
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff fe04 	bl	8005f96 <dir_sdi>
		dp->dir = 0;
 800638e:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8006392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8006396:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 800639a:	f807 300e 	strb.w	r3, [r7, lr]
 800639e:	f10e 0e01 	add.w	lr, lr, #1
 80063a2:	e7d0      	b.n	8006346 <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80063a4:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 80063a6:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80063aa:	bf34      	ite	cc
 80063ac:	2304      	movcc	r3, #4
 80063ae:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80063b0:	f1be 0f00 	cmp.w	lr, #0
 80063b4:	d0e4      	beq.n	8006380 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80063b6:	7838      	ldrb	r0, [r7, #0]
 80063b8:	28e5      	cmp	r0, #229	; 0xe5
 80063ba:	bf04      	itt	eq
 80063bc:	2005      	moveq	r0, #5
 80063be:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 80063c0:	2908      	cmp	r1, #8
 80063c2:	bf04      	itt	eq
 80063c4:	0092      	lsleq	r2, r2, #2
 80063c6:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80063c8:	f002 0103 	and.w	r1, r2, #3
 80063cc:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80063ce:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80063d2:	bf08      	it	eq
 80063d4:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80063d8:	2a04      	cmp	r2, #4
 80063da:	bf08      	it	eq
 80063dc:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80063e0:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063e2:	2100      	movs	r1, #0
 80063e4:	4620      	mov	r0, r4
 80063e6:	f7ff fdd6 	bl	8005f96 <dir_sdi>
	if (res != FR_OK) return res;
 80063ea:	b9f8      	cbnz	r0, 800642c <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 80063ec:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80063f0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80063f4:	f7ff fbd6 	bl	8005ba4 <move_window>
		if (res != FR_OK) break;
 80063f8:	b9c0      	cbnz	r0, 800642c <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80063fa:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063fe:	7813      	ldrb	r3, [r2, #0]
 8006400:	b19b      	cbz	r3, 800642a <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006402:	7ad3      	ldrb	r3, [r2, #11]
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	d40b      	bmi.n	8006420 <follow_path+0x128>
 8006408:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800640c:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006410:	4573      	cmp	r3, lr
 8006412:	d00b      	beq.n	800642c <follow_path+0x134>
 8006414:	f812 7b01 	ldrb.w	r7, [r2], #1
 8006418:	f813 1b01 	ldrb.w	r1, [r3], #1
 800641c:	428f      	cmp	r7, r1
 800641e:	d0f7      	beq.n	8006410 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8006420:	2100      	movs	r1, #0
 8006422:	4620      	mov	r0, r4
 8006424:	f7ff fed9 	bl	80061da <dir_next>
 8006428:	e7df      	b.n	80063ea <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800642a:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 800642c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8006430:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006432:	b138      	cbz	r0, 8006444 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006434:	2804      	cmp	r0, #4
 8006436:	d12c      	bne.n	8006492 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006438:	f013 0f04 	tst.w	r3, #4
 800643c:	bf08      	it	eq
 800643e:	2005      	moveq	r0, #5
 8006440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006444:	075a      	lsls	r2, r3, #29
 8006446:	d424      	bmi.n	8006492 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8006448:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800644c:	7acb      	ldrb	r3, [r1, #11]
 800644e:	06db      	lsls	r3, r3, #27
 8006450:	d508      	bpl.n	8006464 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8006452:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8006456:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800645a:	f7ff fb08 	bl	8005a6e <ld_clust.isra.0>
 800645e:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006462:	e75a      	b.n	800631a <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006464:	2005      	movs	r0, #5
 8006466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800646a:	2908      	cmp	r1, #8
 800646c:	d188      	bne.n	8006380 <follow_path+0x88>
			b <<= 2; continue;
 800646e:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8006470:	468e      	mov	lr, r1
			b <<= 2; continue;
 8006472:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8006474:	210b      	movs	r1, #11
 8006476:	e766      	b.n	8006346 <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006478:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800647c:	2819      	cmp	r0, #25
 800647e:	d98a      	bls.n	8006396 <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8006480:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8006484:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 8006486:	bf9e      	ittt	ls
 8006488:	3b20      	subls	r3, #32
 800648a:	f042 0201 	orrls.w	r2, r2, #1
 800648e:	b2db      	uxtbls	r3, r3
 8006490:	e783      	b.n	800639a <follow_path+0xa2>
}
 8006492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006496:	bf00      	nop
 8006498:	08009e0c 	.word	0x08009e0c
 800649c:	08009e8b 	.word	0x08009e8b

080064a0 <dir_register>:
{
 80064a0:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 80064a2:	2100      	movs	r1, #0
{
 80064a4:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 80064a6:	f7ff fd76 	bl	8005f96 <dir_sdi>
	if (res == FR_OK) {
 80064aa:	4604      	mov	r4, r0
 80064ac:	bb78      	cbnz	r0, 800650e <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 80064ae:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 80064b2:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 80064b6:	f7ff fb75 	bl	8005ba4 <move_window>
			if (res != FR_OK) break;
 80064ba:	4604      	mov	r4, r0
 80064bc:	bb38      	cbnz	r0, 800650e <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80064be:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2be5      	cmp	r3, #229	; 0xe5
 80064c6:	d11b      	bne.n	8006500 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 80064c8:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 80064cc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 80064d0:	f7ff fb68 	bl	8005ba4 <move_window>
		if (res == FR_OK) {
 80064d4:	4604      	mov	r4, r0
 80064d6:	b988      	cbnz	r0, 80064fc <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80064d8:	4601      	mov	r1, r0
 80064da:	2220      	movs	r2, #32
 80064dc:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 80064e0:	f7ff f9e8 	bl	80058b4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80064e4:	220b      	movs	r2, #11
 80064e6:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 80064ea:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 80064ee:	f7ff f9d7 	bl	80058a0 <mem_cpy>
			dp->fs->wflag = 1;
 80064f2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80064fc:	4620      	mov	r0, r4
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0e1      	beq.n	80064c8 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006504:	2101      	movs	r1, #1
 8006506:	4628      	mov	r0, r5
 8006508:	f7ff fe67 	bl	80061da <dir_next>
 800650c:	e7cd      	b.n	80064aa <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800650e:	2c04      	cmp	r4, #4
 8006510:	bf08      	it	eq
 8006512:	2407      	moveq	r4, #7
 8006514:	e7f2      	b.n	80064fc <dir_register+0x5c>

08006516 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006516:	2901      	cmp	r1, #1
{
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	4604      	mov	r4, r0
 800651c:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800651e:	d801      	bhi.n	8006524 <remove_chain+0xe>
		res = FR_INT_ERR;
 8006520:	2002      	movs	r0, #2
 8006522:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006524:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8006528:	4299      	cmp	r1, r3
 800652a:	d2f9      	bcs.n	8006520 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800652c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8006530:	429d      	cmp	r5, r3
 8006532:	d205      	bcs.n	8006540 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006534:	4629      	mov	r1, r5
 8006536:	4620      	mov	r0, r4
 8006538:	f7ff fccc 	bl	8005ed4 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 800653c:	4606      	mov	r6, r0
 800653e:	b908      	cbnz	r0, 8006544 <remove_chain+0x2e>
		res = FR_INT_ERR;
 8006540:	2000      	movs	r0, #0
 8006542:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006544:	2801      	cmp	r0, #1
 8006546:	d0eb      	beq.n	8006520 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006548:	1c41      	adds	r1, r0, #1
 800654a:	d014      	beq.n	8006576 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800654c:	2200      	movs	r2, #0
 800654e:	4629      	mov	r1, r5
 8006550:	4620      	mov	r0, r4
 8006552:	f7ff fd6f 	bl	8006034 <put_fat>
			if (res != FR_OK) break;
 8006556:	b978      	cbnz	r0, 8006578 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006558:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	d008      	beq.n	8006572 <remove_chain+0x5c>
				fs->free_clust++;
 8006560:	3301      	adds	r3, #1
 8006562:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8006566:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 8006572:	4635      	mov	r5, r6
 8006574:	e7da      	b.n	800652c <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006576:	2001      	movs	r0, #1
}
 8006578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800657c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800657c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800657e:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006580:	a804      	add	r0, sp, #16
{
 8006582:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8006584:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8006588:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 800658a:	f7ff fa41 	bl	8005a10 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800658e:	1e05      	subs	r5, r0, #0
 8006590:	db21      	blt.n	80065d6 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006592:	4913      	ldr	r1, [pc, #76]	; (80065e0 <f_mount+0x64>)
 8006594:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8006598:	b164      	cbz	r4, 80065b4 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800659a:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <f_mount+0x68>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4294      	cmp	r4, r2
 80065a0:	bf04      	itt	eq
 80065a2:	2200      	moveq	r2, #0
 80065a4:	601a      	streq	r2, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	2000      	movs	r0, #0
 80065aa:	4294      	cmp	r4, r2
 80065ac:	bf08      	it	eq
 80065ae:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80065b0:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 80065b4:	9801      	ldr	r0, [sp, #4]
 80065b6:	b110      	cbz	r0, 80065be <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 80065b8:	2300      	movs	r3, #0
 80065ba:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80065be:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80065c2:	b130      	cbz	r0, 80065d2 <f_mount+0x56>
 80065c4:	2e01      	cmp	r6, #1
 80065c6:	d108      	bne.n	80065da <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80065c8:	2200      	movs	r2, #0
 80065ca:	4669      	mov	r1, sp
 80065cc:	a801      	add	r0, sp, #4
 80065ce:	f7ff fb33 	bl	8005c38 <find_volume>
	LEAVE_FF(fs, res);
}
 80065d2:	b004      	add	sp, #16
 80065d4:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80065d6:	200b      	movs	r0, #11
 80065d8:	e7fb      	b.n	80065d2 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80065da:	2000      	movs	r0, #0
 80065dc:	e7f9      	b.n	80065d2 <f_mount+0x56>
 80065de:	bf00      	nop
 80065e0:	200085c8 	.word	0x200085c8
 80065e4:	200085cc 	.word	0x200085cc

080065e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80065e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065ec:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80065f0:	4690      	mov	r8, r2
 80065f2:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80065f4:	4605      	mov	r5, r0
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f000 80a6 	beq.w	8006748 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 80065fc:	2300      	movs	r3, #0
 80065fe:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006602:	f002 021e 	and.w	r2, r2, #30
 8006606:	a901      	add	r1, sp, #4
 8006608:	a886      	add	r0, sp, #536	; 0x218
 800660a:	f7ff fb15 	bl	8005c38 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800660e:	4606      	mov	r6, r0
 8006610:	2800      	cmp	r0, #0
 8006612:	f040 8094 	bne.w	800673e <f_open+0x156>
		INIT_BUF(dj);
 8006616:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8006618:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800661a:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800661c:	a806      	add	r0, sp, #24
 800661e:	f7ff fe6b 	bl	80062f8 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006622:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 8006626:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006628:	b948      	cbnz	r0, 800663e <f_open+0x56>
			if (!dir)	/* Default directory itself */
 800662a:	2c00      	cmp	r4, #0
 800662c:	d05b      	beq.n	80066e6 <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800662e:	f017 0f1e 	tst.w	r7, #30
 8006632:	bf14      	ite	ne
 8006634:	2101      	movne	r1, #1
 8006636:	2100      	moveq	r1, #0
 8006638:	a806      	add	r0, sp, #24
 800663a:	f7ff f943 	bl	80058c4 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800663e:	f018 0f1c 	tst.w	r8, #28
 8006642:	d05b      	beq.n	80066fc <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 8006644:	2800      	cmp	r0, #0
 8006646:	d050      	beq.n	80066ea <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006648:	2804      	cmp	r0, #4
 800664a:	d14a      	bne.n	80066e2 <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800664c:	4b51      	ldr	r3, [pc, #324]	; (8006794 <f_open+0x1ac>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	b11a      	cbz	r2, 800665a <f_open+0x72>
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 809b 	bne.w	8006790 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800665a:	a806      	add	r0, sp, #24
 800665c:	f7ff ff20 	bl	80064a0 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006660:	2800      	cmp	r0, #0
 8006662:	d13e      	bne.n	80066e2 <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 8006664:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006666:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800666a:	073b      	lsls	r3, r7, #28
 800666c:	d550      	bpl.n	8006710 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 800666e:	f000 fabf 	bl	8006bf0 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006672:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006676:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 800667a:	73a0      	strb	r0, [r4, #14]
 800667c:	73e3      	strb	r3, [r4, #15]
 800667e:	0c03      	lsrs	r3, r0, #16
 8006680:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006682:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006686:	f884 801c 	strb.w	r8, [r4, #28]
 800668a:	f884 801d 	strb.w	r8, [r4, #29]
 800668e:	f884 801e 	strb.w	r8, [r4, #30]
 8006692:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006696:	7423      	strb	r3, [r4, #16]
 8006698:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800669a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800669c:	4621      	mov	r1, r4
 800669e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80066a2:	f7ff f9e4 	bl	8005a6e <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 80066a6:	f884 801a 	strb.w	r8, [r4, #26]
 80066aa:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80066ae:	f884 8014 	strb.w	r8, [r4, #20]
 80066b2:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 80066b6:	9b86      	ldr	r3, [sp, #536]	; 0x218
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80066be:	4680      	mov	r8, r0
 80066c0:	b330      	cbz	r0, 8006710 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 80066c2:	4601      	mov	r1, r0
 80066c4:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 80066c6:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 80066ca:	f7ff ff24 	bl	8006516 <remove_chain>
					if (res == FR_OK) {
 80066ce:	b940      	cbnz	r0, 80066e2 <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80066d0:	9886      	ldr	r0, [sp, #536]	; 0x218
 80066d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80066d6:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80066da:	4649      	mov	r1, r9
 80066dc:	f7ff fa62 	bl	8005ba4 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 80066e0:	b1b0      	cbz	r0, 8006710 <f_open+0x128>
					res = FR_DENIED;
 80066e2:	4606      	mov	r6, r0
 80066e4:	e02b      	b.n	800673e <f_open+0x156>
				res = FR_INVALID_NAME;
 80066e6:	2006      	movs	r0, #6
 80066e8:	e7a9      	b.n	800663e <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80066ea:	7ae3      	ldrb	r3, [r4, #11]
 80066ec:	f013 0f11 	tst.w	r3, #17
 80066f0:	d12e      	bne.n	8006750 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80066f2:	f018 0f04 	tst.w	r8, #4
 80066f6:	d0b8      	beq.n	800666a <f_open+0x82>
						res = FR_EXIST;
 80066f8:	2608      	movs	r6, #8
 80066fa:	e020      	b.n	800673e <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d1f0      	bne.n	80066e2 <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006700:	7ae3      	ldrb	r3, [r4, #11]
 8006702:	06d8      	lsls	r0, r3, #27
 8006704:	d422      	bmi.n	800674c <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006706:	f018 0f02 	tst.w	r8, #2
 800670a:	d001      	beq.n	8006710 <f_open+0x128>
 800670c:	07da      	lsls	r2, r3, #31
 800670e:	d41f      	bmi.n	8006750 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006710:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006712:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8006714:	bf48      	it	mi
 8006716:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800671a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800671e:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006722:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 8006726:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800672a:	bf14      	ite	ne
 800672c:	2101      	movne	r1, #1
 800672e:	2100      	moveq	r1, #0
 8006730:	a806      	add	r0, sp, #24
 8006732:	f7ff f8f9 	bl	8005928 <inc_lock>
 8006736:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800673a:	b958      	cbnz	r0, 8006754 <f_open+0x16c>
 800673c:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800673e:	4630      	mov	r0, r6
 8006740:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8006744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 8006748:	2609      	movs	r6, #9
 800674a:	e7f8      	b.n	800673e <f_open+0x156>
					res = FR_NO_FILE;
 800674c:	2604      	movs	r6, #4
 800674e:	e7f6      	b.n	800673e <f_open+0x156>
					res = FR_DENIED;
 8006750:	2607      	movs	r6, #7
 8006752:	e7f4      	b.n	800673e <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 8006754:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006758:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 800675c:	2700      	movs	r7, #0
 800675e:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006762:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8006766:	4621      	mov	r1, r4
 8006768:	f7ff f981 	bl	8005a6e <ld_clust.isra.0>
 800676c:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006770:	69e3      	ldr	r3, [r4, #28]
 8006772:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 8006776:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 800677a:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 800677e:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8006782:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8006786:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 800678a:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800678e:	e7d6      	b.n	800673e <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006790:	2012      	movs	r0, #18
 8006792:	e7a6      	b.n	80066e2 <f_open+0xfa>
 8006794:	200085cc 	.word	0x200085cc

08006798 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800679e:	2300      	movs	r3, #0
 80067a0:	f8cb 3000 	str.w	r3, [fp]
{
 80067a4:	4604      	mov	r4, r0
 80067a6:	4689      	mov	r9, r1
 80067a8:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 80067aa:	f7ff f949 	bl	8005a40 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80067ae:	4606      	mov	r6, r0
 80067b0:	bb50      	cbnz	r0, 8006808 <f_write+0x70>
	if (fp->err)							/* Check error */
 80067b2:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f040 80d9 	bne.w	800696e <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80067bc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80067c0:	0799      	lsls	r1, r3, #30
 80067c2:	f140 80d6 	bpl.w	8006972 <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80067c6:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80067ca:	42df      	cmn	r7, r3
 80067cc:	f0c0 8083 	bcc.w	80068d6 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80067d0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80067d4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80067d8:	4293      	cmp	r3, r2
 80067da:	f200 80c5 	bhi.w	8006968 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80067de:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80067e2:	f043 0320 	orr.w	r3, r3, #32
 80067e6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80067ea:	e00d      	b.n	8006808 <f_write+0x70>
					if (fp->cltbl)
 80067ec:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80067f0:	b173      	cbz	r3, 8006810 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff f8f8 	bl	80059e8 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80067f8:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d0e8      	beq.n	80067d0 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80067fe:	2901      	cmp	r1, #1
 8006800:	d109      	bne.n	8006816 <f_write+0x7e>
 8006802:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006804:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8006808:	4630      	mov	r0, r6
 800680a:	b003      	add	sp, #12
 800680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006810:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8006814:	e07a      	b.n	800690c <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006816:	1c4a      	adds	r2, r1, #1
 8006818:	d101      	bne.n	800681e <f_write+0x86>
 800681a:	2601      	movs	r6, #1
 800681c:	e7f2      	b.n	8006804 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800681e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8006822:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006826:	b90b      	cbnz	r3, 800682c <f_write+0x94>
 8006828:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800682c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006830:	065b      	lsls	r3, r3, #25
 8006832:	d511      	bpl.n	8006858 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006834:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006838:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800683c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8006840:	2301      	movs	r3, #1
 8006842:	4621      	mov	r1, r4
 8006844:	f7fe ff9a 	bl	800577c <disk_write>
 8006848:	2800      	cmp	r0, #0
 800684a:	d1e6      	bne.n	800681a <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 800684c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006854:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006858:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 800685c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8006860:	4650      	mov	r0, sl
 8006862:	f7ff fb29 	bl	8005eb8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006866:	2800      	cmp	r0, #0
 8006868:	d0cb      	beq.n	8006802 <f_write+0x6a>
			sect += csect;
 800686a:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800686c:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800686e:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006872:	d04e      	beq.n	8006912 <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006874:	9a01      	ldr	r2, [sp, #4]
 8006876:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800687a:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800687e:	442a      	add	r2, r5
 8006880:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8006882:	bf84      	itt	hi
 8006884:	9a01      	ldrhi	r2, [sp, #4]
 8006886:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006888:	462b      	mov	r3, r5
 800688a:	4642      	mov	r2, r8
 800688c:	4649      	mov	r1, r9
 800688e:	f7fe ff75 	bl	800577c <disk_write>
 8006892:	2800      	cmp	r0, #0
 8006894:	d1c1      	bne.n	800681a <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006896:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800689a:	eba1 0108 	sub.w	r1, r1, r8
 800689e:	428d      	cmp	r5, r1
 80068a0:	d90c      	bls.n	80068bc <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80068a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068a6:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80068aa:	4620      	mov	r0, r4
 80068ac:	f7fe fff8 	bl	80058a0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80068b0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80068b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b8:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80068bc:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80068be:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80068c2:	442b      	add	r3, r5
 80068c4:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80068c8:	f8db 3000 	ldr.w	r3, [fp]
 80068cc:	442b      	add	r3, r5
 80068ce:	44a9      	add	r9, r5
 80068d0:	f8cb 3000 	str.w	r3, [fp]
 80068d4:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 80068d6:	2f00      	cmp	r7, #0
 80068d8:	f43f af7a 	beq.w	80067d0 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80068dc:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 80068e0:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80068e4:	bb5b      	cbnz	r3, 800693e <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80068e6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80068ea:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80068ee:	3b01      	subs	r3, #1
 80068f0:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80068f4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	d197      	bne.n	800682c <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80068fc:	2900      	cmp	r1, #0
 80068fe:	f47f af75 	bne.w	80067ec <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 8006902:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8006906:	2900      	cmp	r1, #0
 8006908:	f47f af79 	bne.w	80067fe <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800690c:	f7ff fc0c 	bl	8006128 <create_chain>
 8006910:	e772      	b.n	80067f8 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006912:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8006916:	4598      	cmp	r8, r3
 8006918:	d00f      	beq.n	800693a <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 800691a:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800691e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8006922:	429a      	cmp	r2, r3
 8006924:	d209      	bcs.n	800693a <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006926:	2301      	movs	r3, #1
 8006928:	4642      	mov	r2, r8
 800692a:	4621      	mov	r1, r4
 800692c:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8006930:	f7fe ff16 	bl	8005760 <disk_read>
				if (fp->fptr < fp->fsize &&
 8006934:	2800      	cmp	r0, #0
 8006936:	f47f af70 	bne.w	800681a <f_write+0x82>
			fp->dsect = sect;
 800693a:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800693e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8006942:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8006946:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800694a:	42bd      	cmp	r5, r7
 800694c:	bf28      	it	cs
 800694e:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006950:	462a      	mov	r2, r5
 8006952:	4649      	mov	r1, r9
 8006954:	4420      	add	r0, r4
 8006956:	f7fe ffa3 	bl	80058a0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800695a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800695e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006962:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8006966:	e7aa      	b.n	80068be <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006968:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800696c:	e737      	b.n	80067de <f_write+0x46>
 800696e:	461e      	mov	r6, r3
 8006970:	e74a      	b.n	8006808 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006972:	2607      	movs	r6, #7
 8006974:	e748      	b.n	8006808 <f_write+0x70>

08006976 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006976:	b570      	push	{r4, r5, r6, lr}
 8006978:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800697a:	f7ff f861 	bl	8005a40 <validate>
	if (res == FR_OK) {
 800697e:	2800      	cmp	r0, #0
 8006980:	d158      	bne.n	8006a34 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006982:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006986:	069a      	lsls	r2, r3, #26
 8006988:	d554      	bpl.n	8006a34 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800698a:	065b      	lsls	r3, r3, #25
 800698c:	d511      	bpl.n	80069b2 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800698e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006992:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8006996:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800699a:	2301      	movs	r3, #1
 800699c:	4621      	mov	r1, r4
 800699e:	f7fe feed 	bl	800577c <disk_write>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d145      	bne.n	8006a32 <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80069a6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80069aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ae:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80069b2:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80069b6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80069ba:	f7ff f8f3 	bl	8005ba4 <move_window>
 80069be:	4606      	mov	r6, r0
			if (res == FR_OK) {
 80069c0:	bbc0      	cbnz	r0, 8006a34 <f_sync+0xbe>
				dir = fp->dir_ptr;
 80069c2:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80069c6:	7aeb      	ldrb	r3, [r5, #11]
 80069c8:	f043 0320 	orr.w	r3, r3, #32
 80069cc:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80069ce:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80069d2:	772b      	strb	r3, [r5, #28]
 80069d4:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	776b      	strb	r3, [r5, #29]
 80069dc:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80069e0:	77ab      	strb	r3, [r5, #30]
 80069e2:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 80069e6:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80069e8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 80069ec:	76ab      	strb	r3, [r5, #26]
 80069ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80069f2:	0c1b      	lsrs	r3, r3, #16
 80069f4:	752b      	strb	r3, [r5, #20]
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80069fa:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 80069fc:	f000 f8f8 	bl	8006bf0 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006a00:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006a04:	75a8      	strb	r0, [r5, #22]
 8006a06:	75eb      	strb	r3, [r5, #23]
 8006a08:	0c03      	lsrs	r3, r0, #16
 8006a0a:	0e00      	lsrs	r0, r0, #24
 8006a0c:	762b      	strb	r3, [r5, #24]
 8006a0e:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006a10:	74ae      	strb	r6, [r5, #18]
 8006a12:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8006a14:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8006a18:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8006a1c:	f023 0320 	bic.w	r3, r3, #32
 8006a20:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8006a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8006a2e:	f7ff b85c 	b.w	8005aea <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006a32:	2001      	movs	r0, #1
}
 8006a34:	bd70      	pop	{r4, r5, r6, pc}

08006a36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006a36:	b510      	push	{r4, lr}
 8006a38:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006a3a:	f7ff ff9c 	bl	8006976 <f_sync>
	if (res == FR_OK)
 8006a3e:	b950      	cbnz	r0, 8006a56 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7fe fffd 	bl	8005a40 <validate>
		if (res == FR_OK) {
 8006a46:	b930      	cbnz	r0, 8006a56 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006a48:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8006a4c:	f7fe ffb0 	bl	80059b0 <dec_lock>
			if (res == FR_OK)
 8006a50:	b908      	cbnz	r0, 8006a56 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006a52:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8006a56:	bd10      	pop	{r4, pc}

08006a58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a58:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <FATFS_LinkDriverEx+0x40>)
 8006a5c:	7a5c      	ldrb	r4, [r3, #9]
 8006a5e:	2c01      	cmp	r4, #1
 8006a60:	d818      	bhi.n	8006a94 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a62:	7a5d      	ldrb	r5, [r3, #9]
 8006a64:	b2ed      	uxtb	r5, r5
 8006a66:	2400      	movs	r4, #0
 8006a68:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8006a6a:	7a5d      	ldrb	r5, [r3, #9]
 8006a6c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006a70:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8006a72:	7a58      	ldrb	r0, [r3, #9]
 8006a74:	4418      	add	r0, r3
 8006a76:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006a78:	7a5a      	ldrb	r2, [r3, #9]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	1c50      	adds	r0, r2, #1
 8006a7e:	b2c0      	uxtb	r0, r0
 8006a80:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8006a82:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006a84:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8006a86:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006a88:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8006a8a:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8006a8c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006a8e:	70cc      	strb	r4, [r1, #3]
 8006a90:	4620      	mov	r0, r4
 8006a92:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8006a94:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8006a96:	bd30      	pop	{r4, r5, pc}
 8006a98:	200085e8 	.word	0x200085e8

08006a9c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f7ff bfdb 	b.w	8006a58 <FATFS_LinkDriverEx>
	...

08006aa4 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 8006aa4:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <FATFS_UnLinkDriverEx+0x2c>)
 8006aa6:	7a53      	ldrb	r3, [r2, #9]
 8006aa8:	b17b      	cbz	r3, 8006aca <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 8006aaa:	7803      	ldrb	r3, [r0, #0]
 8006aac:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006ab4:	6848      	ldr	r0, [r1, #4]
 8006ab6:	b140      	cbz	r0, 8006aca <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8006ab8:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8006aba:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8006abc:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8006abe:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8006ac0:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	7253      	strb	r3, [r2, #9]
 8006ac8:	4770      	bx	lr
  uint8_t ret = 1;
 8006aca:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	200085e8 	.word	0x200085e8

08006ad4 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f7ff bfe5 	b.w	8006aa4 <FATFS_UnLinkDriverEx>

08006ada <arm_abs_f32>:

void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8006ada:	b570      	push	{r4, r5, r6, lr}

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8006adc:	0895      	lsrs	r5, r2, #2
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	462e      	mov	r6, r5
 8006ae4:	3410      	adds	r4, #16
 8006ae6:	3310      	adds	r3, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006ae8:	b94e      	cbnz	r6, 8006afe <arm_abs_f32+0x24>
 8006aea:	012b      	lsls	r3, r5, #4
 8006aec:	4418      	add	r0, r3
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8006aee:	f002 0203 	and.w	r2, r2, #3
 8006af2:	4419      	add	r1, r3
 8006af4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #ifndef ARM_MATH_CM0_FAMILY   */

  while(blkCnt > 0u)
 8006af8:	4290      	cmp	r0, r2
 8006afa:	d11a      	bne.n	8006b32 <arm_abs_f32+0x58>
    *pDst++ = fabsf(*pSrc++);

    /* Decrement the loop counter */
    blkCnt--;
  }
}
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
    in1 = *pSrc;
 8006afe:	ed14 6a04 	vldr	s12, [r4, #-16]
    in2 = *(pSrc + 1);
 8006b02:	ed54 6a03 	vldr	s13, [r4, #-12]
    in3 = *(pSrc + 2);
 8006b06:	ed14 7a02 	vldr	s14, [r4, #-8]
    in4 = *(pSrc + 3);
 8006b0a:	ed54 7a01 	vldr	s15, [r4, #-4]
    in1 = fabsf(in1);
 8006b0e:	eeb0 6ac6 	vabs.f32	s12, s12
    in2 = fabsf(in2);
 8006b12:	eef0 6ae6 	vabs.f32	s13, s13
    in3 = fabsf(in3);
 8006b16:	eeb0 7ac7 	vabs.f32	s14, s14
    in4 = fabsf(in4);
 8006b1a:	eef0 7ae7 	vabs.f32	s15, s15
    *pDst = in1;
 8006b1e:	ed03 6a04 	vstr	s12, [r3, #-16]
    *(pDst + 1) = in2;
 8006b22:	ed43 6a03 	vstr	s13, [r3, #-12]
    *(pDst + 2) = in3;
 8006b26:	ed03 7a02 	vstr	s14, [r3, #-8]
    *(pDst + 3) = in4;
 8006b2a:	ed43 7a01 	vstr	s15, [r3, #-4]
    blkCnt--;
 8006b2e:	3e01      	subs	r6, #1
 8006b30:	e7d8      	b.n	8006ae4 <arm_abs_f32+0xa>
    *pDst++ = fabsf(*pSrc++);
 8006b32:	ecf0 7a01 	vldmia	r0!, {s15}
 8006b36:	eef0 7ae7 	vabs.f32	s15, s15
 8006b3a:	ece1 7a01 	vstmia	r1!, {s15}
 8006b3e:	e7db      	b.n	8006af8 <arm_abs_f32+0x1e>

08006b40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006b40:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8006b42:	2001      	movs	r0, #1
 8006b44:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8006b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	d10b      	bne.n	8006b68 <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 8006b50:	4807      	ldr	r0, [pc, #28]	; (8006b70 <BSP_SD_Init+0x30>)
 8006b52:	f7fd fce1 	bl	8004518 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8006b56:	b938      	cbnz	r0, 8006b68 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b5c:	4804      	ldr	r0, [pc, #16]	; (8006b70 <BSP_SD_Init+0x30>)
 8006b5e:	f7fd fd07 	bl	8004570 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8006b62:	3000      	adds	r0, #0
 8006b64:	bf18      	it	ne
 8006b66:	2001      	movne	r0, #1
}
 8006b68:	b003      	add	sp, #12
 8006b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b6e:	bf00      	nop
 8006b70:	20008bb4 	.word	0x20008bb4

08006b74 <BSP_SD_ReadBlocks>:
{
 8006b74:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	460a      	mov	r2, r1
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	4804      	ldr	r0, [pc, #16]	; (8006b90 <BSP_SD_ReadBlocks+0x1c>)
 8006b80:	f7fd f95f 	bl	8003e42 <HAL_SD_ReadBlocks>
}
 8006b84:	3000      	adds	r0, #0
 8006b86:	bf18      	it	ne
 8006b88:	2001      	movne	r0, #1
 8006b8a:	b003      	add	sp, #12
 8006b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b90:	20008bb4 	.word	0x20008bb4

08006b94 <BSP_SD_WriteBlocks>:
{
 8006b94:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	4601      	mov	r1, r0
 8006b9e:	4804      	ldr	r0, [pc, #16]	; (8006bb0 <BSP_SD_WriteBlocks+0x1c>)
 8006ba0:	f7fd fa2e 	bl	8004000 <HAL_SD_WriteBlocks>
}
 8006ba4:	3000      	adds	r0, #0
 8006ba6:	bf18      	it	ne
 8006ba8:	2001      	movne	r0, #1
 8006baa:	b003      	add	sp, #12
 8006bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bb0:	20008bb4 	.word	0x20008bb4

08006bb4 <BSP_SD_GetCardState>:
{
 8006bb4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006bb6:	4803      	ldr	r0, [pc, #12]	; (8006bc4 <BSP_SD_GetCardState+0x10>)
 8006bb8:	f7fd fd5e 	bl	8004678 <HAL_SD_GetCardState>
}
 8006bbc:	3804      	subs	r0, #4
 8006bbe:	bf18      	it	ne
 8006bc0:	2001      	movne	r0, #1
 8006bc2:	bd08      	pop	{r3, pc}
 8006bc4:	20008bb4 	.word	0x20008bb4

08006bc8 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006bc8:	4601      	mov	r1, r0
 8006bca:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <BSP_SD_GetCardInfo+0x8>)
 8006bcc:	f7fd bcbe 	b.w	800454c <HAL_SD_GetCardInfo>
 8006bd0:	20008bb4 	.word	0x20008bb4

08006bd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006bd4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SD_Path);
 8006bd6:	4903      	ldr	r1, [pc, #12]	; (8006be4 <MX_FATFS_Init+0x10>)
 8006bd8:	4803      	ldr	r0, [pc, #12]	; (8006be8 <MX_FATFS_Init+0x14>)
 8006bda:	f7ff ff5f 	bl	8006a9c <FATFS_LinkDriver>
 8006bde:	4b03      	ldr	r3, [pc, #12]	; (8006bec <MX_FATFS_Init+0x18>)
 8006be0:	7018      	strb	r0, [r3, #0]
 8006be2:	bd08      	pop	{r3, pc}
 8006be4:	20008615 	.word	0x20008615
 8006be8:	08009df8 	.word	0x08009df8
 8006bec:	20008614 	.word	0x20008614

08006bf0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	4770      	bx	lr

08006bf4 <arm_radix8_butterfly_f32>:
	void arm_radix8_butterfly_f32(
	float32_t * pSrc,
	uint16_t fftLen,
	const float32_t * pCoef,
	uint16_t twidCoefModifier)
	{
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	ed2d 8b10 	vpush	{d8-d15}
	         pSrc[2 * i7 + 1] = t2 + r3;
	         r1 = (r6 - r8) * C81;
	         r6 = (r6 + r8) * C81;
	         r2 = (s6 - s8) * C81;
	         s6 = (s6 + s8) * C81;
	         t1 = r5 - r1;
 8006bfc:	eddf 5acc 	vldr	s11, [pc, #816]	; 8006f30 <arm_radix8_butterfly_f32+0x33c>
	{
 8006c00:	b09d      	sub	sp, #116	; 0x74
 8006c02:	eeb0 5a65 	vmov.f32	s10, s11
 8006c06:	910d      	str	r1, [sp, #52]	; 0x34
 8006c08:	9202      	str	r2, [sp, #8]
 8006c0a:	9301      	str	r3, [sp, #4]
	   n2 = fftLen;
 8006c0c:	9103      	str	r1, [sp, #12]
	      n2 = n2 >> 3;
 8006c0e:	9b03      	ldr	r3, [sp, #12]
 8006c10:	08da      	lsrs	r2, r3, #3
 8006c12:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8006c16:	1954      	adds	r4, r2, r5
 8006c18:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 8006c1c:	4414      	add	r4, r2
 8006c1e:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8006c22:	4414      	add	r4, r2
 8006c24:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8006c28:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 8006c2c:	4414      	add	r4, r2
 8006c2e:	00d9      	lsls	r1, r3, #3
 8006c30:	eb00 0c09 	add.w	ip, r0, r9
 8006c34:	0113      	lsls	r3, r2, #4
 8006c36:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8006c3a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c40:	eb0c 0a09 	add.w	sl, ip, r9
 8006c44:	f100 0804 	add.w	r8, r0, #4
 8006c48:	f10e 0e04 	add.w	lr, lr, #4
 8006c4c:	3704      	adds	r7, #4
 8006c4e:	3604      	adds	r6, #4
 8006c50:	3504      	adds	r5, #4
 8006c52:	3404      	adds	r4, #4
	      i1 = 0;
 8006c54:	f04f 0b00 	mov.w	fp, #0
	         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006c58:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8006c5c:	ed18 7a01 	vldr	s14, [r8, #-4]
	         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006c60:	eddc 3a00 	vldr	s7, [ip]
	         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006c64:	edda 4a00 	vldr	s9, [sl]
	         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006c68:	ed14 3a01 	vldr	s6, [r4, #-4]
 8006c6c:	ed55 2a01 	vldr	s5, [r5, #-4]
	         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006c70:	ee77 6a27 	vadd.f32	s13, s14, s15
	         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8006c74:	ee37 7a67 	vsub.f32	s14, s14, s15
	         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006c78:	ed57 7a01 	vldr	s15, [r7, #-4]
 8006c7c:	ee33 6aa7 	vadd.f32	s12, s7, s15
	         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8006c80:	ee73 3ae7 	vsub.f32	s7, s7, s15
	         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006c84:	ed56 7a01 	vldr	s15, [r6, #-4]
 8006c88:	ee34 4aa7 	vadd.f32	s8, s9, s15
	         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8006c8c:	ee74 7ae7 	vsub.f32	s15, s9, s15
	         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006c90:	ee72 4a83 	vadd.f32	s9, s5, s6
	         t1 = r1 - r3;
 8006c94:	ee36 8ac4 	vsub.f32	s16, s13, s8
	         r3 = r2 - r4;
 8006c98:	ee36 0a64 	vsub.f32	s0, s12, s9
	         r1 = r1 + r3;
 8006c9c:	ee76 6a84 	vadd.f32	s13, s13, s8
	         r2 = r2 + r4;
 8006ca0:	ee36 6a24 	vadd.f32	s12, s12, s9
	         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006ca4:	ee72 2ac3 	vsub.f32	s5, s5, s6
	         pSrc[2 * i1] = r1 + r2;
 8006ca8:	ee76 4a86 	vadd.f32	s9, s13, s12
	         pSrc[2 * i5] = r1 - r2;
 8006cac:	ee76 6ac6 	vsub.f32	s13, s13, s12
	         pSrc[2 * i1] = r1 + r2;
 8006cb0:	ed48 4a01 	vstr	s9, [r8, #-4]
	         pSrc[2 * i5] = r1 - r2;
 8006cb4:	ed4e 6a01 	vstr	s13, [lr, #-4]
	         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006cb8:	edd8 4a00 	vldr	s9, [r8]
 8006cbc:	ed9e 6a00 	vldr	s12, [lr]
	         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006cc0:	ed9c 4a01 	vldr	s8, [ip, #4]
	         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006cc4:	ed9a 3a01 	vldr	s6, [sl, #4]
	         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006cc8:	edd4 1a00 	vldr	s3, [r4]
	         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006ccc:	ee74 6a86 	vadd.f32	s13, s9, s12
	         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8006cd0:	ee34 6ac6 	vsub.f32	s12, s9, s12
	         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006cd4:	edd7 4a00 	vldr	s9, [r7]
 8006cd8:	ee34 2a24 	vadd.f32	s4, s8, s9
	         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006cdc:	ee34 4a64 	vsub.f32	s8, s8, s9
	         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006ce0:	edd6 4a00 	vldr	s9, [r6]
 8006ce4:	ee33 1a24 	vadd.f32	s2, s6, s9
	         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8006ce8:	ee73 4a64 	vsub.f32	s9, s6, s9
	         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006cec:	ed95 3a00 	vldr	s6, [r5]
 8006cf0:	ee73 0a21 	vadd.f32	s1, s6, s3
	         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006cf4:	ee33 3a61 	vsub.f32	s6, s6, s3
	         t2 = r1 - s3;
 8006cf8:	ee76 1ac1 	vsub.f32	s3, s13, s2
	         r1 = r1 + s3;
 8006cfc:	ee76 6a81 	vadd.f32	s13, s13, s2
	         s3 = r2 - r4;
 8006d00:	ee32 1a60 	vsub.f32	s2, s4, s1
	         r2 = r2 + r4;
 8006d04:	ee32 2a20 	vadd.f32	s4, s4, s1
	         pSrc[2 * i1 + 1] = r1 + r2;
 8006d08:	ee76 0a82 	vadd.f32	s1, s13, s4
	         pSrc[2 * i5 + 1] = r1 - r2;
 8006d0c:	ee76 6ac2 	vsub.f32	s13, s13, s4
	         pSrc[2 * i1 + 1] = r1 + r2;
 8006d10:	edc8 0a00 	vstr	s1, [r8]
	         pSrc[2 * i5 + 1] = r1 - r2;
 8006d14:	edce 6a00 	vstr	s13, [lr]
	         pSrc[2 * i3]     = t1 + s3;
 8006d18:	ee78 6a01 	vadd.f32	s13, s16, s2
	         pSrc[2 * i7]     = t1 - s3;
 8006d1c:	ee38 2a41 	vsub.f32	s4, s16, s2
	         pSrc[2 * i3]     = t1 + s3;
 8006d20:	edca 6a00 	vstr	s13, [sl]
	         pSrc[2 * i3 + 1] = t2 - r3;
 8006d24:	ee71 6ac0 	vsub.f32	s13, s3, s0
	         pSrc[2 * i7]     = t1 - s3;
 8006d28:	ed06 2a01 	vstr	s4, [r6, #-4]
	         pSrc[2 * i3 + 1] = t2 - r3;
 8006d2c:	edca 6a01 	vstr	s13, [sl, #4]
	         pSrc[2 * i7 + 1] = t2 + r3;
 8006d30:	ee70 6a21 	vadd.f32	s13, s0, s3
	         r2 = (s6 - s8) * C81;
 8006d34:	ee34 2a43 	vsub.f32	s4, s8, s6
	         pSrc[2 * i7 + 1] = t2 + r3;
 8006d38:	edc6 6a00 	vstr	s13, [r6]
	         r6 = (r6 + r8) * C81;
 8006d3c:	ee73 6aa2 	vadd.f32	s13, s7, s5
	         r1 = (r6 - r8) * C81;
 8006d40:	ee73 1ae2 	vsub.f32	s3, s7, s5
	         s6 = (s6 + s8) * C81;
 8006d44:	ee34 4a03 	vadd.f32	s8, s8, s6
	         r5 = r5 + r1;
	         r8 = r7 - r6;
 8006d48:	eef0 3a67 	vmov.f32	s7, s15
 8006d4c:	eee6 3ae5 	vfms.f32	s7, s13, s11
 8006d50:	448a      	add	sl, r1
 8006d52:	4488      	add	r8, r1
	         r7 = r7 + r6;
 8006d54:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8006d58:	448e      	add	lr, r1
 8006d5a:	440e      	add	r6, r1
	         t2 = s5 - r2;
 8006d5c:	eef0 2a46 	vmov.f32	s5, s12
	         s5 = s5 + r2;
 8006d60:	eef0 6a46 	vmov.f32	s13, s12
	         s8 = s7 - s6;
	         s7 = s7 + s6;
 8006d64:	eeb0 6a64 	vmov.f32	s12, s9
	         t1 = r5 - r1;
 8006d68:	eeb0 3a47 	vmov.f32	s6, s14
	         s7 = s7 + s6;
 8006d6c:	eea4 6a25 	vfma.f32	s12, s8, s11
	         r5 = r5 + r1;
 8006d70:	eea1 7aa5 	vfma.f32	s14, s3, s11
	         t2 = s5 - r2;
 8006d74:	eee2 2a65 	vfms.f32	s5, s4, s11
	         s5 = s5 + r2;
 8006d78:	eee2 6a25 	vfma.f32	s13, s4, s11
	         s8 = s7 - s6;
 8006d7c:	eeb0 2a64 	vmov.f32	s4, s9
	         t1 = r5 - r1;
 8006d80:	eea1 3ae5 	vfms.f32	s6, s3, s11
	         s8 = s7 - s6;
 8006d84:	eea4 2a65 	vfms.f32	s4, s8, s11
	         pSrc[2 * i2]     = r5 + s7;
 8006d88:	ee77 4a06 	vadd.f32	s9, s14, s12
	         pSrc[2 * i8]     = r5 - s7;
 8006d8c:	ee37 7a46 	vsub.f32	s14, s14, s12
	         pSrc[2 * i2]     = r5 + s7;
 8006d90:	edcc 4a00 	vstr	s9, [ip]
	         pSrc[2 * i8]     = r5 - s7;
 8006d94:	ed04 7a01 	vstr	s14, [r4, #-4]
	         pSrc[2 * i6]     = t1 + s8;
 8006d98:	ee33 7a02 	vadd.f32	s14, s6, s4
	         pSrc[2 * i4]     = t1 - s8;
 8006d9c:	ee33 3a42 	vsub.f32	s6, s6, s4
	         pSrc[2 * i6]     = t1 + s8;
 8006da0:	ed07 7a01 	vstr	s14, [r7, #-4]
	         pSrc[2 * i2 + 1] = s5 - r7;
 8006da4:	ee36 7ae7 	vsub.f32	s14, s13, s15
	         pSrc[2 * i8 + 1] = s5 + r7;
 8006da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
	         pSrc[2 * i4]     = t1 - s8;
 8006dac:	ed05 3a01 	vstr	s6, [r5, #-4]
	         pSrc[2 * i2 + 1] = s5 - r7;
 8006db0:	ed8c 7a01 	vstr	s14, [ip, #4]
	         pSrc[2 * i8 + 1] = s5 + r7;
 8006db4:	edc4 7a00 	vstr	s15, [r4]
	         pSrc[2 * i6 + 1] = t2 - r8;
 8006db8:	ee72 7ae3 	vsub.f32	s15, s5, s7
	         pSrc[2 * i4 + 1] = t2 + r8;
 8006dbc:	ee73 3aa2 	vadd.f32	s7, s7, s5
	         pSrc[2 * i6 + 1] = t2 - r8;
 8006dc0:	edc7 7a00 	vstr	s15, [r7]
	         pSrc[2 * i4 + 1] = t2 + r8;
 8006dc4:	edc5 3a00 	vstr	s7, [r5]

	         i1 += n1;
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	449b      	add	fp, r3
	      } while(i1 < fftLen);
 8006dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dce:	455b      	cmp	r3, fp
 8006dd0:	448c      	add	ip, r1
 8006dd2:	440f      	add	r7, r1
 8006dd4:	440d      	add	r5, r1
 8006dd6:	440c      	add	r4, r1
 8006dd8:	f63f af3e 	bhi.w	8006c58 <arm_radix8_butterfly_f32+0x64>

	      if(n2 < 8)
 8006ddc:	2a07      	cmp	r2, #7
 8006dde:	f240 81d2 	bls.w	8007186 <arm_radix8_butterfly_f32+0x592>
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	9310      	str	r3, [sp, #64]	; 0x40
 8006de8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006dea:	9b02      	ldr	r3, [sp, #8]
 8006dec:	4423      	add	r3, r4
 8006dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df0:	9b01      	ldr	r3, [sp, #4]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006df6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8006df8:	9b02      	ldr	r3, [sp, #8]
 8006dfa:	4423      	add	r3, r4
 8006dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8006e04:	00e3      	lsls	r3, r4, #3
 8006e06:	9314      	str	r3, [sp, #80]	; 0x50
 8006e08:	9b02      	ldr	r3, [sp, #8]
 8006e0a:	00e5      	lsls	r5, r4, #3
 8006e0c:	442b      	add	r3, r5
 8006e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	441c      	add	r4, r3
 8006e14:	00e3      	lsls	r3, r4, #3
 8006e16:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e18:	9b02      	ldr	r3, [sp, #8]
 8006e1a:	00e5      	lsls	r5, r4, #3
 8006e1c:	442b      	add	r3, r5
 8006e1e:	9308      	str	r3, [sp, #32]
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	441c      	add	r4, r3
 8006e24:	00e3      	lsls	r3, r4, #3
 8006e26:	9312      	str	r3, [sp, #72]	; 0x48
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	00e5      	lsls	r5, r4, #3
 8006e2c:	442b      	add	r3, r5
 8006e2e:	9307      	str	r3, [sp, #28]
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	441c      	add	r4, r3
 8006e34:	00e3      	lsls	r3, r4, #3
 8006e36:	9311      	str	r3, [sp, #68]	; 0x44
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	00e5      	lsls	r5, r4, #3
 8006e3c:	442b      	add	r3, r5
 8006e3e:	9306      	str	r3, [sp, #24]
 8006e40:	9b01      	ldr	r3, [sp, #4]
 8006e42:	441c      	add	r4, r3
 8006e44:	00e3      	lsls	r3, r4, #3
 8006e46:	930e      	str	r3, [sp, #56]	; 0x38
 8006e48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006e4a:	9b02      	ldr	r3, [sp, #8]
 8006e4c:	4423      	add	r3, r4
 8006e4e:	9305      	str	r3, [sp, #20]
 8006e50:	2328      	movs	r3, #40	; 0x28
 8006e52:	fb03 fe02 	mul.w	lr, r3, r2
 8006e56:	2330      	movs	r3, #48	; 0x30
 8006e58:	fb03 f702 	mul.w	r7, r3, r2
 8006e5c:	2318      	movs	r3, #24
 8006e5e:	fb03 f602 	mul.w	r6, r3, r2
 8006e62:	2338      	movs	r3, #56	; 0x38
 8006e64:	fb03 f502 	mul.w	r5, r3, r2
 8006e68:	ea4f 1c42 	mov.w	ip, r2, lsl #5
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	9304      	str	r3, [sp, #16]
 8006e70:	f10c 030c 	add.w	r3, ip, #12
 8006e74:	9315      	str	r3, [sp, #84]	; 0x54
 8006e76:	f109 030c 	add.w	r3, r9, #12
 8006e7a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e7c:	f10e 030c 	add.w	r3, lr, #12
 8006e80:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e84:	330c      	adds	r3, #12
 8006e86:	9318      	str	r3, [sp, #96]	; 0x60
 8006e88:	f107 030c 	add.w	r3, r7, #12
 8006e8c:	9319      	str	r3, [sp, #100]	; 0x64
 8006e8e:	f106 030c 	add.w	r3, r6, #12
 8006e92:	931a      	str	r3, [sp, #104]	; 0x68
 8006e94:	f105 030c 	add.w	r3, r5, #12
 8006e98:	2400      	movs	r4, #0
 8006e9a:	931b      	str	r3, [sp, #108]	; 0x6c
	         ia4 = ia3 + id;
	         ia5 = ia4 + id;
	         ia6 = ia5 + id;
	         ia7 = ia6 + id;

	         co2 = pCoef[2 * ia1];
 8006e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9e:	edd3 1a00 	vldr	s3, [r3]
	         co3 = pCoef[2 * ia2];
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea4:	ed93 8a00 	vldr	s16, [r3]
	         co4 = pCoef[2 * ia3];
 8006ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eaa:	edd3 4a00 	vldr	s9, [r3]
	         co5 = pCoef[2 * ia4];
 8006eae:	9b08      	ldr	r3, [sp, #32]
 8006eb0:	ed93 9a00 	vldr	s18, [r3]
	         co6 = pCoef[2 * ia5];
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	edd3 3a00 	vldr	s7, [r3]
	         co7 = pCoef[2 * ia6];
 8006eba:	9b06      	ldr	r3, [sp, #24]
 8006ebc:	edd3 0a00 	vldr	s1, [r3]
	         co8 = pCoef[2 * ia7];
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	edd3 2a00 	vldr	s5, [r3]
	         si2 = pCoef[2 * ia1 + 1];
 8006ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec8:	ed93 1a01 	vldr	s2, [r3, #4]
	         si3 = pCoef[2 * ia2 + 1];
 8006ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ece:	edd3 8a01 	vldr	s17, [r3, #4]
	         si4 = pCoef[2 * ia3 + 1];
 8006ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed4:	ed93 4a01 	vldr	s8, [r3, #4]
	         si5 = pCoef[2 * ia4 + 1];
 8006ed8:	9b08      	ldr	r3, [sp, #32]
 8006eda:	edd3 9a01 	vldr	s19, [r3, #4]
	         si6 = pCoef[2 * ia5 + 1];
 8006ede:	9b07      	ldr	r3, [sp, #28]
 8006ee0:	ed93 3a01 	vldr	s6, [r3, #4]
	         si7 = pCoef[2 * ia6 + 1];
 8006ee4:	9b06      	ldr	r3, [sp, #24]
 8006ee6:	ed93 0a01 	vldr	s0, [r3, #4]
	         si8 = pCoef[2 * ia7 + 1];
 8006eea:	9b05      	ldr	r3, [sp, #20]
 8006eec:	ed93 2a01 	vldr	s4, [r3, #4]
 8006ef0:	9b04      	ldr	r3, [sp, #16]
 8006ef2:	eb00 0ac3 	add.w	sl, r0, r3, lsl #3
 8006ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ef8:	eb03 0904 	add.w	r9, r3, r4
 8006efc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006efe:	eb03 0804 	add.w	r8, r3, r4
 8006f02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f04:	eb03 0c04 	add.w	ip, r3, r4
 8006f08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006f0a:	eb03 0e04 	add.w	lr, r3, r4
 8006f0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f10:	191f      	adds	r7, r3, r4
 8006f12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006f14:	191e      	adds	r6, r3, r4
 8006f16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f18:	191d      	adds	r5, r3, r4

	         i1 = j;
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8006f1e:	4481      	add	r9, r0
 8006f20:	4480      	add	r8, r0
 8006f22:	4484      	add	ip, r0
 8006f24:	4486      	add	lr, r0
 8006f26:	4407      	add	r7, r0
 8006f28:	4406      	add	r6, r0
 8006f2a:	4405      	add	r5, r0
 8006f2c:	e002      	b.n	8006f34 <arm_radix8_butterfly_f32+0x340>
 8006f2e:	bf00      	nop
 8006f30:	3f3504f3 	.word	0x3f3504f3
	            i4 = i3 + n2;
	            i5 = i4 + n2;
	            i6 = i5 + n2;
	            i7 = i6 + n2;
	            i8 = i7 + n2;
	            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006f34:	ed59 7a01 	vldr	s15, [r9, #-4]
	            r5 = pSrc[2 * i1] - pSrc[2 * i5];
	            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006f38:	ed58 6a01 	vldr	s13, [r8, #-4]
 8006f3c:	ed1c 7a01 	vldr	s14, [ip, #-4]
	            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006f40:	ed9a aa00 	vldr	s20, [sl]
	            r6 = pSrc[2 * i2] - pSrc[2 * i6];
	            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006f44:	ed1e ba01 	vldr	s22, [lr, #-4]
	            r7 = pSrc[2 * i3] - pSrc[2 * i7];
	            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006f48:	ed16 ea01 	vldr	s28, [r6, #-4]
	            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006f4c:	ee3a 6a27 	vadd.f32	s12, s20, s15
	            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8006f50:	ee36 dac7 	vsub.f32	s26, s13, s14
	            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8006f54:	ee3a aa67 	vsub.f32	s20, s20, s15
	            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006f58:	ee76 7a87 	vadd.f32	s15, s13, s14
	            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006f5c:	ed57 6a01 	vldr	s13, [r7, #-4]
 8006f60:	ee3b 7a26 	vadd.f32	s14, s22, s13
	            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8006f64:	ee3b ba66 	vsub.f32	s22, s22, s13
	            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006f68:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006f6c:	ee7e aa26 	vadd.f32	s21, s28, s13
	            r8 = pSrc[2 * i4] - pSrc[2 * i8];
	            t1 = r1 - r3;
 8006f70:	ee36 fa47 	vsub.f32	s30, s12, s14
	            r1 = r1 + r3;
	            r3 = r2 - r4;
 8006f74:	ee77 eaea 	vsub.f32	s29, s15, s21
	            r1 = r1 + r3;
 8006f78:	ee36 6a07 	vadd.f32	s12, s12, s14
	            r2 = r2 + r4;
 8006f7c:	ee77 7aaa 	vadd.f32	s15, s15, s21
	            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006f80:	ee3e ea66 	vsub.f32	s28, s28, s13
	            pSrc[2 * i1] = r1 + r2;
 8006f84:	ee36 7a27 	vadd.f32	s14, s12, s15
	            r2 = r1 - r2;
 8006f88:	ee76 aa67 	vsub.f32	s21, s12, s15
	            pSrc[2 * i1] = r1 + r2;
 8006f8c:	ed8a 7a00 	vstr	s14, [sl]
	            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006f90:	ed9a 6a01 	vldr	s12, [sl, #4]
 8006f94:	edd9 7a00 	vldr	s15, [r9]
	            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
	            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006f98:	edd8 ca00 	vldr	s25, [r8]
	            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
	            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006f9c:	edde 6a00 	vldr	s13, [lr]
	            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
	            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006fa0:	edd6 fa00 	vldr	s31, [r6]
 8006fa4:	edd5 da00 	vldr	s27, [r5]
	            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006fa8:	ee36 7a27 	vadd.f32	s14, s12, s15
	            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8006fac:	ee76 ba67 	vsub.f32	s23, s12, s15
	            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006fb0:	eddc 7a00 	vldr	s15, [ip]
 8006fb4:	ee3c 6aa7 	vadd.f32	s12, s25, s15
	            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006fb8:	ee7c cae7 	vsub.f32	s25, s25, s15
	            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006fbc:	edd7 7a00 	vldr	s15, [r7]
 8006fc0:	ee36 caa7 	vadd.f32	s24, s13, s15
	            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8006fc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
	            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006fc8:	ee7f 6aad 	vadd.f32	s13, s31, s27
	            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006fcc:	ee7f daed 	vsub.f32	s27, s31, s27
	            t2 = s1 - s3;
 8006fd0:	ee77 fa4c 	vsub.f32	s31, s14, s24
	            s1 = s1 + s3;
 8006fd4:	ee37 ca0c 	vadd.f32	s24, s14, s24
	            s3 = s2 - s4;
 8006fd8:	ee36 7a66 	vsub.f32	s14, s12, s13
	            s2 = s2 + s4;
 8006fdc:	ee36 6a26 	vadd.f32	s12, s12, s13
	            r1 = t1 + s3;
 8006fe0:	ee7f 6a07 	vadd.f32	s13, s30, s14
	            t1 = t1 - s3;
 8006fe4:	ee3f 7a47 	vsub.f32	s14, s30, s14
	            pSrc[2 * i1 + 1] = s1 + s2;
 8006fe8:	ee3c fa06 	vadd.f32	s30, s24, s12
	            s2 = s1 - s2;
 8006fec:	ee3c ca46 	vsub.f32	s24, s24, s12
	            pSrc[2 * i1 + 1] = s1 + s2;
 8006ff0:	ed8a fa01 	vstr	s30, [sl, #4]
	            s1 = t2 - r3;
	            t2 = t2 + r3;
	            p1 = co5 * r2;
	            p2 = si5 * s2;
 8006ff4:	ee29 6a8c 	vmul.f32	s12, s19, s24
	            s1 = t2 - r3;
 8006ff8:	ee3f faee 	vsub.f32	s30, s31, s29
	            p3 = co5 * s2;
	            p4 = si5 * r2;
	            pSrc[2 * i5]     = p1 + p2;
 8006ffc:	eea9 6a2a 	vfma.f32	s12, s18, s21
 8007000:	448a      	add	sl, r1
	            t2 = t2 + r3;
 8007002:	ee7e eaaf 	vadd.f32	s29, s29, s31
	            pSrc[2 * i5]     = p1 + p2;
 8007006:	ed09 6a01 	vstr	s12, [r9, #-4]
	            pSrc[2 * i5 + 1] = p3 - p4;
 800700a:	ee2a 6ae9 	vnmul.f32	s12, s21, s19
	            p2 = si7 * t2;
	            p3 = co7 * t2;
	            p4 = si7 * t1;
	            pSrc[2 * i7]     = p1 + p2;
	            pSrc[2 * i7 + 1] = p3 - p4;
	            r1 = (r6 - r8) * C81;
 800700e:	ee7d aa4e 	vsub.f32	s21, s26, s28
	            pSrc[2 * i5 + 1] = p3 - p4;
 8007012:	eea9 6a0c 	vfma.f32	s12, s18, s24
	            r6 = (r6 + r8) * C81;
	            s1 = (s6 - s8) * C81;
	            s6 = (s6 + s8) * C81;
	            t1 = r5 - r1;
 8007016:	eeb0 ca4a 	vmov.f32	s24, s20
	            pSrc[2 * i5 + 1] = p3 - p4;
 800701a:	ed89 6a00 	vstr	s12, [r9]
	            p2 = si3 * s1;
 800701e:	ee28 6a8f 	vmul.f32	s12, s17, s30
	            t1 = r5 - r1;
 8007022:	eeaa cac5 	vfms.f32	s24, s21, s10
 8007026:	4489      	add	r9, r1
	            pSrc[2 * i3]     = p1 + p2;
 8007028:	eea8 6a26 	vfma.f32	s12, s16, s13
	            pSrc[2 * i3 + 1] = p3 - p4;
 800702c:	ee66 6ae8 	vnmul.f32	s13, s13, s17
	            pSrc[2 * i3]     = p1 + p2;
 8007030:	ed0e 6a01 	vstr	s12, [lr, #-4]
	            pSrc[2 * i3 + 1] = p3 - p4;
 8007034:	eee8 6a0f 	vfma.f32	s13, s16, s30
	            s1 = (s6 - s8) * C81;
 8007038:	ee3c 6aed 	vsub.f32	s12, s25, s27
	            pSrc[2 * i3 + 1] = p3 - p4;
 800703c:	edce 6a00 	vstr	s13, [lr]
	            p2 = si7 * t2;
 8007040:	ee60 6a2e 	vmul.f32	s13, s0, s29
	            r5 = r5 + r1;
 8007044:	eeaa aa85 	vfma.f32	s20, s21, s10
 8007048:	448e      	add	lr, r1
	            pSrc[2 * i7]     = p1 + p2;
 800704a:	eee0 6a87 	vfma.f32	s13, s1, s14
	            pSrc[2 * i7 + 1] = p3 - p4;
 800704e:	ee27 7a40 	vnmul.f32	s14, s14, s0
	            pSrc[2 * i7]     = p1 + p2;
 8007052:	ed47 6a01 	vstr	s13, [r7, #-4]
	            pSrc[2 * i7 + 1] = p3 - p4;
 8007056:	eea0 7aae 	vfma.f32	s14, s1, s29
	            r6 = (r6 + r8) * C81;
 800705a:	ee7d 6a0e 	vadd.f32	s13, s26, s28
	            pSrc[2 * i7 + 1] = p3 - p4;
 800705e:	ed87 7a00 	vstr	s14, [r7]
	            s6 = (s6 + s8) * C81;
 8007062:	ee3c 7aad 	vadd.f32	s14, s25, s27
	            r8 = r7 - r6;
	            r7 = r7 + r6;
	            t2 = s5 - s1;
 8007066:	eef0 ca6b 	vmov.f32	s25, s23
	            s5 = s5 + s1;
 800706a:	eee6 ba05 	vfma.f32	s23, s12, s10
 800706e:	440f      	add	r7, r1
	            t2 = s5 - s1;
 8007070:	eee6 ca45 	vfms.f32	s25, s12, s10
	            s5 = s5 + s1;
 8007074:	eeb0 6a6b 	vmov.f32	s12, s23
	            s8 = s7 - s6;
 8007078:	eef0 ba67 	vmov.f32	s23, s15
 800707c:	eee7 ba45 	vfms.f32	s23, s14, s10
	            s7 = s7 + s6;
 8007080:	eee7 7a05 	vfma.f32	s15, s14, s10
	            r8 = r7 - r6;
 8007084:	eef0 aa4b 	vmov.f32	s21, s22
	            r7 = r7 + r6;
 8007088:	eea6 ba85 	vfma.f32	s22, s13, s10
	            r1 = r5 + s7;
	            r5 = r5 - s7;
	            r6 = t1 + s8;
 800708c:	ee3c 7a2b 	vadd.f32	s14, s24, s23
	            r8 = r7 - r6;
 8007090:	eee6 aac5 	vfms.f32	s21, s13, s10
	            r1 = r5 + s7;
 8007094:	ee7a 6a27 	vadd.f32	s13, s20, s15
	            r5 = r5 - s7;
 8007098:	ee7a 7a67 	vsub.f32	s15, s20, s15
	            t1 = t1 - s8;
 800709c:	ee3c aa6b 	vsub.f32	s20, s24, s23
	            s1 = s5 - r7;
 80070a0:	ee36 ca4b 	vsub.f32	s24, s12, s22
	            s5 = s5 + r7;
 80070a4:	ee3b 6a06 	vadd.f32	s12, s22, s12
	            s6 = t2 - r8;
	            t2 = t2 + r8;
	            p1 = co2 * r1;
	            p2 = si2 * s1;
 80070a8:	ee61 ba0c 	vmul.f32	s23, s2, s24
	            s6 = t2 - r8;
 80070ac:	ee3c baea 	vsub.f32	s22, s25, s21
	            p3 = co2 * s1;
	            p4 = si2 * r1;
	            pSrc[2 * i2]     = p1 + p2;
 80070b0:	eee1 baa6 	vfma.f32	s23, s3, s13
	            pSrc[2 * i2 + 1] = p3 - p4;
 80070b4:	ee66 6ac1 	vnmul.f32	s13, s13, s2
	            pSrc[2 * i2]     = p1 + p2;
 80070b8:	ed48 ba01 	vstr	s23, [r8, #-4]
	            pSrc[2 * i2 + 1] = p3 - p4;
 80070bc:	eee1 6a8c 	vfma.f32	s13, s3, s24
	            t2 = t2 + r8;
 80070c0:	ee7a aaac 	vadd.f32	s21, s21, s25
	            pSrc[2 * i2 + 1] = p3 - p4;
 80070c4:	edc8 6a00 	vstr	s13, [r8]
	            p1 = co8 * r5;
	            p2 = si8 * s5;
 80070c8:	ee62 6a06 	vmul.f32	s13, s4, s12
 80070cc:	4488      	add	r8, r1
	            p3 = co8 * s5;
	            p4 = si8 * r5;
	            pSrc[2 * i8]     = p1 + p2;
 80070ce:	eee2 6aa7 	vfma.f32	s13, s5, s15
 80070d2:	ed45 6a01 	vstr	s13, [r5, #-4]
	            pSrc[2 * i8 + 1] = p3 - p4;
 80070d6:	ee67 6ac2 	vnmul.f32	s13, s15, s4
	            p1 = co6 * r6;
	            p2 = si6 * s6;
 80070da:	ee63 7a0b 	vmul.f32	s15, s6, s22
	            pSrc[2 * i8 + 1] = p3 - p4;
 80070de:	eee2 6a86 	vfma.f32	s13, s5, s12
	            p3 = co6 * s6;
	            p4 = si6 * r6;
	            pSrc[2 * i6]     = p1 + p2;
 80070e2:	eee3 7a87 	vfma.f32	s15, s7, s14
	            pSrc[2 * i8 + 1] = p3 - p4;
 80070e6:	edc5 6a00 	vstr	s13, [r5]
	            pSrc[2 * i6 + 1] = p3 - p4;
 80070ea:	ee27 7a43 	vnmul.f32	s14, s14, s6
	            pSrc[2 * i6]     = p1 + p2;
 80070ee:	ed4c 7a01 	vstr	s15, [ip, #-4]
	            p1 = co4 * t1;
	            p2 = si4 * t2;
 80070f2:	ee64 7a2a 	vmul.f32	s15, s8, s21
	            pSrc[2 * i6 + 1] = p3 - p4;
 80070f6:	eea3 7a8b 	vfma.f32	s14, s7, s22
 80070fa:	440d      	add	r5, r1
	            p3 = co4 * t2;
	            p4 = si4 * t1;
	            pSrc[2 * i4]     = p1 + p2;
 80070fc:	eee4 7a8a 	vfma.f32	s15, s9, s20
	            pSrc[2 * i6 + 1] = p3 - p4;
 8007100:	ed8c 7a00 	vstr	s14, [ip]
	            pSrc[2 * i4]     = p1 + p2;
 8007104:	ed46 7a01 	vstr	s15, [r6, #-4]
	            pSrc[2 * i4 + 1] = p3 - p4;
 8007108:	ee6a 7a44 	vnmul.f32	s15, s20, s8
 800710c:	448c      	add	ip, r1
 800710e:	eee4 7aaa 	vfma.f32	s15, s9, s21
 8007112:	edc6 7a00 	vstr	s15, [r6]

	            i1 += n1;
 8007116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007118:	469b      	mov	fp, r3
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	449b      	add	fp, r3
	         } while(i1 < fftLen);
 800711e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	            i1 += n1;
 8007120:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	         } while(i1 < fftLen);
 8007124:	469b      	mov	fp, r3
 8007126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007128:	459b      	cmp	fp, r3
 800712a:	440e      	add	r6, r1
 800712c:	f63f af02 	bhi.w	8006f34 <arm_radix8_butterfly_f32+0x340>

	         j++;
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007134:	3301      	adds	r3, #1
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800713a:	442b      	add	r3, r5
 800713c:	930b      	str	r3, [sp, #44]	; 0x2c
 800713e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007142:	442b      	add	r3, r5
 8007144:	930a      	str	r3, [sp, #40]	; 0x28
 8007146:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714a:	442b      	add	r3, r5
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
 800714e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007150:	9b08      	ldr	r3, [sp, #32]
 8007152:	442b      	add	r3, r5
 8007154:	9308      	str	r3, [sp, #32]
 8007156:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007158:	9b07      	ldr	r3, [sp, #28]
 800715a:	442b      	add	r3, r5
 800715c:	9307      	str	r3, [sp, #28]
 800715e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007160:	9b06      	ldr	r3, [sp, #24]
 8007162:	442b      	add	r3, r5
 8007164:	9306      	str	r3, [sp, #24]
 8007166:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007168:	9b05      	ldr	r3, [sp, #20]
 800716a:	442b      	add	r3, r5
 800716c:	9305      	str	r3, [sp, #20]
	      } while(j < n2);
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	429a      	cmp	r2, r3
 8007172:	f104 0408 	add.w	r4, r4, #8
 8007176:	f47f ae91 	bne.w	8006e9c <arm_radix8_butterfly_f32+0x2a8>

	      twidCoefModifier <<= 3;
 800717a:	9b01      	ldr	r3, [sp, #4]
	         j++;
 800717c:	9203      	str	r2, [sp, #12]
	      twidCoefModifier <<= 3;
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	b29b      	uxth	r3, r3
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	e543      	b.n	8006c0e <arm_radix8_butterfly_f32+0x1a>
	   } while(n2 > 7);
	}
 8007186:	b01d      	add	sp, #116	; 0x74
 8007188:	ecbd 8b10 	vpop	{d8-d15}
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007190 <arm_cfft_radix8by2_f32>:

	void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
	{
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	4681      	mov	r9, r0
 8007196:	ed2d 8b02 	vpush	{d8}
	    uint32_t    L  = S->fftLen;
 800719a:	f8b9 7000 	ldrh.w	r7, [r9]
	    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
	    float32_t * p2 = p1 + L;
	    const float32_t * tw = (float32_t *) S->pTwiddle;
 800719e:	f8d9 2004 	ldr.w	r2, [r9, #4]
	    float32_t * p2 = p1 + L;
 80071a2:	eb01 0887 	add.w	r8, r1, r7, lsl #2
	{
 80071a6:	4608      	mov	r0, r1

	    pCol1 = p1;
	    pCol2 = p2;

	    //    Define new length
	    L >>= 1;
 80071a8:	0879      	lsrs	r1, r7, #1
	    //    Initialize mid pointers
	    pMid1 = p1 + L;
 80071aa:	008b      	lsls	r3, r1, #2
	    pMid2 = p2 + L;

	    // do two dot Fourier transform
	    for ( l = L >> 2; l > 0; l-- )
 80071ac:	08ff      	lsrs	r7, r7, #3
	    pMid1 = p1 + L;
 80071ae:	18c5      	adds	r5, r0, r3
 80071b0:	4606      	mov	r6, r0
	    pMid2 = p2 + L;
 80071b2:	4443      	add	r3, r8
 80071b4:	4644      	mov	r4, r8
 80071b6:	eb02 1707 	add.w	r7, r2, r7, lsl #4
	    const float32_t * tw = (float32_t *) S->pTwiddle;
 80071ba:	4696      	mov	lr, r2
	    for ( l = L >> 2; l > 0; l-- )
 80071bc:	45be      	cmp	lr, r7
 80071be:	f106 0610 	add.w	r6, r6, #16
 80071c2:	f105 0510 	add.w	r5, r5, #16
 80071c6:	f103 0310 	add.w	r3, r3, #16
 80071ca:	f104 0410 	add.w	r4, r4, #16
 80071ce:	d10f      	bne.n	80071f0 <arm_cfft_radix8by2_f32+0x60>
	        *pMid2++ = m0 - m1;
	        *pMid2++ = m2 + m3;
	    }

	    // first col
	    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80071d0:	b28c      	uxth	r4, r1
 80071d2:	4621      	mov	r1, r4
 80071d4:	2302      	movs	r3, #2
 80071d6:	f7ff fd0d 	bl	8006bf4 <arm_radix8_butterfly_f32>
	    // second col
	    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
	}
 80071da:	ecbd 8b02 	vpop	{d8}
	    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80071de:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80071e2:	4621      	mov	r1, r4
 80071e4:	4640      	mov	r0, r8
 80071e6:	2302      	movs	r3, #2
	}
 80071e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80071ec:	f7ff bd02 	b.w	8006bf4 <arm_radix8_butterfly_f32>
	        t2[0] = p2[0];
 80071f0:	ed14 0a04 	vldr	s0, [r4, #-16]
	        t1[0] = p1[0];
 80071f4:	ed16 6a04 	vldr	s12, [r6, #-16]
	        t2[1] = p2[1];
 80071f8:	ed54 0a03 	vldr	s1, [r4, #-12]
	        t1[1] = p1[1];
 80071fc:	ed16 4a03 	vldr	s8, [r6, #-12]
	        t4[0] = pMid2[0];
 8007200:	ed53 6a04 	vldr	s13, [r3, #-16]
	        t4[1] = pMid2[1];
 8007204:	ed53 4a03 	vldr	s9, [r3, #-12]
	        t2[2] = p2[2];
 8007208:	ed14 7a02 	vldr	s14, [r4, #-8]
	        t2[3] = p2[3];
 800720c:	ed14 5a01 	vldr	s10, [r4, #-4]
	        t3[1] = pMid1[1];
 8007210:	ed55 2a03 	vldr	s5, [r5, #-12]
	        t3[2] = pMid1[2];
 8007214:	ed15 3a02 	vldr	s6, [r5, #-8]
	        t3[3] = pMid1[3];
 8007218:	ed55 3a01 	vldr	s7, [r5, #-4]
	        t4[2] = pMid2[2];
 800721c:	ed53 7a02 	vldr	s15, [r3, #-8]
	        t4[3] = pMid2[3];
 8007220:	ed53 5a01 	vldr	s11, [r3, #-4]
	        t1[2] = p1[2];
 8007224:	ed16 1a02 	vldr	s2, [r6, #-8]
	        t3[0] = pMid1[0];
 8007228:	ed15 2a04 	vldr	s4, [r5, #-16]
	        t1[3] = p1[3];
 800722c:	ed56 1a01 	vldr	s3, [r6, #-4]
	        *p1++ = t1[0] + t2[0];
 8007230:	ee36 8a00 	vadd.f32	s16, s12, s0
	        t2[0] = t1[0] - t2[0];
 8007234:	ee36 6a40 	vsub.f32	s12, s12, s0
	        *p1++ = t1[0] + t2[0];
 8007238:	ed06 8a04 	vstr	s16, [r6, #-16]
	        *p1++ = t1[1] + t2[1];
 800723c:	ee34 8a20 	vadd.f32	s16, s8, s1
	        t2[1] = t1[1] - t2[1];
 8007240:	ee34 4a60 	vsub.f32	s8, s8, s1
	        *p1++ = t1[1] + t2[1];
 8007244:	ed06 8a03 	vstr	s16, [r6, #-12]
	        *p1++ = t1[2] + t2[2];
 8007248:	ee31 8a07 	vadd.f32	s16, s2, s14
 800724c:	f10e 0e10 	add.w	lr, lr, #16
 8007250:	ed06 8a02 	vstr	s16, [r6, #-8]
	        *p1++ = t1[3] + t2[3];    // col 1
 8007254:	ee31 8a85 	vadd.f32	s16, s3, s10
	        t2[3] = t1[3] - t2[3];    // for col 2
 8007258:	ee31 5ac5 	vsub.f32	s10, s3, s10
	        *pMid1++ = t3[0] + t4[0];
 800725c:	ee72 1a26 	vadd.f32	s3, s4, s13
	        *p1++ = t1[3] + t2[3];    // col 1
 8007260:	ed06 8a01 	vstr	s16, [r6, #-4]
	        *pMid1++ = t3[0] + t4[0];
 8007264:	ed45 1a04 	vstr	s3, [r5, #-16]
	        *pMid1++ = t3[1] + t4[1];
 8007268:	ee72 1aa4 	vadd.f32	s3, s5, s9
	        t4[1] = t4[1] - t3[1];
 800726c:	ee74 4ae2 	vsub.f32	s9, s9, s5
	        *pMid1++ = t3[1] + t4[1];
 8007270:	ed45 1a03 	vstr	s3, [r5, #-12]
	        *pMid1++ = t3[2] + t4[2];
 8007274:	ee73 1a27 	vadd.f32	s3, s6, s15
	        t4[2] = t4[2] - t3[2];
 8007278:	ee77 7ac3 	vsub.f32	s15, s15, s6
	        *pMid1++ = t3[2] + t4[2];
 800727c:	ed45 1a02 	vstr	s3, [r5, #-8]
	        *pMid1++ = t3[3] + t4[3]; // col 1
 8007280:	ee73 1aa5 	vadd.f32	s3, s7, s11
	        t4[3] = t4[3] - t3[3];    // for col 2
 8007284:	ee75 5ae3 	vsub.f32	s11, s11, s7
	        *pMid1++ = t3[3] + t4[3]; // col 1
 8007288:	ed45 1a01 	vstr	s3, [r5, #-4]
	        twI = *tw++;
 800728c:	ed5e 3a03 	vldr	s7, [lr, #-12]
	        twR = *tw++;
 8007290:	ed1e 3a04 	vldr	s6, [lr, #-16]
	        m1 = t2[1] * twI;
 8007294:	ee64 2a23 	vmul.f32	s5, s8, s7
	        t4[0] = t4[0] - t3[0];
 8007298:	ee76 6ac2 	vsub.f32	s13, s13, s4
	        *p2++ = m0 + m1;
 800729c:	eee6 2a03 	vfma.f32	s5, s12, s6
	        *p2++ = m2 - m3;
 80072a0:	ee23 6ac6 	vnmul.f32	s12, s7, s12
	        *p2++ = m0 + m1;
 80072a4:	ed44 2a04 	vstr	s5, [r4, #-16]
	        *p2++ = m2 - m3;
 80072a8:	eea4 6a03 	vfma.f32	s12, s8, s6
	        t2[2] = t1[2] - t2[2];
 80072ac:	ee31 7a47 	vsub.f32	s14, s2, s14
	        *p2++ = m2 - m3;
 80072b0:	ed04 6a03 	vstr	s12, [r4, #-12]
	        *pMid2++ = m0 - m1;
 80072b4:	ee23 6a64 	vnmul.f32	s12, s6, s9
 80072b8:	eea6 6aa3 	vfma.f32	s12, s13, s7
	        m3 = t4[0] * twR;
 80072bc:	ee66 6a83 	vmul.f32	s13, s13, s6
	        *pMid2++ = m0 - m1;
 80072c0:	ed03 6a04 	vstr	s12, [r3, #-16]
	        *pMid2++ = m2 + m3;
 80072c4:	eee4 6aa3 	vfma.f32	s13, s9, s7
 80072c8:	ed43 6a03 	vstr	s13, [r3, #-12]
	        twR = *tw++;
 80072cc:	ed1e 6a02 	vldr	s12, [lr, #-8]
	        twI = *tw++;
 80072d0:	ed5e 6a01 	vldr	s13, [lr, #-4]
	        m1 = t2[3] * twI;
 80072d4:	ee65 4a26 	vmul.f32	s9, s10, s13
	        *p2++ = m0 + m1;
 80072d8:	eee7 4a06 	vfma.f32	s9, s14, s12
	        *p2++ = m2 - m3;
 80072dc:	ee26 7ac7 	vnmul.f32	s14, s13, s14
	        *p2++ = m0 + m1;
 80072e0:	ed44 4a02 	vstr	s9, [r4, #-8]
	        *p2++ = m2 - m3;
 80072e4:	eea5 7a06 	vfma.f32	s14, s10, s12
 80072e8:	ed04 7a01 	vstr	s14, [r4, #-4]
	        *pMid2++ = m0 - m1;
 80072ec:	ee26 7a65 	vnmul.f32	s14, s12, s11
 80072f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
	        m3 = t4[2] * twR;
 80072f4:	ee67 7a86 	vmul.f32	s15, s15, s12
	        *pMid2++ = m0 - m1;
 80072f8:	ed03 7a02 	vstr	s14, [r3, #-8]
	        *pMid2++ = m2 + m3;
 80072fc:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8007300:	ed43 7a01 	vstr	s15, [r3, #-4]
 8007304:	e75a      	b.n	80071bc <arm_cfft_radix8by2_f32+0x2c>

08007306 <arm_cfft_radix8by4_f32>:
	void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
	{
 8007306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	ed2d 8b04 	vpush	{d8-d9}
 800730e:	b08f      	sub	sp, #60	; 0x3c
 8007310:	9003      	str	r0, [sp, #12]
	    uint32_t    L  = S->fftLen >> 1;
 8007312:	9b03      	ldr	r3, [sp, #12]
	    pEnd1 = p2 - 1;     // points to imaginary values by default
	    pEnd2 = p3 - 1;
	    pEnd3 = p4 - 1;
	    pEnd4 = pEnd3 + L;

	    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8007314:	9a03      	ldr	r2, [sp, #12]
	{
 8007316:	4608      	mov	r0, r1
	    uint32_t    L  = S->fftLen >> 1;
 8007318:	8819      	ldrh	r1, [r3, #0]
	    twMod2 = 2;
	    twMod3 = 4;
	    twMod4 = 6;

	    // TOP
	    p1ap3_0 = p1[0] + p3[0];
 800731a:	ed90 7a00 	vldr	s14, [r0]
	    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800731e:	6852      	ldr	r2, [r2, #4]
 8007320:	9202      	str	r2, [sp, #8]
	    uint32_t    L  = S->fftLen >> 1;
 8007322:	0849      	lsrs	r1, r1, #1
	    float32_t * p2 = p1 + L;
 8007324:	008b      	lsls	r3, r1, #2
 8007326:	18c4      	adds	r4, r0, r3
	    float32_t * p3 = p2 + L;
 8007328:	18e6      	adds	r6, r4, r3
	    p1ap3_0 = p1[0] + p3[0];
 800732a:	edd6 7a00 	vldr	s15, [r6]
	    p1sp3_0 = p1[0] - p3[0];
	    p1ap3_1 = p1[1] + p3[1];
 800732e:	edd6 5a01 	vldr	s11, [r6, #4]
	    p1sp3_1 = p1[1] - p3[1];

	    // col 2
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8007332:	edd4 4a00 	vldr	s9, [r4]
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8007336:	edd4 3a01 	vldr	s7, [r4, #4]
	    p1ap3_0 = p1[0] + p3[0];
 800733a:	ee37 6a27 	vadd.f32	s12, s14, s15
	    p1sp3_0 = p1[0] - p3[0];
 800733e:	ee37 7a67 	vsub.f32	s14, s14, s15
	    p1ap3_1 = p1[1] + p3[1];
 8007342:	edd0 7a01 	vldr	s15, [r0, #4]
	    float32_t * p4 = p3 + L;
 8007346:	18f5      	adds	r5, r6, r3
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8007348:	ed95 5a00 	vldr	s10, [r5]
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800734c:	ed95 4a01 	vldr	s8, [r5, #4]
	    p1ap3_1 = p1[1] + p3[1];
 8007350:	ee77 6aa5 	vadd.f32	s13, s15, s11
	    p1sp3_1 = p1[1] - p3[1];
 8007354:	ee77 7ae5 	vsub.f32	s15, s15, s11
	    t3[1] = p1ap3_1 - p2[1] - p4[1];
	    // col 4
	    t4[0] = p1sp3_0 - p2[1] + p4[1];
	    t4[1] = p1sp3_1 + p2[0] - p4[0];
	    // col 1
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8007358:	ee76 5a24 	vadd.f32	s11, s12, s9
	    L >>= 1;
 800735c:	084a      	lsrs	r2, r1, #1
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800735e:	ee75 5a85 	vadd.f32	s11, s11, s10
	    L >>= 1;
 8007362:	9208      	str	r2, [sp, #32]
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8007364:	ee15 1a90 	vmov	r1, s11
 8007368:	4602      	mov	r2, r0
	    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800736a:	ee36 6a64 	vsub.f32	s12, s12, s9
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800736e:	f842 1b08 	str.w	r1, [r2], #8
	    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8007372:	edd4 5a01 	vldr	s11, [r4, #4]
 8007376:	ed95 3a01 	vldr	s6, [r5, #4]
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800737a:	9209      	str	r2, [sp, #36]	; 0x24
	    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800737c:	ee76 5aa5 	vadd.f32	s11, s13, s11

	    // Twiddle factors are ones
	    *p2++ = t2[0];
 8007380:	4622      	mov	r2, r4
	    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8007382:	ee75 5a83 	vadd.f32	s11, s11, s6
	    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8007386:	ee36 6a45 	vsub.f32	s12, s12, s10
	    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800738a:	edc0 5a01 	vstr	s11, [r0, #4]
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800738e:	ee77 5a23 	vadd.f32	s11, s14, s7
	    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8007392:	ee37 7a63 	vsub.f32	s14, s14, s7
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8007396:	ee75 5ac4 	vsub.f32	s11, s11, s8
	    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800739a:	ee76 6ae3 	vsub.f32	s13, s13, s7
	    *p2++ = t2[0];
 800739e:	ee15 1a90 	vmov	r1, s11
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80073a2:	ee77 5ae4 	vsub.f32	s11, s15, s9
	    *p2++ = t2[0];
 80073a6:	f842 1b08 	str.w	r1, [r2], #8
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80073aa:	ee75 5a85 	vadd.f32	s11, s11, s10
	    *p2++ = t2[0];
 80073ae:	920a      	str	r2, [sp, #40]	; 0x28
	    *p2++ = t2[1];
	    *p3++ = t3[0];
 80073b0:	ee16 1a10 	vmov	r1, s12
 80073b4:	4632      	mov	r2, r6
	    *p2++ = t2[1];
 80073b6:	edc4 5a01 	vstr	s11, [r4, #4]
	    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80073ba:	ee37 7a04 	vadd.f32	s14, s14, s8
	    *p3++ = t3[0];
 80073be:	f842 1b08 	str.w	r1, [r2], #8
	    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80073c2:	ee76 6ac4 	vsub.f32	s13, s13, s8
	    *p3++ = t3[0];
 80073c6:	920b      	str	r2, [sp, #44]	; 0x2c
	    *p3++ = t3[1];
	    *p4++ = t4[0];
 80073c8:	ee17 1a10 	vmov	r1, s14
 80073cc:	462a      	mov	r2, r5
	    *p3++ = t3[1];
 80073ce:	edc6 6a01 	vstr	s13, [r6, #4]
	    *p4++ = t4[0];
 80073d2:	f842 1b08 	str.w	r1, [r2], #8
	    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80073d6:	ee77 7aa4 	vadd.f32	s15, s15, s9
	    *p4++ = t4[0];
 80073da:	920c      	str	r2, [sp, #48]	; 0x30
	    *p4++ = t4[1];

	    tw2 += twMod2;
	    tw3 += twMod3;
 80073dc:	9a02      	ldr	r2, [sp, #8]
	    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80073de:	ee77 7ac5 	vsub.f32	s15, s15, s10
	    tw3 += twMod3;
 80073e2:	3210      	adds	r2, #16
	    *p4++ = t4[1];
 80073e4:	edc5 7a01 	vstr	s15, [r5, #4]
	    tw3 += twMod3;
 80073e8:	920d      	str	r2, [sp, #52]	; 0x34
	    tw4 += twMod4;

	    for (l = (L - 2) >> 1; l > 0; l-- )
 80073ea:	9a08      	ldr	r2, [sp, #32]
 80073ec:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80073f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80073f2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80073f6:	1e91      	subs	r1, r2, #2
 80073f8:	084a      	lsrs	r2, r1, #1
 80073fa:	9204      	str	r2, [sp, #16]
 80073fc:	f1a5 0e04 	sub.w	lr, r5, #4
 8007400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007402:	9205      	str	r2, [sp, #20]
	    pEnd4 = pEnd3 + L;
 8007404:	4473      	add	r3, lr
	    for (l = (L - 2) >> 1; l > 0; l-- )
 8007406:	9a04      	ldr	r2, [sp, #16]
 8007408:	990c      	ldr	r1, [sp, #48]	; 0x30
 800740a:	9207      	str	r2, [sp, #28]
	    pEnd1 = p2 - 1;     // points to imaginary values by default
 800740c:	f1a4 0904 	sub.w	r9, r4, #4
	    pEnd2 = p3 - 1;
 8007410:	f1a6 0c04 	sub.w	ip, r6, #4
	    pEnd4 = pEnd3 + L;
 8007414:	9301      	str	r3, [sp, #4]
	    for (l = (L - 2) >> 1; l > 0; l-- )
 8007416:	2200      	movs	r2, #0
 8007418:	9206      	str	r2, [sp, #24]
 800741a:	9a05      	ldr	r2, [sp, #20]
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	3210      	adds	r2, #16
 8007420:	9205      	str	r2, [sp, #20]
 8007422:	9a07      	ldr	r2, [sp, #28]
 8007424:	3b08      	subs	r3, #8
 8007426:	f10a 0a08 	add.w	sl, sl, #8
 800742a:	f1a9 0908 	sub.w	r9, r9, #8
 800742e:	f1ac 0c08 	sub.w	ip, ip, #8
 8007432:	f1ae 0e08 	sub.w	lr, lr, #8
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	3708      	adds	r7, #8
 800743a:	f108 0808 	add.w	r8, r8, #8
 800743e:	3108      	adds	r1, #8
 8007440:	2a00      	cmp	r2, #0
 8007442:	f040 80ab 	bne.w	800759c <arm_cfft_radix8by4_f32+0x296>
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	9a02      	ldr	r2, [sp, #8]
 800744a:	9904      	ldr	r1, [sp, #16]
 800744c:	00df      	lsls	r7, r3, #3
 800744e:	f107 0e08 	add.w	lr, r7, #8
 8007452:	4496      	add	lr, r2
 8007454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007458:	eb02 1a01 	add.w	sl, r2, r1, lsl #4
 800745c:	460a      	mov	r2, r1
 800745e:	9902      	ldr	r1, [sp, #8]
 8007460:	f04f 0c18 	mov.w	ip, #24
 8007464:	fb0c 1c02 	mla	ip, ip, r2, r1
 8007468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800746a:	443a      	add	r2, r7
 800746c:	4690      	mov	r8, r2
 800746e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	    p1ap3_1 = p1[1] + p3[1];
	    p1sp3_1 = p1[1] - p3[1];

	    // col 2
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8007470:	edd8 2a00 	vldr	s5, [r8]
 8007474:	443a      	add	r2, r7
 8007476:	443b      	add	r3, r7
 8007478:	4691      	mov	r9, r2
	    p1ap3_0 = p1[0] + p3[0];
 800747a:	ed99 7a00 	vldr	s14, [r9]
 800747e:	edd3 6a00 	vldr	s13, [r3]
	    p1ap3_1 = p1[1] + p3[1];
 8007482:	edd3 7a01 	vldr	s15, [r3, #4]
 8007486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    p1ap3_0 = p1[0] + p3[0];
 8007488:	ee36 5a87 	vadd.f32	s10, s13, s14
	    p1sp3_0 = p1[0] - p3[0];
 800748c:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    p1ap3_1 = p1[1] + p3[1];
 8007490:	ed99 7a01 	vldr	s14, [r9, #4]
 8007494:	ee77 5a87 	vadd.f32	s11, s15, s14
	    p1sp3_1 = p1[1] - p3[1];
 8007498:	ee77 7ac7 	vsub.f32	s15, s15, s14
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800749c:	ed98 7a01 	vldr	s14, [r8, #4]
 80074a0:	443a      	add	r2, r7
 80074a2:	ed92 2a01 	vldr	s4, [r2, #4]
 80074a6:	ee36 6a87 	vadd.f32	s12, s13, s14
	    // col 3
	    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80074aa:	ee35 4a62 	vsub.f32	s8, s10, s5
	    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80074ae:	ee36 3a42 	vsub.f32	s6, s12, s4
	    t3[1] = p1ap3_1 - p2[1] - p4[1];
	    // col 4
	    t4[0] = p1sp3_0 - p2[1] + p4[1];
	    t4[1] = p1sp3_1 + p2[0] - p4[0];
	    // col 1 - Top
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80074b2:	ee35 5a22 	vadd.f32	s10, s10, s5
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80074b6:	ed92 6a00 	vldr	s12, [r2]
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80074ba:	ee35 5a06 	vadd.f32	s10, s10, s12
	    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80074be:	ee75 4ac7 	vsub.f32	s9, s11, s14
	    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80074c2:	ed83 5a00 	vstr	s10, [r3]
	    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80074c6:	ee36 7ac7 	vsub.f32	s14, s13, s14
	    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80074ca:	edd8 6a01 	vldr	s13, [r8, #4]
 80074ce:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80074d2:	edd2 6a01 	vldr	s13, [r2, #4]
 80074d6:	ee75 5aa6 	vadd.f32	s11, s11, s13
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80074da:	ee77 3ae2 	vsub.f32	s7, s15, s5
	    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80074de:	ee77 7aa2 	vadd.f32	s15, s15, s5
	    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80074e2:	edc3 5a01 	vstr	s11, [r3, #4]
	    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80074e6:	ee73 3a86 	vadd.f32	s7, s7, s12
	    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80074ea:	ee34 4a46 	vsub.f32	s8, s8, s12
	    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80074ee:	ee77 7ac6 	vsub.f32	s15, s15, s12

	    // COL 2
	    twR = tw2[0];
	    twI = tw2[1];
 80074f2:	ed9e 6a01 	vldr	s12, [lr, #4]
	    twR = tw2[0];
 80074f6:	edde 5a00 	vldr	s11, [lr]

	    m0 = t2[0] * twR;
	    m1 = t2[1] * twI;
 80074fa:	ee63 6a86 	vmul.f32	s13, s7, s12
	    m2 = t2[1] * twR;
	    m3 = t2[0] * twI;

	    *p2++ = m0 + m1;
	    *p2++ = m2 - m3;
 80074fe:	ee26 6a43 	vnmul.f32	s12, s12, s6
	    *p2++ = m0 + m1;
 8007502:	eee3 6a25 	vfma.f32	s13, s6, s11

	    *p4++ = m0 + m1;
	    *p4++ = m2 - m3;

	    // first col
	    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8007506:	2304      	movs	r3, #4
	    *p2++ = m2 - m3;
 8007508:	eea3 6aa5 	vfma.f32	s12, s7, s11
	    *p2++ = m0 + m1;
 800750c:	edc8 6a00 	vstr	s13, [r8]
	    *p2++ = m2 - m3;
 8007510:	ed88 6a01 	vstr	s12, [r8, #4]
	    twI = tw3[1];
 8007514:	edda 6a01 	vldr	s13, [sl, #4]
	    twR = tw3[0];
 8007518:	edda 5a00 	vldr	s11, [sl]
	    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800751c:	ee74 4ac2 	vsub.f32	s9, s9, s4
	    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8007520:	ee37 7a02 	vadd.f32	s14, s14, s4
	    m1 = t3[1] * twI;
 8007524:	ee24 6aa6 	vmul.f32	s12, s9, s13
	    *p3++ = m2 - m3;
 8007528:	ee66 6ac4 	vnmul.f32	s13, s13, s8
	    *p3++ = m0 + m1;
 800752c:	eea4 6a25 	vfma.f32	s12, s8, s11
	    *p3++ = m2 - m3;
 8007530:	eee4 6aa5 	vfma.f32	s13, s9, s11
	    *p3++ = m0 + m1;
 8007534:	ed89 6a00 	vstr	s12, [r9]
	    *p3++ = m2 - m3;
 8007538:	edc9 6a01 	vstr	s13, [r9, #4]
	    twI = tw4[1];
 800753c:	eddc 6a07 	vldr	s13, [ip, #28]
	    twR = tw4[0];
 8007540:	eddc 5a06 	vldr	s11, [ip, #24]
	    m1 = t4[1] * twI;
 8007544:	ee27 6aa6 	vmul.f32	s12, s15, s13
	    *p4++ = m0 + m1;
 8007548:	eea7 6a25 	vfma.f32	s12, s14, s11
	    *p4++ = m2 - m3;
 800754c:	ee26 7ac7 	vnmul.f32	s14, s13, s14
	    *p4++ = m0 + m1;
 8007550:	ed82 6a00 	vstr	s12, [r2]
	    *p4++ = m2 - m3;
 8007554:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007558:	ed82 7a01 	vstr	s14, [r2, #4]
	    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800755c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8007560:	460a      	mov	r2, r1
 8007562:	4639      	mov	r1, r7
 8007564:	f7ff fb46 	bl	8006bf4 <arm_radix8_butterfly_f32>
	    // second col
	    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8007568:	9a03      	ldr	r2, [sp, #12]
 800756a:	4639      	mov	r1, r7
 800756c:	4620      	mov	r0, r4
 800756e:	2304      	movs	r3, #4
 8007570:	6852      	ldr	r2, [r2, #4]
 8007572:	f7ff fb3f 	bl	8006bf4 <arm_radix8_butterfly_f32>
	    // third col
	    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8007576:	9a03      	ldr	r2, [sp, #12]
 8007578:	4639      	mov	r1, r7
 800757a:	4630      	mov	r0, r6
 800757c:	2304      	movs	r3, #4
 800757e:	6852      	ldr	r2, [r2, #4]
 8007580:	f7ff fb38 	bl	8006bf4 <arm_radix8_butterfly_f32>
	    // fourth col
	    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8007584:	9a03      	ldr	r2, [sp, #12]
 8007586:	6852      	ldr	r2, [r2, #4]
 8007588:	2304      	movs	r3, #4
 800758a:	4639      	mov	r1, r7
 800758c:	4628      	mov	r0, r5
	}
 800758e:	b00f      	add	sp, #60	; 0x3c
 8007590:	ecbd 8b04 	vpop	{d8-d9}
 8007594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8007598:	f7ff bb2c 	b.w	8006bf4 <arm_radix8_butterfly_f32>
	        p1ap3_0 = p1[0] + p3[0];
 800759c:	ed58 7a02 	vldr	s15, [r8, #-8]
 80075a0:	ed5a 6a02 	vldr	s13, [sl, #-8]
	        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80075a4:	ed57 3a02 	vldr	s7, [r7, #-8]
	        p1ap3_1 = p1[1] + p3[1];
 80075a8:	ed1a 7a01 	vldr	s14, [sl, #-4]
	        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80075ac:	ed11 4a02 	vldr	s8, [r1, #-8]
	        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80075b0:	ed11 3a01 	vldr	s6, [r1, #-4]
	        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	9a06      	ldr	r2, [sp, #24]
	        p1ap3_0 = p1[0] + p3[0];
 80075b8:	ee76 4aa7 	vadd.f32	s9, s13, s15
	        p1sp3_0 = p1[0] - p3[0];
 80075bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
	        p1ap3_1 = p1[1] + p3[1];
 80075c0:	ed58 7a01 	vldr	s15, [r8, #-4]
	        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80075c4:	ee34 6ae3 	vsub.f32	s12, s9, s7
	        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80075c8:	ee74 4aa3 	vadd.f32	s9, s9, s7
	        p1ap3_1 = p1[1] + p3[1];
 80075cc:	ee37 5a27 	vadd.f32	s10, s14, s15
	        p1sp3_1 = p1[1] - p3[1];
 80075d0:	ee37 7a67 	vsub.f32	s14, s14, s15
	        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80075d4:	ed57 7a01 	vldr	s15, [r7, #-4]
	        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80075d8:	ee74 4a84 	vadd.f32	s9, s9, s8
	        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80075dc:	ee76 5aa7 	vadd.f32	s11, s13, s15
	        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80075e0:	ee77 1a63 	vsub.f32	s3, s14, s7
	        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80075e4:	ee75 2a67 	vsub.f32	s5, s10, s15
	        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80075e8:	ee37 7a23 	vadd.f32	s14, s14, s7
	        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80075ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
	        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80075f0:	ed4a 4a02 	vstr	s9, [sl, #-8]
	        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80075f4:	ee77 7a83 	vadd.f32	s15, s15, s6
	        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80075f8:	ee75 5ac3 	vsub.f32	s11, s11, s6
	        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80075fc:	ee72 2ac3 	vsub.f32	s5, s5, s6
	        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8007600:	ee37 3a44 	vsub.f32	s6, s14, s8
	        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8007604:	ed17 7a01 	vldr	s14, [r7, #-4]
 8007608:	ee35 5a07 	vadd.f32	s10, s10, s14
 800760c:	ed11 7a01 	vldr	s14, [r1, #-4]
 8007610:	ee35 5a07 	vadd.f32	s10, s10, s14
	        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8007614:	ee71 1a84 	vadd.f32	s3, s3, s8
	        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8007618:	ed0a 5a01 	vstr	s10, [sl, #-4]
	        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800761c:	ed9e 7a01 	vldr	s14, [lr, #4]
 8007620:	ed99 2a01 	vldr	s4, [r9, #4]
	        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8007624:	ed9c 8a02 	vldr	s16, [ip, #8]
 8007628:	edd3 0a02 	vldr	s1, [r3, #8]
	        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800762c:	edd3 3a01 	vldr	s7, [r3, #4]
 8007630:	eddc 8a01 	vldr	s17, [ip, #4]
	        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8007634:	ee32 5a07 	vadd.f32	s10, s4, s14
	        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8007638:	ee36 6a44 	vsub.f32	s12, s12, s8
	        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800763c:	ee32 2a47 	vsub.f32	s4, s4, s14
	        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8007640:	ed99 4a02 	vldr	s8, [r9, #8]
 8007644:	ed9e 7a02 	vldr	s14, [lr, #8]
 8007648:	ee74 4a07 	vadd.f32	s9, s8, s14
	        p1sp3_0 = pEnd1[0] - pEnd3[0];
 800764c:	ee34 4a47 	vsub.f32	s8, s8, s14
	        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8007650:	ee34 7ac8 	vsub.f32	s14, s9, s16
	        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8007654:	ee74 4a88 	vadd.f32	s9, s9, s16
	        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8007658:	ee35 1a68 	vsub.f32	s2, s10, s17
	        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 800765c:	ee74 4aa0 	vadd.f32	s9, s9, s1
	        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8007660:	ee74 6a68 	vsub.f32	s13, s8, s17
	        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8007664:	edc9 4a02 	vstr	s9, [r9, #8]
	        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8007668:	eddc 4a01 	vldr	s9, [ip, #4]
 800766c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007670:	edd3 4a01 	vldr	s9, [r3, #4]
 8007674:	9b02      	ldr	r3, [sp, #8]
 8007676:	ee35 5a24 	vadd.f32	s10, s10, s9
 800767a:	eb03 0b02 	add.w	fp, r3, r2
 800767e:	ed89 5a01 	vstr	s10, [r9, #4]
	        twI = *tw2++;
 8007682:	ed9b 5a03 	vldr	s10, [fp, #12]
	        twR = *tw2++;
 8007686:	eddb 4a02 	vldr	s9, [fp, #8]
	        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800768a:	ee76 6aa3 	vadd.f32	s13, s13, s7
	        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800768e:	ee31 1a63 	vsub.f32	s2, s2, s7
	        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8007692:	ee73 3ae8 	vsub.f32	s7, s7, s17
	        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8007696:	ee38 9a60 	vsub.f32	s18, s16, s1
	        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800769a:	ee33 4ac4 	vsub.f32	s8, s7, s8
	        m1 = t2[1] * twI;
 800769e:	ee61 3a85 	vmul.f32	s7, s3, s10
	        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80076a2:	ee32 0a09 	vadd.f32	s0, s4, s18
	        *p2++ = m0 + m1;
 80076a6:	eee5 3aa4 	vfma.f32	s7, s11, s9
	        *p2++ = m2 - m3;
 80076aa:	ee65 5a65 	vnmul.f32	s11, s10, s11
	        *p2++ = m0 + m1;
 80076ae:	ed47 3a02 	vstr	s7, [r7, #-8]
	        *p2++ = m2 - m3;
 80076b2:	eee1 5aa4 	vfma.f32	s11, s3, s9
	        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 80076b6:	ee37 7a60 	vsub.f32	s14, s14, s1
	        *p2++ = m2 - m3;
 80076ba:	ed47 5a01 	vstr	s11, [r7, #-4]
	        *pEnd2-- = m0 - m1;
 80076be:	ee64 5ac0 	vnmul.f32	s11, s9, s0
	        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 80076c2:	ee39 2a42 	vsub.f32	s4, s18, s4
	        *pEnd2-- = m0 - m1;
 80076c6:	eee6 5a85 	vfma.f32	s11, s13, s10
	        m3 = t2[3] * twR;
 80076ca:	ee66 6aa4 	vmul.f32	s13, s13, s9
	        *pEnd2-- = m0 - m1;
 80076ce:	edcc 5a02 	vstr	s11, [ip, #8]
	        *pEnd2-- = m2 + m3;
 80076d2:	eee0 6a05 	vfma.f32	s13, s0, s10
 80076d6:	edcc 6a01 	vstr	s13, [ip, #4]
	        twR = tw3[0];
 80076da:	9a05      	ldr	r2, [sp, #20]
	        *pEnd4-- = m0 - m1;
 80076dc:	9b01      	ldr	r3, [sp, #4]
	        twI = tw3[1];
 80076de:	ed52 6a03 	vldr	s13, [r2, #-12]
	        twR = tw3[0];
 80076e2:	ed52 5a04 	vldr	s11, [r2, #-16]
 80076e6:	9a06      	ldr	r2, [sp, #24]
	        m1 = t3[1] * twI;
 80076e8:	ee22 5aa6 	vmul.f32	s10, s5, s13
 80076ec:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
	        *p3++ = m0 + m1;
 80076f0:	eea6 5a25 	vfma.f32	s10, s12, s11
	    for (l = (L - 2) >> 1; l > 0; l-- )
 80076f4:	9a07      	ldr	r2, [sp, #28]
	        *p3++ = m2 - m3;
 80076f6:	ee26 6ac6 	vnmul.f32	s12, s13, s12
	        *p3++ = m0 + m1;
 80076fa:	ed08 5a02 	vstr	s10, [r8, #-8]
	        *p3++ = m2 - m3;
 80076fe:	eea2 6aa5 	vfma.f32	s12, s5, s11
	    for (l = (L - 2) >> 1; l > 0; l-- )
 8007702:	3a01      	subs	r2, #1
 8007704:	9207      	str	r2, [sp, #28]
 8007706:	9a06      	ldr	r2, [sp, #24]
	        *p3++ = m2 - m3;
 8007708:	ed08 6a01 	vstr	s12, [r8, #-4]
	        *pEnd3-- = m0 - m1;
 800770c:	ee26 6ac1 	vnmul.f32	s12, s13, s2
	        m3 = t3[3] * twI;
 8007710:	ee67 6a26 	vmul.f32	s13, s14, s13
	        *pEnd3-- = m0 - m1;
 8007714:	eea7 6a65 	vfms.f32	s12, s14, s11
 8007718:	3208      	adds	r2, #8
	        *pEnd3-- = m3 - m2;
 800771a:	eee1 6a65 	vfms.f32	s13, s2, s11
	        *pEnd3-- = m0 - m1;
 800771e:	ed8e 6a02 	vstr	s12, [lr, #8]
	        *pEnd3-- = m3 - m2;
 8007722:	edce 6a01 	vstr	s13, [lr, #4]
	        twI = tw4[1];
 8007726:	eddb 6a07 	vldr	s13, [fp, #28]
	        twR = tw4[0];
 800772a:	ed9b 6a06 	vldr	s12, [fp, #24]
	        m1 = t4[1] * twI;
 800772e:	ee23 7a26 	vmul.f32	s14, s6, s13
	        *p4++ = m0 + m1;
 8007732:	eea7 7a86 	vfma.f32	s14, s15, s12
 8007736:	ed01 7a02 	vstr	s14, [r1, #-8]
	        *p4++ = m2 - m3;
 800773a:	ee26 7ae7 	vnmul.f32	s14, s13, s15
	        *pEnd4-- = m0 - m1;
 800773e:	ee66 7a42 	vnmul.f32	s15, s12, s4
	        *p4++ = m2 - m3;
 8007742:	eea3 7a06 	vfma.f32	s14, s6, s12
	        *pEnd4-- = m0 - m1;
 8007746:	eee4 7a26 	vfma.f32	s15, s8, s13
	        *p4++ = m2 - m3;
 800774a:	ed01 7a01 	vstr	s14, [r1, #-4]
	        *pEnd4-- = m0 - m1;
 800774e:	edc3 7a02 	vstr	s15, [r3, #8]
	        m3 = t4[3] * twR;
 8007752:	ee64 7a06 	vmul.f32	s15, s8, s12
	        *pEnd4-- = m2 + m3;
 8007756:	eee2 7a26 	vfma.f32	s15, s4, s13
 800775a:	edc3 7a01 	vstr	s15, [r3, #4]
 800775e:	e65b      	b.n	8007418 <arm_cfft_radix8by4_f32+0x112>

08007760 <arm_cfft_f32>:
	    uint8_t bitReverseFlag)
	{
	    uint32_t  L = S->fftLen, l;
	    float32_t invL, * pSrc;

	    if(ifftFlag == 1u)
 8007760:	2a01      	cmp	r2, #1
	{
 8007762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	4606      	mov	r6, r0
 8007768:	460d      	mov	r5, r1
 800776a:	4617      	mov	r7, r2
 800776c:	4698      	mov	r8, r3
	    uint32_t  L = S->fftLen, l;
 800776e:	8804      	ldrh	r4, [r0, #0]
	    if(ifftFlag == 1u)
 8007770:	d039      	beq.n	80077e6 <arm_cfft_f32+0x86>
	            *pSrc = -*pSrc;
	            pSrc += 2;
	        }
	    }

	    switch (L)
 8007772:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8007776:	d049      	beq.n	800780c <arm_cfft_f32+0xac>
 8007778:	d821      	bhi.n	80077be <arm_cfft_f32+0x5e>
 800777a:	2c20      	cmp	r4, #32
 800777c:	d046      	beq.n	800780c <arm_cfft_f32+0xac>
 800777e:	d81a      	bhi.n	80077b6 <arm_cfft_f32+0x56>
 8007780:	2c10      	cmp	r4, #16
 8007782:	d03e      	beq.n	8007802 <arm_cfft_f32+0xa2>
	    case 4096:
	        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
	        break;
	    }

	    if( bitReverseFlag )
 8007784:	f1b8 0f00 	cmp.w	r8, #0
 8007788:	d004      	beq.n	8007794 <arm_cfft_f32+0x34>
	        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800778a:	68b2      	ldr	r2, [r6, #8]
 800778c:	89b1      	ldrh	r1, [r6, #12]
 800778e:	4628      	mov	r0, r5
 8007790:	f7f8 fd86 	bl	80002a0 <arm_bitreversal_32>

	    if(ifftFlag == 1u)
 8007794:	2f01      	cmp	r7, #1
 8007796:	d10c      	bne.n	80077b2 <arm_cfft_f32+0x52>
	    {
	        invL = 1.0f/(float32_t)L;
 8007798:	ee07 4a90 	vmov	s15, r4
 800779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	        /*  Conjugate and scale output data */
	        pSrc = p1;
	        for(l=0; l<L; l++)
 80077a8:	2300      	movs	r3, #0
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	f105 0508 	add.w	r5, r5, #8
 80077b0:	d331      	bcc.n	8007816 <arm_cfft_f32+0xb6>
 80077b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    switch (L)
 80077b6:	2c40      	cmp	r4, #64	; 0x40
 80077b8:	d008      	beq.n	80077cc <arm_cfft_f32+0x6c>
 80077ba:	2c80      	cmp	r4, #128	; 0x80
 80077bc:	e7e1      	b.n	8007782 <arm_cfft_f32+0x22>
 80077be:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80077c2:	d01e      	beq.n	8007802 <arm_cfft_f32+0xa2>
 80077c4:	d809      	bhi.n	80077da <arm_cfft_f32+0x7a>
 80077c6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80077ca:	d1db      	bne.n	8007784 <arm_cfft_f32+0x24>
	        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 80077cc:	2301      	movs	r3, #1
 80077ce:	6872      	ldr	r2, [r6, #4]
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f7ff fa0e 	bl	8006bf4 <arm_radix8_butterfly_f32>
	        break;
 80077d8:	e7d4      	b.n	8007784 <arm_cfft_f32+0x24>
	    switch (L)
 80077da:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80077de:	d015      	beq.n	800780c <arm_cfft_f32+0xac>
 80077e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80077e4:	e7f1      	b.n	80077ca <arm_cfft_f32+0x6a>
	        pSrc = p1 + 1;
 80077e6:	1d0b      	adds	r3, r1, #4
	        for(l=0; l<L; l++)
 80077e8:	2200      	movs	r2, #0
 80077ea:	42a2      	cmp	r2, r4
 80077ec:	f103 0308 	add.w	r3, r3, #8
 80077f0:	d2bf      	bcs.n	8007772 <arm_cfft_f32+0x12>
	            *pSrc = -*pSrc;
 80077f2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80077f6:	eef1 7a67 	vneg.f32	s15, s15
 80077fa:	ed43 7a02 	vstr	s15, [r3, #-8]
	        for(l=0; l<L; l++)
 80077fe:	3201      	adds	r2, #1
 8007800:	e7f3      	b.n	80077ea <arm_cfft_f32+0x8a>
	        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8007802:	4629      	mov	r1, r5
 8007804:	4630      	mov	r0, r6
 8007806:	f7ff fcc3 	bl	8007190 <arm_cfft_radix8by2_f32>
	        break;
 800780a:	e7bb      	b.n	8007784 <arm_cfft_f32+0x24>
	        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800780c:	4629      	mov	r1, r5
 800780e:	4630      	mov	r0, r6
 8007810:	f7ff fd79 	bl	8007306 <arm_cfft_radix8by4_f32>
	        break;
 8007814:	e7b6      	b.n	8007784 <arm_cfft_f32+0x24>
	        {
	            *pSrc++ *=   invL ;
 8007816:	ed55 7a02 	vldr	s15, [r5, #-8]
 800781a:	ee67 7a87 	vmul.f32	s15, s15, s14
	        for(l=0; l<L; l++)
 800781e:	3301      	adds	r3, #1
	            *pSrc++ *=   invL ;
 8007820:	ed45 7a02 	vstr	s15, [r5, #-8]
	            *pSrc  = -(*pSrc) * invL;
 8007824:	ed55 7a01 	vldr	s15, [r5, #-4]
 8007828:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800782c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007830:	e7bb      	b.n	80077aa <arm_cfft_f32+0x4a>
	...

08007834 <lcd_clock>:
// "Private" globals
uint8_t _lcd_char = 0;
uint8_t _lcd_line = 0;

void lcd_clock(void)
{
 8007834:	b510      	push	{r4, lr}
	// Pulse clock
	HAL_GPIO_WritePin(LCD_PORT,LCD_CLOCK,GPIO_PIN_SET);
 8007836:	4c0a      	ldr	r4, [pc, #40]	; (8007860 <lcd_clock+0x2c>)
 8007838:	2201      	movs	r2, #1
 800783a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800783e:	4620      	mov	r0, r4
 8007840:	f7fb fff4 	bl	800382c <HAL_GPIO_WritePin>
	delay(1);
 8007844:	2001      	movs	r0, #1
 8007846:	f7fb fb07 	bl	8002e58 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT,LCD_CLOCK,GPIO_PIN_RESET);
 800784a:	4620      	mov	r0, r4
 800784c:	2200      	movs	r2, #0
 800784e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007852:	f7fb ffeb 	bl	800382c <HAL_GPIO_WritePin>
	delay(1);
 8007856:	2001      	movs	r0, #1
}
 8007858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay(1);
 800785c:	f7fb bafc 	b.w	8002e58 <HAL_Delay>
 8007860:	40020c00 	.word	0x40020c00

08007864 <lcd_reset>:

void lcd_reset(void)
{
 8007864:	b510      	push	{r4, lr}
	// Resets display from any state to 4-bit mode, first nibble.

	// Set everything low first
	HAL_GPIO_WritePin(LCD_PORT,LCD_RS,GPIO_PIN_RESET);
 8007866:	4c20      	ldr	r4, [pc, #128]	; (80078e8 <lcd_reset+0x84>)
 8007868:	2200      	movs	r2, #0
 800786a:	4620      	mov	r0, r4
 800786c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007870:	f7fb ffdc 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT,LCD_CLOCK,GPIO_PIN_RESET);
 8007874:	4620      	mov	r0, r4
 8007876:	2200      	movs	r2, #0
 8007878:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800787c:	f7fb ffd6 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT,LCD_4,GPIO_PIN_RESET);
 8007880:	4620      	mov	r0, r4
 8007882:	2200      	movs	r2, #0
 8007884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007888:	f7fb ffd0 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT,LCD_5,GPIO_PIN_RESET);
 800788c:	4620      	mov	r0, r4
 800788e:	2200      	movs	r2, #0
 8007890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007894:	f7fb ffca 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT,LCD_6,GPIO_PIN_RESET);
 8007898:	4620      	mov	r0, r4
 800789a:	2200      	movs	r2, #0
 800789c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80078a0:	f7fb ffc4 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT,LCD_7,GPIO_PIN_RESET);
 80078a4:	4620      	mov	r0, r4
 80078a6:	2200      	movs	r2, #0
 80078a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078ac:	f7fb ffbe 	bl	800382c <HAL_GPIO_WritePin>

	// Reset strategy below based on Wikipedia description, should recover
	// from any setting

	// Write 0b0011 three times
	HAL_GPIO_WritePin(LCD_PORT,LCD_4,GPIO_PIN_SET);
 80078b0:	4620      	mov	r0, r4
 80078b2:	2201      	movs	r2, #1
 80078b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078b8:	f7fb ffb8 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT,LCD_5,GPIO_PIN_SET);
 80078bc:	4620      	mov	r0, r4
 80078be:	2201      	movs	r2, #1
 80078c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078c4:	f7fb ffb2 	bl	800382c <HAL_GPIO_WritePin>
	lcd_clock();
 80078c8:	f7ff ffb4 	bl	8007834 <lcd_clock>
	lcd_clock();
 80078cc:	f7ff ffb2 	bl	8007834 <lcd_clock>
	lcd_clock();
 80078d0:	f7ff ffb0 	bl	8007834 <lcd_clock>
	// LCD now guaranteed to be in 8-bit state

	// Now write 0b0010 (set to 4-bit mode, ready for first nibble)
	HAL_GPIO_WritePin(LCD_PORT,LCD_4,GPIO_PIN_RESET);
 80078d4:	4620      	mov	r0, r4
 80078d6:	2200      	movs	r2, #0
 80078d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078dc:	f7fb ffa6 	bl	800382c <HAL_GPIO_WritePin>
	lcd_clock();
}
 80078e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_clock();
 80078e4:	f7ff bfa6 	b.w	8007834 <lcd_clock>
 80078e8:	40020c00 	.word	0x40020c00

080078ec <lcd_write>:
{
	// Writes a byte to the display (rs must be either 0 or 1)

	// Write second nibble and set RS

	if((byte >> 4 ) & 1)
 80078ec:	f3c0 1200 	ubfx	r2, r0, #4, #1
{
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4604      	mov	r4, r0
 80078f4:	460d      	mov	r5, r1
	if((byte >> 4 ) & 1)
 80078f6:	b102      	cbz	r2, 80078fa <lcd_write+0xe>
		HAL_GPIO_WritePin(LCD_PORT,LCD_4,GPIO_PIN_SET);
 80078f8:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_4,GPIO_PIN_RESET);
 80078fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078fe:	4828      	ldr	r0, [pc, #160]	; (80079a0 <lcd_write+0xb4>)
 8007900:	f7fb ff94 	bl	800382c <HAL_GPIO_WritePin>
	if((byte >> 5 ) & 1)
 8007904:	f3c4 1240 	ubfx	r2, r4, #5, #1
 8007908:	b102      	cbz	r2, 800790c <lcd_write+0x20>
		HAL_GPIO_WritePin(LCD_PORT,LCD_5,GPIO_PIN_SET);
 800790a:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_5,GPIO_PIN_RESET);
 800790c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007910:	4823      	ldr	r0, [pc, #140]	; (80079a0 <lcd_write+0xb4>)
 8007912:	f7fb ff8b 	bl	800382c <HAL_GPIO_WritePin>
	if((byte >> 6 ) & 1)
 8007916:	f3c4 1280 	ubfx	r2, r4, #6, #1
 800791a:	b102      	cbz	r2, 800791e <lcd_write+0x32>
		HAL_GPIO_WritePin(LCD_PORT,LCD_6,GPIO_PIN_SET);
 800791c:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_6,GPIO_PIN_RESET);
 800791e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007922:	481f      	ldr	r0, [pc, #124]	; (80079a0 <lcd_write+0xb4>)
 8007924:	f7fb ff82 	bl	800382c <HAL_GPIO_WritePin>
	if((byte >> 7 ) & 1)
 8007928:	09e2      	lsrs	r2, r4, #7
		HAL_GPIO_WritePin(LCD_PORT,LCD_7,GPIO_PIN_SET);
 800792a:	bf18      	it	ne
 800792c:	2201      	movne	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_7,GPIO_PIN_RESET);
 800792e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007932:	481b      	ldr	r0, [pc, #108]	; (80079a0 <lcd_write+0xb4>)
 8007934:	f7fb ff7a 	bl	800382c <HAL_GPIO_WritePin>
	if(rs)
 8007938:	b37d      	cbz	r5, 800799a <lcd_write+0xae>
		HAL_GPIO_WritePin(LCD_PORT,LCD_RS,GPIO_PIN_SET);
 800793a:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_RS,GPIO_PIN_RESET);
 800793c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007940:	4817      	ldr	r0, [pc, #92]	; (80079a0 <lcd_write+0xb4>)
 8007942:	f7fb ff73 	bl	800382c <HAL_GPIO_WritePin>

	lcd_clock();
 8007946:	f7ff ff75 	bl	8007834 <lcd_clock>

	// Write first nibble

	if(byte & 1)
 800794a:	f014 0201 	ands.w	r2, r4, #1
		HAL_GPIO_WritePin(LCD_PORT,LCD_4,GPIO_PIN_SET);
 800794e:	bf18      	it	ne
 8007950:	2201      	movne	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_4,GPIO_PIN_RESET);
 8007952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007956:	4812      	ldr	r0, [pc, #72]	; (80079a0 <lcd_write+0xb4>)
 8007958:	f7fb ff68 	bl	800382c <HAL_GPIO_WritePin>
	if((byte >> 1 ) & 1)
 800795c:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8007960:	b102      	cbz	r2, 8007964 <lcd_write+0x78>
		HAL_GPIO_WritePin(LCD_PORT,LCD_5,GPIO_PIN_SET);
 8007962:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_5,GPIO_PIN_RESET);
 8007964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007968:	480d      	ldr	r0, [pc, #52]	; (80079a0 <lcd_write+0xb4>)
 800796a:	f7fb ff5f 	bl	800382c <HAL_GPIO_WritePin>
	if((byte >> 2 ) & 1)
 800796e:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8007972:	b102      	cbz	r2, 8007976 <lcd_write+0x8a>
		HAL_GPIO_WritePin(LCD_PORT,LCD_6,GPIO_PIN_SET);
 8007974:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_6,GPIO_PIN_RESET);
 8007976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800797a:	4809      	ldr	r0, [pc, #36]	; (80079a0 <lcd_write+0xb4>)
 800797c:	f7fb ff56 	bl	800382c <HAL_GPIO_WritePin>
	if((byte >> 3 ) & 1)
 8007980:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8007984:	b102      	cbz	r2, 8007988 <lcd_write+0x9c>
		HAL_GPIO_WritePin(LCD_PORT,LCD_7,GPIO_PIN_SET);
 8007986:	2201      	movs	r2, #1
	else
		HAL_GPIO_WritePin(LCD_PORT,LCD_7,GPIO_PIN_RESET);
 8007988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800798c:	4804      	ldr	r0, [pc, #16]	; (80079a0 <lcd_write+0xb4>)
 800798e:	f7fb ff4d 	bl	800382c <HAL_GPIO_WritePin>

	lcd_clock();
}
 8007992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_clock();
 8007996:	f7ff bf4d 	b.w	8007834 <lcd_clock>
		HAL_GPIO_WritePin(LCD_PORT,LCD_RS,GPIO_PIN_RESET);
 800799a:	462a      	mov	r2, r5
 800799c:	e7ce      	b.n	800793c <lcd_write+0x50>
 800799e:	bf00      	nop
 80079a0:	40020c00 	.word	0x40020c00

080079a4 <lcd_clear>:

void lcd_clear(void)
{
 80079a4:	b508      	push	{r3, lr}
	// Clears display, resets cursor
	lcd_write(0b00000001, 0);
 80079a6:	2100      	movs	r1, #0
 80079a8:	2001      	movs	r0, #1
 80079aa:	f7ff ff9f 	bl	80078ec <lcd_write>
	_lcd_char = 0;
 80079ae:	4a03      	ldr	r2, [pc, #12]	; (80079bc <lcd_clear+0x18>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	7013      	strb	r3, [r2, #0]
	_lcd_line = 0;
 80079b4:	4a02      	ldr	r2, [pc, #8]	; (80079c0 <lcd_clear+0x1c>)
 80079b6:	7013      	strb	r3, [r2, #0]
 80079b8:	bd08      	pop	{r3, pc}
 80079ba:	bf00      	nop
 80079bc:	200085f4 	.word	0x200085f4
 80079c0:	200085f5 	.word	0x200085f5

080079c4 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
	// "Display On/Off & Cursor" command. All parameters must be either 0 or 1

	lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80079c4:	f042 0208 	orr.w	r2, r2, #8
 80079c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80079cc:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
 80079d0:	2100      	movs	r1, #0
 80079d2:	b2c0      	uxtb	r0, r0
 80079d4:	f7ff bf8a 	b.w	80078ec <lcd_write>

080079d8 <lcd_display_address>:
}

void lcd_display_address(uint8_t address)
{
	lcd_write(0b10000000 | address, 0);
 80079d8:	2100      	movs	r1, #0
 80079da:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80079de:	f7ff bf85 	b.w	80078ec <lcd_write>
	...

080079e4 <lcd_print>:
}

void lcd_print(char string[])
{
 80079e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t i;
	for(i = 0; string[i] != 0; i++) {
		// If we know the display properties and a newline character is
		// present, print the rest of the string on the new line.
		if(lcd_lines && string[i] == '\n') {
 80079e8:	4f20      	ldr	r7, [pc, #128]	; (8007a6c <lcd_print+0x88>)
			}
		}
		else {
			// If we know the display properties and have reached the end of
			// line, print the rest on the next line
			if(lcd_chars)
 80079ea:	4e21      	ldr	r6, [pc, #132]	; (8007a70 <lcd_print+0x8c>)
{
 80079ec:	4605      	mov	r5, r0
	for(i = 0; string[i] != 0; i++) {
 80079ee:	2400      	movs	r4, #0
 80079f0:	fa5f f884 	uxtb.w	r8, r4
 80079f4:	f815 3008 	ldrb.w	r3, [r5, r8]
 80079f8:	b90b      	cbnz	r3, 80079fe <lcd_print+0x1a>
				}
			lcd_write(string[i], 1);
			if(lcd_chars) _lcd_char++;
		}
	}
}
 80079fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(lcd_lines && string[i] == '\n') {
 80079fe:	783a      	ldrb	r2, [r7, #0]
 8007a00:	b18a      	cbz	r2, 8007a26 <lcd_print+0x42>
 8007a02:	2b0a      	cmp	r3, #10
 8007a04:	d10f      	bne.n	8007a26 <lcd_print+0x42>
			if(_lcd_line < lcd_lines) {
 8007a06:	491b      	ldr	r1, [pc, #108]	; (8007a74 <lcd_print+0x90>)
 8007a08:	780b      	ldrb	r3, [r1, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d909      	bls.n	8007a22 <lcd_print+0x3e>
				lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8007a0e:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <lcd_print+0x94>)
 8007a10:	1c58      	adds	r0, r3, #1
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	7008      	strb	r0, [r1, #0]
 8007a16:	5cd0      	ldrb	r0, [r2, r3]
 8007a18:	f7ff ffde 	bl	80079d8 <lcd_display_address>
				_lcd_char = 0;
 8007a1c:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <lcd_print+0x98>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	3401      	adds	r4, #1
 8007a24:	e7e4      	b.n	80079f0 <lcd_print+0xc>
			if(lcd_chars)
 8007a26:	7833      	ldrb	r3, [r6, #0]
 8007a28:	b19b      	cbz	r3, 8007a52 <lcd_print+0x6e>
				if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8007a2a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8007a7c <lcd_print+0x98>
 8007a2e:	f899 1000 	ldrb.w	r1, [r9]
 8007a32:	4299      	cmp	r1, r3
 8007a34:	d10d      	bne.n	8007a52 <lcd_print+0x6e>
 8007a36:	490f      	ldr	r1, [pc, #60]	; (8007a74 <lcd_print+0x90>)
 8007a38:	780b      	ldrb	r3, [r1, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d909      	bls.n	8007a52 <lcd_print+0x6e>
					lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8007a3e:	4a0e      	ldr	r2, [pc, #56]	; (8007a78 <lcd_print+0x94>)
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	7008      	strb	r0, [r1, #0]
 8007a46:	5cd0      	ldrb	r0, [r2, r3]
 8007a48:	f7ff ffc6 	bl	80079d8 <lcd_display_address>
					_lcd_char = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f889 3000 	strb.w	r3, [r9]
			lcd_write(string[i], 1);
 8007a52:	2101      	movs	r1, #1
 8007a54:	f815 0008 	ldrb.w	r0, [r5, r8]
 8007a58:	f7ff ff48 	bl	80078ec <lcd_write>
			if(lcd_chars) _lcd_char++;
 8007a5c:	7833      	ldrb	r3, [r6, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0df      	beq.n	8007a22 <lcd_print+0x3e>
 8007a62:	4a06      	ldr	r2, [pc, #24]	; (8007a7c <lcd_print+0x98>)
 8007a64:	7813      	ldrb	r3, [r2, #0]
 8007a66:	3301      	adds	r3, #1
 8007a68:	7013      	strb	r3, [r2, #0]
 8007a6a:	e7da      	b.n	8007a22 <lcd_print+0x3e>
 8007a6c:	2000861d 	.word	0x2000861d
 8007a70:	2000861c 	.word	0x2000861c
 8007a74:	200085f5 	.word	0x200085f5
 8007a78:	20008620 	.word	0x20008620
 8007a7c:	200085f4 	.word	0x200085f4

08007a80 <SystemClock_Config>:
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{
 8007a80:	b530      	push	{r4, r5, lr}
 8007a82:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8007a84:	4b29      	ldr	r3, [pc, #164]	; (8007b2c <SystemClock_Config+0xac>)
 8007a86:	2100      	movs	r1, #0
 8007a88:	9101      	str	r1, [sp, #4]
 8007a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a90:	641a      	str	r2, [r3, #64]	; 0x40
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	9b01      	ldr	r3, [sp, #4]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a9c:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <SystemClock_Config+0xb0>)
 8007a9e:	9102      	str	r1, [sp, #8]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007aae:	9302      	str	r3, [sp, #8]
 8007ab0:	9b02      	ldr	r3, [sp, #8]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007aba:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007abc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ac0:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
	RCC_OscInitStruct.PLL.PLLN = 216;
 8007ac2:	23d8      	movs	r3, #216	; 0xd8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ac4:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLM = 15;
 8007ac6:	250f      	movs	r5, #15
	RCC_OscInitStruct.PLL.PLLN = 216;
 8007ac8:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 8;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007aca:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8007acc:	2308      	movs	r3, #8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ace:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 15;
 8007ad0:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007ad2:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8007ad4:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ad6:	f7fb feeb 	bl	80038b0 <HAL_RCC_OscConfig>
 8007ada:	b100      	cbz	r0, 8007ade <SystemClock_Config+0x5e>
 8007adc:	e7fe      	b.n	8007adc <SystemClock_Config+0x5c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007ade:	f7fb feab 	bl	8003838 <HAL_PWREx_EnableOverDrive>
 8007ae2:	b100      	cbz	r0, 8007ae6 <SystemClock_Config+0x66>
 8007ae4:	e7fe      	b.n	8007ae4 <SystemClock_Config+0x64>
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8007ae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007aea:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8007aec:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007aee:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007af4:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007af6:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007af8:	9503      	str	r5, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007afa:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007afc:	f7fc f87c 	bl	8003bf8 <HAL_RCC_ClockConfig>
 8007b00:	4604      	mov	r4, r0
 8007b02:	b100      	cbz	r0, 8007b06 <SystemClock_Config+0x86>
 8007b04:	e7fe      	b.n	8007b04 <SystemClock_Config+0x84>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007b06:	f7fc f911 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8007b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007b12:	f7fb fc11 	bl	8003338 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007b16:	2004      	movs	r0, #4
 8007b18:	f7fb fc24 	bl	8003364 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	4621      	mov	r1, r4
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	f7fb fbc8 	bl	80032b8 <HAL_NVIC_SetPriority>
}
 8007b28:	b015      	add	sp, #84	; 0x54
 8007b2a:	bd30      	pop	{r4, r5, pc}
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	40007000 	.word	0x40007000

08007b34 <fft>:
 * @retval None
 */



void fft(uint32_t fftSize,float32_t buffer[], float32_t fft_out[fftSize]){
 8007b34:	b570      	push	{r4, r5, r6, lr}
	char serialt[8];

	/* 					Complex Fast Fourier Transformation					 */

	/* Process the data through the CFFT/CIFFT module *The buffer must be larger than len */
	if (fftSize ==64)
 8007b36:	2840      	cmp	r0, #64	; 0x40
void fft(uint32_t fftSize,float32_t buffer[], float32_t fft_out[fftSize]){
 8007b38:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	460e      	mov	r6, r1
 8007b40:	4615      	mov	r5, r2
	if (fftSize ==64)
 8007b42:	d113      	bne.n	8007b6c <fft+0x38>
		arm_cfft_f32(&arm_cfft_sR_f32_len64,buffer,ifftFlag,doBitReverse);
 8007b44:	4b28      	ldr	r3, [pc, #160]	; (8007be8 <fft+0xb4>)
 8007b46:	4a29      	ldr	r2, [pc, #164]	; (8007bec <fft+0xb8>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	7812      	ldrb	r2, [r2, #0]
 8007b4c:	4828      	ldr	r0, [pc, #160]	; (8007bf0 <fft+0xbc>)
	else if(fftSize == 128)
		arm_cfft_f32(&arm_cfft_sR_f32_len128,buffer,ifftFlag,doBitReverse);
 8007b4e:	f7ff fe07 	bl	8007760 <arm_cfft_f32>
		arm_cfft_f32(&arm_cfft_sR_f32_len1024,buffer,ifftFlag,doBitReverse);
	else
		serialPrint("Supports up to 1024 bin fft\r\n");
	/* 				End of Complex Fast Fourier Transformation 				*/
	float32_t afbuffer[256];
	arm_abs_f32(buffer,afbuffer,256);
 8007b52:	4669      	mov	r1, sp
 8007b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7fe ffbe 	bl	8006ada <arm_abs_f32>
	//for(i=0;i<256;i++){
	//sprintf(serialt,"%.03f\r\n",afbuffer[i]);serialPrint(serialt);
	//	}
	for(i=0;i<2*fftSize;i+=2){
 8007b5e:	0061      	lsls	r1, r4, #1
 8007b60:	2300      	movs	r3, #0
 8007b62:	4299      	cmp	r1, r3
 8007b64:	d82d      	bhi.n	8007bc2 <fft+0x8e>

		fft_out[i/2] = ((afbuffer[i]*afbuffer[i])/fftSize);

	}
}
 8007b66:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
	else if(fftSize == 128)
 8007b6c:	2880      	cmp	r0, #128	; 0x80
 8007b6e:	d105      	bne.n	8007b7c <fft+0x48>
		arm_cfft_f32(&arm_cfft_sR_f32_len128,buffer,ifftFlag,doBitReverse);
 8007b70:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <fft+0xb4>)
 8007b72:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <fft+0xb8>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	481e      	ldr	r0, [pc, #120]	; (8007bf4 <fft+0xc0>)
 8007b7a:	e7e8      	b.n	8007b4e <fft+0x1a>
	else if (fftSize ==256)
 8007b7c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007b80:	d105      	bne.n	8007b8e <fft+0x5a>
		arm_cfft_f32(&arm_cfft_sR_f32_len256,buffer,ifftFlag,doBitReverse);
 8007b82:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <fft+0xb4>)
 8007b84:	4a19      	ldr	r2, [pc, #100]	; (8007bec <fft+0xb8>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	481b      	ldr	r0, [pc, #108]	; (8007bf8 <fft+0xc4>)
 8007b8c:	e7df      	b.n	8007b4e <fft+0x1a>
	else if (fftSize == 512)
 8007b8e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007b92:	d105      	bne.n	8007ba0 <fft+0x6c>
		arm_cfft_f32(&arm_cfft_sR_f32_len512,buffer,ifftFlag,doBitReverse);
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <fft+0xb4>)
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <fft+0xb8>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	4817      	ldr	r0, [pc, #92]	; (8007bfc <fft+0xc8>)
 8007b9e:	e7d6      	b.n	8007b4e <fft+0x1a>
	else if (fftSize == 1024)
 8007ba0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007ba4:	d105      	bne.n	8007bb2 <fft+0x7e>
		arm_cfft_f32(&arm_cfft_sR_f32_len1024,buffer,ifftFlag,doBitReverse);
 8007ba6:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <fft+0xb4>)
 8007ba8:	4a10      	ldr	r2, [pc, #64]	; (8007bec <fft+0xb8>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	4814      	ldr	r0, [pc, #80]	; (8007c00 <fft+0xcc>)
 8007bb0:	e7cd      	b.n	8007b4e <fft+0x1a>
		serialPrint("Supports up to 1024 bin fft\r\n");
 8007bb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007bb6:	221e      	movs	r2, #30
 8007bb8:	4912      	ldr	r1, [pc, #72]	; (8007c04 <fft+0xd0>)
 8007bba:	4813      	ldr	r0, [pc, #76]	; (8007c08 <fft+0xd4>)
 8007bbc:	f7fd fa20 	bl	8005000 <HAL_UART_Transmit>
 8007bc0:	e7c7      	b.n	8007b52 <fft+0x1e>
		fft_out[i/2] = ((afbuffer[i]*afbuffer[i])/fftSize);
 8007bc2:	eb0d 0283 	add.w	r2, sp, r3, lsl #2
 8007bc6:	edd2 7a00 	vldr	s15, [r2]
 8007bca:	ee07 4a10 	vmov	s14, r4
 8007bce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007bd2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007bd6:	105a      	asrs	r2, r3, #1
 8007bd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007bdc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
	for(i=0;i<2*fftSize;i+=2){
 8007be0:	3302      	adds	r3, #2
		fft_out[i/2] = ((afbuffer[i]*afbuffer[i])/fftSize);
 8007be2:	ed82 7a00 	vstr	s14, [r2]
 8007be6:	e7bc      	b.n	8007b62 <fft+0x2e>
 8007be8:	20008478 	.word	0x20008478
 8007bec:	200085fd 	.word	0x200085fd
 8007bf0:	0800f3ec 	.word	0x0800f3ec
 8007bf4:	0800f3bc 	.word	0x0800f3bc
 8007bf8:	0800f3cc 	.word	0x0800f3cc
 8007bfc:	0800f3dc 	.word	0x0800f3dc
 8007c00:	0800f3ac 	.word	0x0800f3ac
 8007c04:	080154c0 	.word	0x080154c0
 8007c08:	20008b34 	.word	0x20008b34

08007c0c <sigmoid>:
	feedforward(in,nnin);


}
/* Activation Function */
double sigmoid(double x){
 8007c0c:	b508      	push	{r3, lr}
	return 2.0/(1.0 + exp(-2*x)) - 1.0 ;
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8007c14:	ec51 0b10 	vmov	r0, r1, d0
 8007c18:	f7f8 fd5a 	bl	80006d0 <__aeabi_dmul>
 8007c1c:	ec41 0b10 	vmov	d0, r0, r1
 8007c20:	f001 fa4e 	bl	80090c0 <exp>
 8007c24:	2200      	movs	r2, #0
 8007c26:	ec51 0b10 	vmov	r0, r1, d0
 8007c2a:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <sigmoid+0x40>)
 8007c2c:	f7f8 fb9e 	bl	800036c <__adddf3>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	2000      	movs	r0, #0
 8007c36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007c3a:	f7f8 fe73 	bl	8000924 <__aeabi_ddiv>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <sigmoid+0x40>)
 8007c42:	f7f8 fb91 	bl	8000368 <__aeabi_dsub>
}
 8007c46:	ec41 0b10 	vmov	d0, r0, r1
 8007c4a:	bd08      	pop	{r3, pc}
 8007c4c:	3ff00000 	.word	0x3ff00000

08007c50 <feedforward>:
  double offset = m + log(sum);
  for (size_t i = 0; i < input_len; i++) {
    input[i] = exp(input[i] - offset);
  }
}
void feedforward(int coef,double nnin[coef]){
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	ed2d 8b02 	vpush	{d8}
	int i,j,p;

	uint8_t ind = 0;
	double *tout;
	tout = (double *) malloc(sizeout*sizeof(double));
 8007c58:	2018      	movs	r0, #24
void feedforward(int coef,double nnin[coef]){
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	4688      	mov	r8, r1
	tout = (double *) malloc(sizeout*sizeof(double));
 8007c5e:	f7fa fcbb 	bl	80025d8 <malloc>
 8007c62:	4682      	mov	sl, r0

	double* sumIH;
	sumIH = (double *) malloc(sizehid*sizeof(double));
 8007c64:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8007c68:	f7fa fcb6 	bl	80025d8 <malloc>
 8007c6c:	4683      	mov	fp, r0

	double* sumHO;
	sumHO = (double *) malloc(sizeout*sizeof(double));
 8007c6e:	2018      	movs	r0, #24
 8007c70:	f7fa fcb2 	bl	80025d8 <malloc>
 8007c74:	ed9f 8b6e 	vldr	d8, [pc, #440]	; 8007e30 <feedforward+0x1e0>
 8007c78:	f508 7390 	add.w	r3, r8, #288	; 0x120
 8007c7c:	4f6e      	ldr	r7, [pc, #440]	; (8007e38 <feedforward+0x1e8>)
 8007c7e:	9003      	str	r0, [sp, #12]
 8007c80:	465e      	mov	r6, fp
 8007c82:	2400      	movs	r4, #0
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	4b6d      	ldr	r3, [pc, #436]	; (8007e3c <feedforward+0x1ec>)
 8007c88:	ed8d 8b00 	vstr	d8, [sp]
 8007c8c:	eb03 0904 	add.w	r9, r3, r4
 8007c90:	4645      	mov	r5, r8

	char serialt[8];
	for(i=0;i<sizehid;i++){
		sumIH[i] =0;
		for(j=0;j<sizein;j++){
			sumIH[i] += WeightIH[i][j]*nnin[j];
 8007c92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007c96:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007c9a:	f7f8 fd19 	bl	80006d0 <__aeabi_dmul>
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ca6:	f7f8 fb61 	bl	800036c <__adddf3>
		for(j=0;j<sizein;j++){
 8007caa:	9b04      	ldr	r3, [sp, #16]
 8007cac:	429d      	cmp	r5, r3
			sumIH[i] += WeightIH[i][j]*nnin[j];
 8007cae:	e9cd 0100 	strd	r0, r1, [sp]
		for(j=0;j<sizein;j++){
 8007cb2:	d1ee      	bne.n	8007c92 <feedforward+0x42>
		}
		sumIH[i] = sigmoid(sumIH[i] + biases1[i]);
 8007cb4:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8007cb8:	f7f8 fb58 	bl	800036c <__adddf3>
 8007cbc:	ec41 0b10 	vmov	d0, r0, r1
 8007cc0:	f7ff ffa4 	bl	8007c0c <sigmoid>
 8007cc4:	f504 7490 	add.w	r4, r4, #288	; 0x120
	for(i=0;i<sizehid;i++){
 8007cc8:	f246 5340 	movw	r3, #25920	; 0x6540
 8007ccc:	429c      	cmp	r4, r3
		sumIH[i] = sigmoid(sumIH[i] + biases1[i]);
 8007cce:	eca6 0b02 	vstmia	r6!, {d0}
	for(i=0;i<sizehid;i++){
 8007cd2:	d1d8      	bne.n	8007c86 <feedforward+0x36>
 8007cd4:	ed9f 8b56 	vldr	d8, [pc, #344]	; 8007e30 <feedforward+0x1e0>
 8007cd8:	f50b 7334 	add.w	r3, fp, #720	; 0x2d0
 8007cdc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ce0:	4f57      	ldr	r7, [pc, #348]	; (8007e40 <feedforward+0x1f0>)
 8007ce2:	f8cd a010 	str.w	sl, [sp, #16]
 8007ce6:	4656      	mov	r6, sl
 8007ce8:	2400      	movs	r4, #0
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	4b55      	ldr	r3, [pc, #340]	; (8007e44 <feedforward+0x1f4>)
 8007cee:	ed8d 8b00 	vstr	d8, [sp]
 8007cf2:	eb03 0904 	add.w	r9, r3, r4
 8007cf6:	465d      	mov	r5, fp

	// Hidden Layer -> Output Layer
	for(j=0;j<sizeout;j++){
		sumHO[j] = 0;
		for(i=0;i<sizehid;i++){
			sumHO[j]+= WeightHO[j][i]*sumIH[i];
 8007cf8:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007cfc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007d00:	f7f8 fce6 	bl	80006d0 <__aeabi_dmul>
 8007d04:	460b      	mov	r3, r1
 8007d06:	4602      	mov	r2, r0
 8007d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d0c:	f7f8 fb2e 	bl	800036c <__adddf3>
		for(i=0;i<sizehid;i++){
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	42ab      	cmp	r3, r5
			sumHO[j]+= WeightHO[j][i]*sumIH[i];
 8007d14:	e9cd 0100 	strd	r0, r1, [sp]
		for(i=0;i<sizehid;i++){
 8007d18:	d1ee      	bne.n	8007cf8 <feedforward+0xa8>
 8007d1a:	e8e8 0102 	strd	r0, r1, [r8], #8

		}//sprintf(serialt,"%.03f\r\n",sumHO[j]);serialPrint(serialt);
		tout[j] = sumHO[j] + biases2[j];
 8007d1e:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8007d22:	f7f8 fb23 	bl	800036c <__adddf3>
 8007d26:	f504 7434 	add.w	r4, r4, #720	; 0x2d0
	for(j=0;j<sizeout;j++){
 8007d2a:	f5b4 6f07 	cmp.w	r4, #2160	; 0x870
		tout[j] = sumHO[j] + biases2[j];
 8007d2e:	e8e6 0102 	strd	r0, r1, [r6], #8
	for(j=0;j<sizeout;j++){
 8007d32:	d1db      	bne.n	8007cec <feedforward+0x9c>
 8007d34:	4d44      	ldr	r5, [pc, #272]	; (8007e48 <feedforward+0x1f8>)
 8007d36:	f10a 0918 	add.w	r9, sl, #24
 8007d3a:	46d0      	mov	r8, sl
 8007d3c:	2400      	movs	r4, #0
    if (input[i] > m) {
 8007d3e:	e8f8 6702 	ldrd	r6, r7, [r8], #8
 8007d42:	4622      	mov	r2, r4
 8007d44:	462b      	mov	r3, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	4639      	mov	r1, r7
 8007d4a:	f7f8 ff51 	bl	8000bf0 <__aeabi_dcmpgt>
 8007d4e:	b108      	cbz	r0, 8007d54 <feedforward+0x104>
      m = input[i];
 8007d50:	4634      	mov	r4, r6
 8007d52:	463d      	mov	r5, r7
  for (size_t i = 0; i < input_len; i++) {
 8007d54:	45c1      	cmp	r9, r8
 8007d56:	d1f2      	bne.n	8007d3e <feedforward+0xee>
 8007d58:	46d1      	mov	r9, sl
 8007d5a:	2600      	movs	r6, #0
 8007d5c:	2700      	movs	r7, #0
    sum += exp(input[i] - m);
 8007d5e:	4622      	mov	r2, r4
 8007d60:	462b      	mov	r3, r5
 8007d62:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007d66:	f7f8 faff 	bl	8000368 <__aeabi_dsub>
 8007d6a:	ec41 0b10 	vmov	d0, r0, r1
 8007d6e:	f001 f9a7 	bl	80090c0 <exp>
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	ec53 2b10 	vmov	r2, r3, d0
 8007d7a:	f7f8 faf7 	bl	800036c <__adddf3>
  for (size_t i = 0; i < input_len; i++) {
 8007d7e:	45c8      	cmp	r8, r9
    sum += exp(input[i] - m);
 8007d80:	4606      	mov	r6, r0
 8007d82:	460f      	mov	r7, r1
  for (size_t i = 0; i < input_len; i++) {
 8007d84:	d1eb      	bne.n	8007d5e <feedforward+0x10e>
  double offset = m + log(sum);
 8007d86:	ec47 6b10 	vmov	d0, r6, r7
 8007d8a:	f001 fa15 	bl	80091b8 <log>
 8007d8e:	4622      	mov	r2, r4
 8007d90:	462b      	mov	r3, r5
 8007d92:	ec51 0b10 	vmov	r0, r1, d0
 8007d96:	f7f8 fae9 	bl	800036c <__adddf3>
 8007d9a:	4656      	mov	r6, sl
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	460d      	mov	r5, r1
    input[i] = exp(input[i] - offset);
 8007da0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007da4:	4622      	mov	r2, r4
 8007da6:	462b      	mov	r3, r5
 8007da8:	f7f8 fade 	bl	8000368 <__aeabi_dsub>
 8007dac:	ec41 0b10 	vmov	d0, r0, r1
 8007db0:	f001 f986 	bl	80090c0 <exp>
 8007db4:	eca6 0b02 	vstmia	r6!, {d0}
  for (size_t i = 0; i < input_len; i++) {
 8007db8:	45b1      	cmp	r9, r6
 8007dba:	d1f1      	bne.n	8007da0 <feedforward+0x150>
	}//serialPrint("\r\n");
	softmax(3,tout);
	for (i=0;i<3;i++){
	//	sprintf(serialt,"%.03f\r\n",tout[i]);serialPrint(serialt);
	}
	float32_t max = tout[0];
 8007dbc:	e9da 0100 	ldrd	r0, r1, [sl]
 8007dc0:	f7f8 ff5e 	bl	8000c80 <__aeabi_d2f>
	uint8_t ind = 0;
 8007dc4:	2600      	movs	r6, #0
	float32_t max = tout[0];
 8007dc6:	4680      	mov	r8, r0
	for (p=0;p<sizeout;p++){
 8007dc8:	4637      	mov	r7, r6
		if (tout[p]>max){
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	9304      	str	r3, [sp, #16]
 8007dd4:	f7f8 fc28 	bl	8000628 <__aeabi_f2d>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7f8 ff06 	bl	8000bf0 <__aeabi_dcmpgt>
 8007de4:	b128      	cbz	r0, 8007df2 <feedforward+0x1a2>
			max = tout[p];
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 ff49 	bl	8000c80 <__aeabi_d2f>
			ind = p;
 8007dee:	b2fe      	uxtb	r6, r7
			max = tout[p];
 8007df0:	4680      	mov	r8, r0
	for (p=0;p<sizeout;p++){
 8007df2:	3701      	adds	r7, #1
 8007df4:	2f03      	cmp	r7, #3
 8007df6:	d1e8      	bne.n	8007dca <feedforward+0x17a>
			//sprintf(serialt,"%d\r\n",max);serialPrint(serialt);
		}
	}
	if (ind == 0){
 8007df8:	b98e      	cbnz	r6, 8007e1e <feedforward+0x1ce>
		user1++;
 8007dfa:	4a14      	ldr	r2, [pc, #80]	; (8007e4c <feedforward+0x1fc>)
	}
	if (ind == 1){
		user2++;
	}
	if (ind == 2){
		user3++;
 8007dfc:	6813      	ldr	r3, [r2, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	6013      	str	r3, [r2, #0]
	}
	free(sumIH);free(sumHO);free(tout);
 8007e02:	4658      	mov	r0, fp
 8007e04:	f7fa fbf0 	bl	80025e8 <free>
 8007e08:	9803      	ldr	r0, [sp, #12]
 8007e0a:	f7fa fbed 	bl	80025e8 <free>
 8007e0e:	4650      	mov	r0, sl
}
 8007e10:	b007      	add	sp, #28
 8007e12:	ecbd 8b02 	vpop	{d8}
 8007e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	free(sumIH);free(sumHO);free(tout);
 8007e1a:	f7fa bbe5 	b.w	80025e8 <free>
	if (ind == 1){
 8007e1e:	2e01      	cmp	r6, #1
 8007e20:	d101      	bne.n	8007e26 <feedforward+0x1d6>
		user2++;
 8007e22:	4a0b      	ldr	r2, [pc, #44]	; (8007e50 <feedforward+0x200>)
 8007e24:	e7ea      	b.n	8007dfc <feedforward+0x1ac>
	if (ind == 2){
 8007e26:	2e02      	cmp	r6, #2
 8007e28:	d1eb      	bne.n	8007e02 <feedforward+0x1b2>
		user3++;
 8007e2a:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <feedforward+0x204>)
 8007e2c:	e7e6      	b.n	8007dfc <feedforward+0x1ac>
 8007e2e:	bf00      	nop
	...
 8007e38:	20006f88 	.word	0x20006f88
 8007e3c:	20000a48 	.word	0x20000a48
 8007e40:	20007258 	.word	0x20007258
 8007e44:	200001d8 	.word	0x200001d8
 8007e48:	fff00000 	.word	0xfff00000
 8007e4c:	20008600 	.word	0x20008600
 8007e50:	20008604 	.word	0x20008604
 8007e54:	20008608 	.word	0x20008608

08007e58 <mfcc>:
void mfcc (float32_t fft_out[] , int NoOfFilters){
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	ed2d 8b02 	vpush	{d8}
 8007e60:	ed9f 8b65 	vldr	d8, [pc, #404]	; 8007ff8 <mfcc+0x1a0>
 8007e64:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8007e68:	4607      	mov	r7, r0
 8007e6a:	ae64      	add	r6, sp, #400	; 0x190
 8007e6c:	2400      	movs	r4, #0
 8007e6e:	f500 7900 	add.w	r9, r0, #512	; 0x200
 8007e72:	4b63      	ldr	r3, [pc, #396]	; (8008000 <mfcc+0x1a8>)
 8007e74:	ec5b ab18 	vmov	sl, fp, d8
 8007e78:	eb03 0804 	add.w	r8, r3, r4
 8007e7c:	463d      	mov	r5, r7
			preMFCC[k] += bank[k][m]*fft_out[m];
 8007e7e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007e82:	f855 0b04 	ldr.w	r0, [r5], #4
 8007e86:	e9cd 2300 	strd	r2, r3, [sp]
 8007e8a:	f7f8 fbcd 	bl	8000628 <__aeabi_f2d>
 8007e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e92:	f7f8 fc1d 	bl	80006d0 <__aeabi_dmul>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	f7f8 fa65 	bl	800036c <__adddf3>
		for (m=0;m<128;m++){
 8007ea2:	454d      	cmp	r5, r9
			preMFCC[k] += bank[k][m]*fft_out[m];
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	468b      	mov	fp, r1
		for (m=0;m<128;m++){
 8007ea8:	d1e9      	bne.n	8007e7e <mfcc+0x26>
		}preMFCC[k]=(log10(preMFCC[k]));
 8007eaa:	ec4b ab10 	vmov	d0, sl, fp
 8007eae:	f001 fa03 	bl	80092b8 <log10>
 8007eb2:	f504 6481 	add.w	r4, r4, #1032	; 0x408
	for (k=0;k<24;k++){
 8007eb6:	f246 03c0 	movw	r3, #24768	; 0x60c0
 8007eba:	429c      	cmp	r4, r3
		}preMFCC[k]=(log10(preMFCC[k]));
 8007ebc:	eca6 0b02 	vstmia	r6!, {d0}
	for (k=0;k<24;k++){
 8007ec0:	d1d7      	bne.n	8007e72 <mfcc+0x1a>
 8007ec2:	ac34      	add	r4, sp, #208	; 0xd0
 8007ec4:	4626      	mov	r6, r4
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	f50d 7b14 	add.w	fp, sp, #592	; 0x250
 8007ecc:	4b4d      	ldr	r3, [pc, #308]	; (8008004 <mfcc+0x1ac>)
 8007ece:	e9d6 8900 	ldrd	r8, r9, [r6]
 8007ed2:	27c0      	movs	r7, #192	; 0xc0
 8007ed4:	fb07 3705 	mla	r7, r7, r5, r3
void mfcc (float32_t fft_out[] , int NoOfFilters){
 8007ed8:	f50d 7ac8 	add.w	sl, sp, #400	; 0x190
			MFCC[i] += dctcoef[i][m]*preMFCC[m];
 8007edc:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8007ee0:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007ee4:	f7f8 fbf4 	bl	80006d0 <__aeabi_dmul>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4640      	mov	r0, r8
 8007eee:	4649      	mov	r1, r9
 8007ef0:	f7f8 fa3c 	bl	800036c <__adddf3>
		for (m=0;m<24;m++){
 8007ef4:	45d3      	cmp	fp, sl
			MFCC[i] += dctcoef[i][m]*preMFCC[m];
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	4689      	mov	r9, r1
		for (m=0;m<24;m++){
 8007efa:	d1ef      	bne.n	8007edc <mfcc+0x84>
		if (i<13 && i!=0){
 8007efc:	2d0c      	cmp	r5, #12
 8007efe:	e9c6 8900 	strd	r8, r9, [r6]
 8007f02:	dc06      	bgt.n	8007f12 <mfcc+0xba>
 8007f04:	b12d      	cbz	r5, 8007f12 <mfcc+0xba>
			f_write(&fp1, MFCC+i,sizeof(MFCC[0]),&stored);	//Used only for Training Recording
 8007f06:	4b40      	ldr	r3, [pc, #256]	; (8008008 <mfcc+0x1b0>)
 8007f08:	4840      	ldr	r0, [pc, #256]	; (800800c <mfcc+0x1b4>)
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	f7fe fc43 	bl	8006798 <f_write>
	for( i=0; i<24; i++ ){
 8007f12:	3501      	adds	r5, #1
 8007f14:	2d18      	cmp	r5, #24
 8007f16:	f106 0608 	add.w	r6, r6, #8
 8007f1a:	d1d7      	bne.n	8007ecc <mfcc+0x74>
 8007f1c:	ad04      	add	r5, sp, #16
			f_write(&fp1, dMFCC+i-1,sizeof(dMFCC[0]),&stored);	//Used only for Training Recording
 8007f1e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008008 <mfcc+0x1b0>
 8007f22:	4f3a      	ldr	r7, [pc, #232]	; (800800c <mfcc+0x1b4>)
 8007f24:	ae1c      	add	r6, sp, #112	; 0x70
 8007f26:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8007f2a:	46a9      	mov	r9, r5
		dMFCC[i-1] = (MFCC[i+1] - MFCC[i-1])/2;
 8007f2c:	ed94 7b04 	vldr	d7, [r4, #16]
 8007f30:	ed8d 7b00 	vstr	d7, [sp]
 8007f34:	ed94 7b00 	vldr	d7, [r4]
 8007f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f3c:	ec53 2b17 	vmov	r2, r3, d7
 8007f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f44:	f7f8 fa10 	bl	8000368 <__aeabi_dsub>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4b31      	ldr	r3, [pc, #196]	; (8008010 <mfcc+0x1b8>)
 8007f4c:	f7f8 fbc0 	bl	80006d0 <__aeabi_dmul>
		ddMFCC[i-1] = (MFCC[i-1] - 2*MFCC[i] +MFCC[i+1]);
 8007f50:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
		dMFCC[i-1] = (MFCC[i+1] - MFCC[i-1])/2;
 8007f54:	e9c5 0100 	strd	r0, r1, [r5]
		ddMFCC[i-1] = (MFCC[i-1] - 2*MFCC[i] +MFCC[i+1]);
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f7f8 fa06 	bl	800036c <__adddf3>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f68:	f7f8 f9fe 	bl	8000368 <__aeabi_dsub>
 8007f6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f70:	f7f8 f9fc 	bl	800036c <__adddf3>
			f_write(&fp1, dMFCC+i-1,sizeof(dMFCC[0]),&stored);	//Used only for Training Recording
 8007f74:	4643      	mov	r3, r8
		ddMFCC[i-1] = (MFCC[i-1] - 2*MFCC[i] +MFCC[i+1]);
 8007f76:	e9c6 0100 	strd	r0, r1, [r6]
			f_write(&fp1, dMFCC+i-1,sizeof(dMFCC[0]),&stored);	//Used only for Training Recording
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f7fe fc0a 	bl	8006798 <f_write>
			f_write(&fp1, ddMFCC+i-1,sizeof(ddMFCC[0]),&stored);	//Used only for Training Recording
 8007f84:	4631      	mov	r1, r6
 8007f86:	4643      	mov	r3, r8
 8007f88:	2208      	movs	r2, #8
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f7fe fc04 	bl	8006798 <f_write>
	for (i=1;i<=12;i++){
 8007f90:	45a2      	cmp	sl, r4
 8007f92:	f105 0508 	add.w	r5, r5, #8
 8007f96:	f106 0608 	add.w	r6, r6, #8
 8007f9a:	d1c7      	bne.n	8007f2c <mfcc+0xd4>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	a936      	add	r1, sp, #216	; 0xd8
 8007fa0:	465b      	mov	r3, fp
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	4610      	mov	r0, r2
		if (i < 12){
 8007fa6:	280b      	cmp	r0, #11
 8007fa8:	dc13      	bgt.n	8007fd2 <mfcc+0x17a>
			nnin[i] = MFCC[i+1];
 8007faa:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007fae:	e9c3 6700 	strd	r6, r7, [r3]
	for(i=0;i<sizein;i++){
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	2824      	cmp	r0, #36	; 0x24
 8007fb6:	f101 0108 	add.w	r1, r1, #8
 8007fba:	f103 0308 	add.w	r3, r3, #8
 8007fbe:	d1f2      	bne.n	8007fa6 <mfcc+0x14e>
	feedforward(in,nnin);
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	f7ff fe45 	bl	8007c50 <feedforward>
}
 8007fc6:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
 8007fca:	ecbd 8b02 	vpop	{d8}
 8007fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}else if (i%2 == 0){
 8007fd2:	07c5      	lsls	r5, r0, #31
 8007fd4:	d407      	bmi.n	8007fe6 <mfcc+0x18e>
			nnin[i] = dMFCC[k];
 8007fd6:	eb09 05c4 	add.w	r5, r9, r4, lsl #3
 8007fda:	e9d5 6700 	ldrd	r6, r7, [r5]
			k++;
 8007fde:	3401      	adds	r4, #1
			nnin[i] = dMFCC[k];
 8007fe0:	e9c3 6700 	strd	r6, r7, [r3]
 8007fe4:	e7e5      	b.n	8007fb2 <mfcc+0x15a>
			nnin[i] = ddMFCC[m];
 8007fe6:	ad1c      	add	r5, sp, #112	; 0x70
 8007fe8:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8007fec:	e9d5 6700 	ldrd	r6, r7, [r5]
			m++;
 8007ff0:	3201      	adds	r2, #1
			nnin[i] = ddMFCC[m];
 8007ff2:	e9c3 6700 	strd	r6, r7, [r3]
 8007ff6:	e7dc      	b.n	8007fb2 <mfcc+0x15a>
	...
 8008000:	0800f400 	.word	0x0800f400
 8008004:	20007278 	.word	0x20007278
 8008008:	20008bb0 	.word	0x20008bb0
 800800c:	20008d8c 	.word	0x20008d8c
 8008010:	3fe00000 	.word	0x3fe00000
 8008014:	00000000 	.word	0x00000000

08008018 <main>:
{
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	ed2d 8b04 	vpush	{d8-d9}
 8008020:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 8008024:	af02      	add	r7, sp, #8
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8008026:	2400      	movs	r4, #0
 8008028:	4d9b      	ldr	r5, [pc, #620]	; (8008298 <main+0x280>)
	HAL_Init();
 800802a:	f7fa feed 	bl	8002e08 <HAL_Init>
	SystemClock_Config();
 800802e:	f7ff fd27 	bl	8007a80 <SystemClock_Config>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8008032:	60bc      	str	r4, [r7, #8]
 8008034:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8008036:	4899      	ldr	r0, [pc, #612]	; (800829c <main+0x284>)
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8008038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803c:	632b      	str	r3, [r5, #48]	; 0x30
 800803e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8008048:	60fc      	str	r4, [r7, #12]
 800804a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800804c:	f043 0304 	orr.w	r3, r3, #4
 8008050:	632b      	str	r3, [r5, #48]	; 0x30
 8008052:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800805c:	613c      	str	r4, [r7, #16]
 800805e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	632b      	str	r3, [r5, #48]	; 0x30
 8008066:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8008070:	617c      	str	r4, [r7, #20]
 8008072:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008074:	f043 0308 	orr.w	r3, r3, #8
 8008078:	632b      	str	r3, [r5, #48]	; 0x30
 800807a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8008084:	61bc      	str	r4, [r7, #24]
 8008086:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808c:	632b      	str	r3, [r5, #48]	; 0x30
 800808e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8008096:	4622      	mov	r2, r4
 8008098:	2102      	movs	r1, #2
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800809a:	69bb      	ldr	r3, [r7, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800809c:	f7fb fbc6 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80080a0:	4622      	mov	r2, r4
 80080a2:	2108      	movs	r1, #8
 80080a4:	487e      	ldr	r0, [pc, #504]	; (80082a0 <main+0x288>)
 80080a6:	f7fb fbc1 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80080aa:	2201      	movs	r2, #1
 80080ac:	2110      	movs	r1, #16
 80080ae:	487c      	ldr	r0, [pc, #496]	; (80082a0 <main+0x288>)
 80080b0:	f7fb fbbc 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80080b4:	4622      	mov	r2, r4
 80080b6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80080ba:	487a      	ldr	r0, [pc, #488]	; (80082a4 <main+0x28c>)
 80080bc:	f7fb fbb6 	bl	800382c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080c0:	2601      	movs	r6, #1
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80080c6:	4875      	ldr	r0, [pc, #468]	; (800829c <main+0x284>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080c8:	62fe      	str	r6, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80080ca:	f04f 0802 	mov.w	r8, #2
 80080ce:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d2:	633c      	str	r4, [r7, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080d4:	637c      	str	r4, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080d6:	f7fb fab7 	bl	8003648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3|SPI_CS_Pin;
 80080da:	2318      	movs	r3, #24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80080e0:	486f      	ldr	r0, [pc, #444]	; (80082a0 <main+0x288>)
	GPIO_InitStruct.Pin = GPIO_PIN_3|SPI_CS_Pin;
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080e4:	62fe      	str	r6, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e6:	633c      	str	r4, [r7, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080e8:	637c      	str	r4, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080ea:	f7fb faad 	bl	8003648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80080ee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80080f6:	486b      	ldr	r0, [pc, #428]	; (80082a4 <main+0x28c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80080f8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080fa:	62fe      	str	r6, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	633c      	str	r4, [r7, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080fe:	637c      	str	r4, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008100:	f7fb faa2 	bl	8003648 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008104:	2360      	movs	r3, #96	; 0x60
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008106:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800810a:	4867      	ldr	r0, [pc, #412]	; (80082a8 <main+0x290>)
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800810e:	62fc      	str	r4, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008110:	633c      	str	r4, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008112:	f7fb fa99 	bl	8003648 <HAL_GPIO_Init>
	__HAL_RCC_DMA2_CLK_ENABLE();
 8008116:	607c      	str	r4, [r7, #4]
 8008118:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800811a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800811e:	632b      	str	r3, [r5, #48]	; 0x30
 8008120:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008126:	4622      	mov	r2, r4
 8008128:	4621      	mov	r1, r4
	__HAL_RCC_DMA2_CLK_ENABLE();
 800812a:	607b      	str	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800812c:	2038      	movs	r0, #56	; 0x38
	__HAL_RCC_DMA2_CLK_ENABLE();
 800812e:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008130:	f7fb f8c2 	bl	80032b8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008134:	2038      	movs	r0, #56	; 0x38
 8008136:	f7fb f8f3 	bl	8003320 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800813a:	4622      	mov	r2, r4
 800813c:	4621      	mov	r1, r4
 800813e:	203b      	movs	r0, #59	; 0x3b
 8008140:	f7fb f8ba 	bl	80032b8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8008144:	203b      	movs	r0, #59	; 0x3b
 8008146:	f7fb f8eb 	bl	8003320 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800814a:	4622      	mov	r2, r4
 800814c:	4621      	mov	r1, r4
 800814e:	2044      	movs	r0, #68	; 0x44
 8008150:	f7fb f8b2 	bl	80032b8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8008154:	2044      	movs	r0, #68	; 0x44
 8008156:	f7fb f8e3 	bl	8003320 <HAL_NVIC_EnableIRQ>
	hspi1.Instance = SPI1;
 800815a:	4854      	ldr	r0, [pc, #336]	; (80082ac <main+0x294>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800815c:	4b54      	ldr	r3, [pc, #336]	; (80082b0 <main+0x298>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800815e:	6084      	str	r4, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8008160:	f44f 7a82 	mov.w	sl, #260	; 0x104
 8008164:	e880 0408 	stmia.w	r0, {r3, sl}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8008168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800816c:	6183      	str	r3, [r0, #24]
	hspi1.Init.CRCPolynomial = 10;
 800816e:	230a      	movs	r3, #10
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008170:	60c4      	str	r4, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008172:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008174:	6144      	str	r4, [r0, #20]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008176:	61c4      	str	r4, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008178:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800817a:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800817c:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800817e:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008180:	f7fc fbb2 	bl	80048e8 <HAL_SPI_Init>
 8008184:	b100      	cbz	r0, 8008188 <main+0x170>
 8008186:	e7fe      	b.n	8008186 <main+0x16e>
	huart1.Instance = USART1;
 8008188:	4b4a      	ldr	r3, [pc, #296]	; (80082b4 <main+0x29c>)
	huart1.Init.BaudRate = 115200;
 800818a:	4a4b      	ldr	r2, [pc, #300]	; (80082b8 <main+0x2a0>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800818c:	6098      	str	r0, [r3, #8]
	huart1.Init.BaudRate = 115200;
 800818e:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
 8008192:	e883 0204 	stmia.w	r3, {r2, r9}
	huart1.Init.StopBits = UART_STOPBITS_1;
 8008196:	60d8      	str	r0, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8008198:	6118      	str	r0, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800819a:	220c      	movs	r2, #12
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800819c:	6198      	str	r0, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800819e:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80081a0:	4618      	mov	r0, r3
	huart1.Init.Mode = UART_MODE_TX_RX;
 80081a2:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80081a4:	f7fc fefe 	bl	8004fa4 <HAL_UART_Init>
 80081a8:	b100      	cbz	r0, 80081ac <main+0x194>
 80081aa:	e7fe      	b.n	80081aa <main+0x192>
	htim1.Instance = TIM1;
 80081ac:	4c43      	ldr	r4, [pc, #268]	; (80082bc <main+0x2a4>)
 80081ae:	4b44      	ldr	r3, [pc, #272]	; (80082c0 <main+0x2a8>)
	htim1.Init.Prescaler = 0;
 80081b0:	6060      	str	r0, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081b2:	60a0      	str	r0, [r4, #8]
	htim1.Init.Period = 0;
 80081b4:	60e0      	str	r0, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081b6:	6120      	str	r0, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 80081b8:	6160      	str	r0, [r4, #20]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80081ba:	4620      	mov	r0, r4
	htim1.Instance = TIM1;
 80081bc:	6023      	str	r3, [r4, #0]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80081be:	f7fc fd71 	bl	8004ca4 <HAL_TIM_Base_Init>
 80081c2:	b100      	cbz	r0, 80081c6 <main+0x1ae>
 80081c4:	e7fe      	b.n	80081c4 <main+0x1ac>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80081c6:	f04f 0907 	mov.w	r9, #7
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80081ca:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 80081cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80081d0:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80081d2:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
	if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 80081d6:	f7fc fc39 	bl	8004a4c <HAL_TIM_SlaveConfigSynchronization>
 80081da:	b100      	cbz	r0, 80081de <main+0x1c6>
 80081dc:	e7fe      	b.n	80081dc <main+0x1c4>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081de:	61f8      	str	r0, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081e0:	6238      	str	r0, [r7, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081e2:	f107 011c 	add.w	r1, r7, #28
 80081e6:	4620      	mov	r0, r4
 80081e8:	f7fc fd76 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80081ec:	b100      	cbz	r0, 80081f0 <main+0x1d8>
 80081ee:	e7fe      	b.n	80081ee <main+0x1d6>
	htim2.Instance = TIM2;
 80081f0:	4c34      	ldr	r4, [pc, #208]	; (80082c4 <main+0x2ac>)
	htim2.Init.Prescaler = 42;
 80081f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081f6:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80081fa:	e884 1008 	stmia.w	r4, {r3, ip}
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081fe:	60a0      	str	r0, [r4, #8]
	htim2.Init.Period = 125;
 8008200:	237d      	movs	r3, #125	; 0x7d
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008202:	6120      	str	r0, [r4, #16]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008204:	4620      	mov	r0, r4
	htim2.Init.Period = 125;
 8008206:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008208:	f7fc fd4c 	bl	8004ca4 <HAL_TIM_Base_Init>
 800820c:	b100      	cbz	r0, 8008210 <main+0x1f8>
 800820e:	e7fe      	b.n	800820e <main+0x1f6>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8008210:	2306      	movs	r3, #6
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8008212:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8008214:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008218:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 800821c:	f7fc fc16 	bl	8004a4c <HAL_TIM_SlaveConfigSynchronization>
 8008220:	b100      	cbz	r0, 8008224 <main+0x20c>
 8008222:	e7fe      	b.n	8008222 <main+0x20a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008224:	61f8      	str	r0, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008226:	6238      	str	r0, [r7, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008228:	f107 011c 	add.w	r1, r7, #28
 800822c:	4620      	mov	r0, r4
 800822e:	f7fc fd53 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8008232:	4605      	mov	r5, r0
 8008234:	b100      	cbz	r0, 8008238 <main+0x220>
 8008236:	e7fe      	b.n	8008236 <main+0x21e>
	hsd.Instance = SDIO;
 8008238:	4b23      	ldr	r3, [pc, #140]	; (80082c8 <main+0x2b0>)
 800823a:	4a24      	ldr	r2, [pc, #144]	; (80082cc <main+0x2b4>)
	hadc1.Instance = ADC1;
 800823c:	4c24      	ldr	r4, [pc, #144]	; (80082d0 <main+0x2b8>)
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800823e:	6098      	str	r0, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008240:	60d8      	str	r0, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8008242:	6118      	str	r0, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008244:	6158      	str	r0, [r3, #20]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8008246:	e883 0024 	stmia.w	r3, {r2, r5}
	hsd.Init.ClockDiv = 2;
 800824a:	f8c3 8018 	str.w	r8, [r3, #24]
	MX_FATFS_Init();
 800824e:	f7fe fcc1 	bl	8006bd4 <MX_FATFS_Init>
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8008252:	4820      	ldr	r0, [pc, #128]	; (80082d4 <main+0x2bc>)
	hadc1.Init.ScanConvMode = ENABLE;
 8008254:	6126      	str	r6, [r4, #16]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8008256:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800825a:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 800825e:	e884 4009 	stmia.w	r4, {r0, r3, lr}
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008262:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <main+0x2c0>)
	hadc1.Init.ContinuousConvMode = ENABLE;
 8008264:	61a6      	str	r6, [r4, #24]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008266:	4620      	mov	r0, r4
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008268:	6225      	str	r5, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800826a:	62e5      	str	r5, [r4, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800826c:	62a3      	str	r3, [r4, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800826e:	60e5      	str	r5, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 8008270:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8008272:	6326      	str	r6, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008274:	6166      	str	r6, [r4, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008276:	f7fa fdff 	bl	8002e78 <HAL_ADC_Init>
 800827a:	b100      	cbz	r0, 800827e <main+0x266>
 800827c:	e7fe      	b.n	800827c <main+0x264>
	sConfig.Channel = ADC_CHANNEL_13;
 800827e:	230d      	movs	r3, #13
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008280:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008284:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_13;
 8008286:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.Rank = 1;
 8008288:	62fe      	str	r6, [r7, #44]	; 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800828a:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800828e:	f7fa ff69 	bl	8003164 <HAL_ADC_ConfigChannel>
 8008292:	b318      	cbz	r0, 80082dc <main+0x2c4>
 8008294:	e7fe      	b.n	8008294 <main+0x27c>
 8008296:	bf00      	nop
 8008298:	40023800 	.word	0x40023800
 800829c:	40020800 	.word	0x40020800
 80082a0:	40020000 	.word	0x40020000
 80082a4:	40020c00 	.word	0x40020c00
 80082a8:	40021800 	.word	0x40021800
 80082ac:	20008c38 	.word	0x20008c38
 80082b0:	40013000 	.word	0x40013000
 80082b4:	20008b34 	.word	0x20008b34
 80082b8:	40011000 	.word	0x40011000
 80082bc:	20008b74 	.word	0x20008b74
 80082c0:	40010000 	.word	0x40010000
 80082c4:	20008c90 	.word	0x20008c90
 80082c8:	20008bb4 	.word	0x20008bb4
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	20008aec 	.word	0x20008aec
 80082d4:	40012000 	.word	0x40012000
 80082d8:	0f000001 	.word	0x0f000001
	lcd_chars = 16;
 80082dc:	4bc2      	ldr	r3, [pc, #776]	; (80085e8 <main+0x5d0>)
		if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) != 0 || HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) != 0){
 80082de:	f8df b318 	ldr.w	fp, [pc, #792]	; 80085f8 <main+0x5e0>
	lcd_chars = 16;
 80082e2:	2210      	movs	r2, #16
 80082e4:	701a      	strb	r2, [r3, #0]
	lcd_lines = 2;
 80082e6:	4bc1      	ldr	r3, [pc, #772]	; (80085ec <main+0x5d4>)
 80082e8:	2402      	movs	r4, #2
 80082ea:	701c      	strb	r4, [r3, #0]
	uint8_t addresses[] = {0x40};
 80082ec:	2340      	movs	r3, #64	; 0x40
 80082ee:	703b      	strb	r3, [r7, #0]
	lcd_line_addresses = addresses;
 80082f0:	4bbf      	ldr	r3, [pc, #764]	; (80085f0 <main+0x5d8>)
 80082f2:	601f      	str	r7, [r3, #0]
	lcd_reset();
 80082f4:	f7ff fab6 	bl	8007864 <lcd_reset>
	lcd_display_settings(1, 1, 0);
 80082f8:	2101      	movs	r1, #1
 80082fa:	4608      	mov	r0, r1
 80082fc:	2200      	movs	r2, #0
 80082fe:	f7ff fb61 	bl	80079c4 <lcd_display_settings>
	delay(1000);
 8008302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008306:	f7fa fda7 	bl	8002e58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800830a:	2200      	movs	r2, #0
 800830c:	4621      	mov	r1, r4
 800830e:	48b9      	ldr	r0, [pc, #740]	; (80085f4 <main+0x5dc>)
 8008310:	f7fb fa8c 	bl	800382c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_3,GPIO_PIN_RESET);
 8008314:	2200      	movs	r2, #0
 8008316:	2108      	movs	r1, #8
 8008318:	48b7      	ldr	r0, [pc, #732]	; (80085f8 <main+0x5e0>)
 800831a:	f7fb fa87 	bl	800382c <HAL_GPIO_WritePin>
					double sum =0;
 800831e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80085d8 <main+0x5c0>
	lcd_clear();
 8008322:	f7ff fb3f 	bl	80079a4 <lcd_clear>
	lcd_reset();
 8008326:	f7ff fa9d 	bl	8007864 <lcd_reset>
		if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) != 0 || HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) != 0){
 800832a:	2120      	movs	r1, #32
 800832c:	4658      	mov	r0, fp
 800832e:	f7fb fa77 	bl	8003820 <HAL_GPIO_ReadPin>
 8008332:	2800      	cmp	r0, #0
 8008334:	d060      	beq.n	80083f8 <main+0x3e0>
			lcd_print("Welcome to C&S");
 8008336:	48b1      	ldr	r0, [pc, #708]	; (80085fc <main+0x5e4>)
			doneRec = 0;
 8008338:	4cb1      	ldr	r4, [pc, #708]	; (8008600 <main+0x5e8>)
			aTxBuffer1 = (uint8_t *) malloc(BUFFER_SIZE * sizeof(uint8_t));
 800833a:	f8df a33c 	ldr.w	sl, [pc, #828]	; 8008678 <main+0x660>
			lcd_print("Welcome to C&S");
 800833e:	f7ff fb51 	bl	80079e4 <lcd_print>
			delay(2000);
 8008342:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008346:	f7fa fd87 	bl	8002e58 <HAL_Delay>
			lcd_clear();
 800834a:	f7ff fb2b 	bl	80079a4 <lcd_clear>
			lcd_reset();
 800834e:	f7ff fa89 	bl	8007864 <lcd_reset>
			lcd_print("LeftBtn:Record\n");
 8008352:	48ac      	ldr	r0, [pc, #688]	; (8008604 <main+0x5ec>)
 8008354:	f7ff fb46 	bl	80079e4 <lcd_print>
			lcd_print("RightBtn:Back");
 8008358:	48ab      	ldr	r0, [pc, #684]	; (8008608 <main+0x5f0>)
 800835a:	f7ff fb43 	bl	80079e4 <lcd_print>
			doneRec = 0;
 800835e:	2300      	movs	r3, #0
			aTxBuffer1 = (uint8_t *) malloc(BUFFER_SIZE * sizeof(uint8_t));
 8008360:	f64a 70c8 	movw	r0, #45000	; 0xafc8
			doneRec = 0;
 8008364:	7023      	strb	r3, [r4, #0]
			aTxBuffer1 = (uint8_t *) malloc(BUFFER_SIZE * sizeof(uint8_t));
 8008366:	f7fa f937 	bl	80025d8 <malloc>
 800836a:	f8ca 0000 	str.w	r0, [sl]
			fbuffer = (float32_t *)malloc(BUFFER_SIZE/2 * sizeof(float32_t));
 800836e:	48a7      	ldr	r0, [pc, #668]	; (800860c <main+0x5f4>)
 8008370:	f7fa f932 	bl	80025d8 <malloc>
 8008374:	4ba6      	ldr	r3, [pc, #664]	; (8008610 <main+0x5f8>)
 8008376:	4626      	mov	r6, r4
 8008378:	6018      	str	r0, [r3, #0]
			while(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) != 0 || HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) != 0){
 800837a:	2120      	movs	r1, #32
 800837c:	4658      	mov	r0, fp
 800837e:	f7fb fa4f 	bl	8003820 <HAL_GPIO_ReadPin>
 8008382:	b928      	cbnz	r0, 8008390 <main+0x378>
 8008384:	2140      	movs	r1, #64	; 0x40
 8008386:	4658      	mov	r0, fp
 8008388:	f7fb fa4a 	bl	8003820 <HAL_GPIO_ReadPin>
 800838c:	2800      	cmp	r0, #0
 800838e:	d0cc      	beq.n	800832a <main+0x312>
				if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) != 1){
 8008390:	2120      	movs	r1, #32
 8008392:	4658      	mov	r0, fp
 8008394:	f7fb fa44 	bl	8003820 <HAL_GPIO_ReadPin>
 8008398:	2801      	cmp	r0, #1
 800839a:	f000 8234 	beq.w	8008806 <main+0x7ee>
					serialPrint("Mounting SD Card...\r\n");
 800839e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083a2:	2216      	movs	r2, #22
 80083a4:	499b      	ldr	r1, [pc, #620]	; (8008614 <main+0x5fc>)
 80083a6:	489c      	ldr	r0, [pc, #624]	; (8008618 <main+0x600>)
					retSD = f_mount(&fs, SD_Path, 1);
 80083a8:	4d9c      	ldr	r5, [pc, #624]	; (800861c <main+0x604>)
						FATFS_UnLinkDriver(SD_Path);
 80083aa:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8008620 <main+0x608>
					serialPrint("Mounting SD Card...\r\n");
 80083ae:	f7fc fe27 	bl	8005000 <HAL_UART_Transmit>
					retSD = f_mount(&fs, SD_Path, 1);
 80083b2:	2201      	movs	r2, #1
 80083b4:	499a      	ldr	r1, [pc, #616]	; (8008620 <main+0x608>)
 80083b6:	489b      	ldr	r0, [pc, #620]	; (8008624 <main+0x60c>)
 80083b8:	f7fe f8e0 	bl	800657c <f_mount>
 80083bc:	46a8      	mov	r8, r5
 80083be:	7028      	strb	r0, [r5, #0]
					while ( retSD != FR_OK)
 80083c0:	f898 3000 	ldrb.w	r3, [r8]
 80083c4:	b9fb      	cbnz	r3, 8008406 <main+0x3ee>
					serialPrint("Opening File...\r\n");
 80083c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083ca:	2212      	movs	r2, #18
 80083cc:	4996      	ldr	r1, [pc, #600]	; (8008628 <main+0x610>)
 80083ce:	4892      	ldr	r0, [pc, #584]	; (8008618 <main+0x600>)
 80083d0:	f7fc fe16 	bl	8005000 <HAL_UART_Transmit>
					retSD = f_open(&fp, name, FA_CREATE_ALWAYS | FA_WRITE);
 80083d4:	220a      	movs	r2, #10
 80083d6:	4995      	ldr	r1, [pc, #596]	; (800862c <main+0x614>)
 80083d8:	4895      	ldr	r0, [pc, #596]	; (8008630 <main+0x618>)
 80083da:	f7fe f905 	bl	80065e8 <f_open>
 80083de:	4680      	mov	r8, r0
 80083e0:	7028      	strb	r0, [r5, #0]
					if (FR_OK != retSD)
 80083e2:	b368      	cbz	r0, 8008440 <main+0x428>
							serialPrint("Problem with f_open...\r\n");
 80083e4:	4d93      	ldr	r5, [pc, #588]	; (8008634 <main+0x61c>)
 80083e6:	4c8c      	ldr	r4, [pc, #560]	; (8008618 <main+0x600>)
 80083e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083ec:	2219      	movs	r2, #25
 80083ee:	4629      	mov	r1, r5
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7fc fe05 	bl	8005000 <HAL_UART_Transmit>
 80083f6:	e7f7      	b.n	80083e8 <main+0x3d0>
		if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_5) != 0 || HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) != 0){
 80083f8:	2140      	movs	r1, #64	; 0x40
 80083fa:	4658      	mov	r0, fp
 80083fc:	f7fb fa10 	bl	8003820 <HAL_GPIO_ReadPin>
 8008400:	2800      	cmp	r0, #0
 8008402:	d198      	bne.n	8008336 <main+0x31e>
 8008404:	e791      	b.n	800832a <main+0x312>
						FATFS_UnLinkDriver(SD_Path);
 8008406:	4648      	mov	r0, r9
 8008408:	f7fe fb64 	bl	8006ad4 <FATFS_UnLinkDriver>
						FATFS_LinkDriver(&SD_Driver,SD_Path);
 800840c:	4649      	mov	r1, r9
 800840e:	488a      	ldr	r0, [pc, #552]	; (8008638 <main+0x620>)
 8008410:	f7fe fb44 	bl	8006a9c <FATFS_LinkDriver>
						retSD = f_mount(&fs,"", 1);
 8008414:	2201      	movs	r2, #1
 8008416:	4989      	ldr	r1, [pc, #548]	; (800863c <main+0x624>)
 8008418:	4882      	ldr	r0, [pc, #520]	; (8008624 <main+0x60c>)
 800841a:	f7fe f8af 	bl	800657c <f_mount>
						sprintf(serialText1,"\r\nFRESULT:%02d\r\n",(uint8_t) retSD); serialPrint(serialText1);
 800841e:	4988      	ldr	r1, [pc, #544]	; (8008640 <main+0x628>)
						retSD = f_mount(&fs,"", 1);
 8008420:	f888 0000 	strb.w	r0, [r8]
 8008424:	4602      	mov	r2, r0
						sprintf(serialText1,"\r\nFRESULT:%02d\r\n",(uint8_t) retSD); serialPrint(serialText1);
 8008426:	f107 001c 	add.w	r0, r7, #28
 800842a:	f000 fc89 	bl	8008d40 <siprintf>
 800842e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008432:	220b      	movs	r2, #11
 8008434:	f107 011c 	add.w	r1, r7, #28
 8008438:	4877      	ldr	r0, [pc, #476]	; (8008618 <main+0x600>)
 800843a:	f7fc fde1 	bl	8005000 <HAL_UART_Transmit>
 800843e:	e7bf      	b.n	80083c0 <main+0x3a8>
					lcd_clear();
 8008440:	f7ff fab0 	bl	80079a4 <lcd_clear>
					lcd_reset();
 8008444:	f7ff fa0e 	bl	8007864 <lcd_reset>
					lcd_print("Recording...");
 8008448:	487e      	ldr	r0, [pc, #504]	; (8008644 <main+0x62c>)
 800844a:	f7ff facb 	bl	80079e4 <lcd_print>
					HAL_TIM_Base_Start_IT(&htim2);
 800844e:	487e      	ldr	r0, [pc, #504]	; (8008648 <main+0x630>)
 8008450:	f7fc fadc 	bl	8004a0c <HAL_TIM_Base_Start_IT>
					buff1full = 0;
 8008454:	4b7d      	ldr	r3, [pc, #500]	; (800864c <main+0x634>)
					doneRec = 0;
 8008456:	f884 8000 	strb.w	r8, [r4]
					buff1full = 0;
 800845a:	f883 8000 	strb.w	r8, [r3]
					while(doneRec != 1){
 800845e:	7832      	ldrb	r2, [r6, #0]
 8008460:	2a01      	cmp	r2, #1
 8008462:	f040 80b3 	bne.w	80085cc <main+0x5b4>
					HAL_TIM_Base_Stop_IT(&htim2);
 8008466:	4878      	ldr	r0, [pc, #480]	; (8008648 <main+0x630>)
						if (xmax[0] < aTxBuffer1[i]){
 8008468:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8008660 <main+0x648>
					HAL_TIM_Base_Stop_IT(&htim2);
 800846c:	f7fc fad9 	bl	8004a22 <HAL_TIM_Base_Stop_IT>
					serialPrint("Writing File...\r\n");
 8008470:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008474:	2212      	movs	r2, #18
 8008476:	4976      	ldr	r1, [pc, #472]	; (8008650 <main+0x638>)
 8008478:	4867      	ldr	r0, [pc, #412]	; (8008618 <main+0x600>)
 800847a:	f7fc fdc1 	bl	8005000 <HAL_UART_Transmit>
					f_write(&fp,aTxBuffer1,BUFFER_SIZE,&stored);
 800847e:	4b75      	ldr	r3, [pc, #468]	; (8008654 <main+0x63c>)
 8008480:	f8da 1000 	ldr.w	r1, [sl]
 8008484:	486a      	ldr	r0, [pc, #424]	; (8008630 <main+0x618>)
 8008486:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800848a:	f7fe f985 	bl	8006798 <f_write>
					f_close(&fp);
 800848e:	4868      	ldr	r0, [pc, #416]	; (8008630 <main+0x618>)
 8008490:	f7fe fad1 	bl	8006a36 <f_close>
					serialPrint("\r\nSD Done!!! \r\n");
 8008494:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008498:	2210      	movs	r2, #16
 800849a:	496f      	ldr	r1, [pc, #444]	; (8008658 <main+0x640>)
 800849c:	485e      	ldr	r0, [pc, #376]	; (8008618 <main+0x600>)
 800849e:	f7fc fdaf 	bl	8005000 <HAL_UART_Transmit>
					lcd_clear();
 80084a2:	f7ff fa7f 	bl	80079a4 <lcd_clear>
					lcd_reset();
 80084a6:	f7ff f9dd 	bl	8007864 <lcd_reset>
					lcd_print("SD Done!");
 80084aa:	486c      	ldr	r0, [pc, #432]	; (800865c <main+0x644>)
 80084ac:	f7ff fa9a 	bl	80079e4 <lcd_print>
						if (xmax[0] < aTxBuffer1[i]){
 80084b0:	f8da 6000 	ldr.w	r6, [sl]
					double sum =0;
 80084b4:	ec55 4b18 	vmov	r4, r5, d8
 80084b8:	f106 39ff 	add.w	r9, r6, #4294967295
 80084bc:	f506 462f 	add.w	r6, r6, #44800	; 0xaf00
 80084c0:	36c7      	adds	r6, #199	; 0xc7
						if (xmax[0] < aTxBuffer1[i]){
 80084c2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80084c6:	edd8 6a00 	vldr	s13, [r8]
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084d2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80084d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							xmax[0] = aTxBuffer1[i];
 80084da:	bf44      	itt	mi
 80084dc:	eef8 7a67 	vcvtmi.f32.u32	s15, s15
 80084e0:	edc8 7a00 	vstrmi	s15, [r8]
						sum += aTxBuffer1[i];
 80084e4:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 80084e8:	f7f8 f88c 	bl	8000604 <__aeabi_i2d>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f7 ff3a 	bl	800036c <__adddf3>
					for (i=0;i<BUFFER_SIZE;i++){
 80084f8:	454e      	cmp	r6, r9
						sum += aTxBuffer1[i];
 80084fa:	4604      	mov	r4, r0
 80084fc:	460d      	mov	r5, r1
					for (i=0;i<BUFFER_SIZE;i++){
 80084fe:	d1e0      	bne.n	80084c2 <main+0x4aa>
					mean = sum/NumOfSamples;
 8008500:	a337      	add	r3, pc, #220	; (adr r3, 80085e0 <main+0x5c8>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f8 fa0d 	bl	8000924 <__aeabi_ddiv>
 800850a:	f7f8 fbb9 	bl	8000c80 <__aeabi_d2f>
					arm_abs_f32(xmax,xmax,1);
 800850e:	4954      	ldr	r1, [pc, #336]	; (8008660 <main+0x648>)
							for(j=0;j<2*fftSize;j++){
 8008510:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8008680 <main+0x668>
									hambuffer[j] = 0;
 8008514:	eddf 9a53 	vldr	s19, [pc, #332]	; 8008664 <main+0x64c>
					arm_abs_f32(xmax,xmax,1);
 8008518:	2201      	movs	r2, #1
					mean = sum/NumOfSamples;
 800851a:	ee09 0a10 	vmov	s18, r0
					arm_abs_f32(xmax,xmax,1);
 800851e:	4608      	mov	r0, r1
 8008520:	f7fe fadb 	bl	8006ada <arm_abs_f32>
					xmax[0]= xmax[0]-mean;
 8008524:	edd8 7a00 	vldr	s15, [r8]
 8008528:	ee77 7ac9 	vsub.f32	s15, s15, s18
					f_open(&fp1, name1, FA_CREATE_ALWAYS | FA_WRITE);	//Used only for Training Recording
 800852c:	2400      	movs	r4, #0
					xmax[0]= xmax[0]-mean;
 800852e:	edc8 7a00 	vstr	s15, [r8]
					lcd_clear();
 8008532:	f7ff fa37 	bl	80079a4 <lcd_clear>
					lcd_reset();
 8008536:	f7ff f995 	bl	8007864 <lcd_reset>
					lcd_print("Done Recording");
 800853a:	484b      	ldr	r0, [pc, #300]	; (8008668 <main+0x650>)
 800853c:	f7ff fa52 	bl	80079e4 <lcd_print>
					delay(500);
 8008540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008544:	f7fa fc88 	bl	8002e58 <HAL_Delay>
					lcd_clear();
 8008548:	f7ff fa2c 	bl	80079a4 <lcd_clear>
					lcd_reset();
 800854c:	f7ff f98a 	bl	8007864 <lcd_reset>
					lcd_print("Data Analysis...");
 8008550:	4846      	ldr	r0, [pc, #280]	; (800866c <main+0x654>)
 8008552:	f7ff fa47 	bl	80079e4 <lcd_print>
					f_open(&fp1, name1, FA_CREATE_ALWAYS | FA_WRITE);	//Used only for Training Recording
 8008556:	220a      	movs	r2, #10
 8008558:	4945      	ldr	r1, [pc, #276]	; (8008670 <main+0x658>)
 800855a:	4846      	ldr	r0, [pc, #280]	; (8008674 <main+0x65c>)
 800855c:	f7fe f844 	bl	80065e8 <f_open>
 8008560:	4b45      	ldr	r3, [pc, #276]	; (8008678 <main+0x660>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	4b2a      	ldr	r3, [pc, #168]	; (8008610 <main+0x5f8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f503 31af 	add.w	r1, r3, #89600	; 0x15e00
 800856c:	4422      	add	r2, r4
 800856e:	f501 71c8 	add.w	r1, r1, #400	; 0x190
							fbuffer[i] =  ((fbuffer[i] - xmax[0])/(4*xmax[0]-1));
 8008572:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008576:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
							fbuffer[i] = aTxBuffer1[i+22500*k] - mean;
 800857a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800857e:	ee07 0a90 	vmov	s15, r0
 8008582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							fbuffer[i] =  ((fbuffer[i] - xmax[0])/(4*xmax[0]-1));
 8008586:	4836      	ldr	r0, [pc, #216]	; (8008660 <main+0x648>)
							fbuffer[i] = aTxBuffer1[i+22500*k] - mean;
 8008588:	ee77 7ac9 	vsub.f32	s15, s15, s18
							fbuffer[i] =  ((fbuffer[i] - xmax[0])/(4*xmax[0]-1));
 800858c:	eef0 5a66 	vmov.f32	s11, s13
							fbuffer[i] = aTxBuffer1[i+22500*k] - mean;
 8008590:	edc3 7a00 	vstr	s15, [r3]
							fbuffer[i] =  ((fbuffer[i] - xmax[0])/(4*xmax[0]-1));
 8008594:	ed90 7a00 	vldr	s14, [r0]
 8008598:	eee7 5a06 	vfma.f32	s11, s14, s12
 800859c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085a0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80085a4:	eca3 7a01 	vstmia	r3!, {s14}
						for(i=0;i<22500;i++)
 80085a8:	4299      	cmp	r1, r3
 80085aa:	d1e6      	bne.n	800857a <main+0x562>
 80085ac:	2500      	movs	r5, #0
									hambuffer[j]=(fbuffer[i*FrameStep+j/2]*hamming[j/2])/10000;
 80085ae:	4b18      	ldr	r3, [pc, #96]	; (8008610 <main+0x5f8>)
							for(j=0;j<2*fftSize;j++){
 80085b0:	f8d9 0000 	ldr.w	r0, [r9]
									hambuffer[j]=(fbuffer[i*FrameStep+j/2]*hamming[j/2])/10000;
 80085b4:	f8d3 8000 	ldr.w	r8, [r3]
 80085b8:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8008684 <main+0x66c>
 80085bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800867c <main+0x664>
 80085c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
							for(j=0;j<2*fftSize;j++){
 80085c4:	ea4f 0c40 	mov.w	ip, r0, lsl #1
									hambuffer[j]=(fbuffer[i*FrameStep+j/2]*hamming[j/2])/10000;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e074      	b.n	80086b6 <main+0x69e>
						if (buff1full == 1){
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	2a01      	cmp	r2, #1
							doneRec=1;
 80085d2:	bf08      	it	eq
 80085d4:	7032      	strbeq	r2, [r6, #0]
 80085d6:	e742      	b.n	800845e <main+0x446>
	...
 80085e4:	40e5f900 	.word	0x40e5f900
 80085e8:	2000861c 	.word	0x2000861c
 80085ec:	2000861d 	.word	0x2000861d
 80085f0:	20008620 	.word	0x20008620
 80085f4:	40020800 	.word	0x40020800
 80085f8:	40021800 	.word	0x40021800
 80085fc:	080154de 	.word	0x080154de
 8008600:	200085fc 	.word	0x200085fc
 8008604:	080154ed 	.word	0x080154ed
 8008608:	080154fd 	.word	0x080154fd
 800860c:	00015f90 	.word	0x00015f90
 8008610:	20008ae0 	.word	0x20008ae0
 8008614:	0801550b 	.word	0x0801550b
 8008618:	20008b34 	.word	0x20008b34
 800861c:	20008614 	.word	0x20008614
 8008620:	20008615 	.word	0x20008615
 8008624:	200088b0 	.word	0x200088b0
 8008628:	08015532 	.word	0x08015532
 800862c:	20008580 	.word	0x20008580
 8008630:	20008684 	.word	0x20008684
 8008634:	08015544 	.word	0x08015544
 8008638:	08009df8 	.word	0x08009df8
 800863c:	0801558b 	.word	0x0801558b
 8008640:	08015521 	.word	0x08015521
 8008644:	0801555d 	.word	0x0801555d
 8008648:	20008c90 	.word	0x20008c90
 800864c:	200085f6 	.word	0x200085f6
 8008650:	0801556a 	.word	0x0801556a
 8008654:	20008bb0 	.word	0x20008bb0
 8008658:	0801557c 	.word	0x0801557c
 800865c:	0801558c 	.word	0x0801558c
 8008660:	20008594 	.word	0x20008594
 8008664:	00000000 	.word	0x00000000
 8008668:	08015595 	.word	0x08015595
 800866c:	080155a4 	.word	0x080155a4
 8008670:	20008588 	.word	0x20008588
 8008674:	20008d8c 	.word	0x20008d8c
 8008678:	20008ae4 	.word	0x20008ae4
 800867c:	461c4000 	.word	0x461c4000
 8008680:	2000847c 	.word	0x2000847c
 8008684:	20008480 	.word	0x20008480
								if ((j%2)==0){
 8008688:	07d9      	lsls	r1, r3, #31
 800868a:	f100 808e 	bmi.w	80087aa <main+0x792>
									hambuffer[j]=(fbuffer[i*FrameStep+j/2]*hamming[j/2])/10000;
 800868e:	105e      	asrs	r6, r3, #1
 8008690:	19a9      	adds	r1, r5, r6
 8008692:	f83e 6016 	ldrh.w	r6, [lr, r6, lsl #1]
 8008696:	ee07 6a90 	vmov	s15, r6
 800869a:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800869e:	edd1 6a00 	vldr	s13, [r1]
 80086a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80086aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80086ae:	edc2 6a00 	vstr	s13, [r2]
							for(j=0;j<2*fftSize;j++){
 80086b2:	3301      	adds	r3, #1
 80086b4:	3204      	adds	r2, #4
 80086b6:	4563      	cmp	r3, ip
 80086b8:	d1e6      	bne.n	8008688 <main+0x670>
							float32_t fft_out[fftSize];
 80086ba:	0083      	lsls	r3, r0, #2
 80086bc:	330a      	adds	r3, #10
 80086be:	f023 0307 	bic.w	r3, r3, #7
 80086c2:	46e8      	mov	r8, sp
 80086c4:	ebad 0d03 	sub.w	sp, sp, r3
 80086c8:	ae02      	add	r6, sp, #8
							fft(fftSize,hambuffer,fft_out);
 80086ca:	4632      	mov	r2, r6
 80086cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80086d0:	f7ff fa30 	bl	8007b34 <fft>
							mfcc(fft_out,NoOfFilters);
 80086d4:	4b50      	ldr	r3, [pc, #320]	; (8008818 <main+0x800>)
 80086d6:	4630      	mov	r0, r6
 80086d8:	7819      	ldrb	r1, [r3, #0]
 80086da:	3540      	adds	r5, #64	; 0x40
 80086dc:	f7ff fbbc 	bl	8007e58 <mfcc>
						for(i=0;i<2*175;i++){
 80086e0:	f5b5 4faf 	cmp.w	r5, #22400	; 0x5780
 80086e4:	46c5      	mov	sp, r8
 80086e6:	f47f af62 	bne.w	80085ae <main+0x596>
 80086ea:	f504 44af 	add.w	r4, r4, #22400	; 0x5780
 80086ee:	3464      	adds	r4, #100	; 0x64
					for(k=0;k<2;k++){
 80086f0:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80086f4:	429c      	cmp	r4, r3
 80086f6:	f47f af33 	bne.w	8008560 <main+0x548>
					serialPrint("\r\nMFCC Done!\r\n");
 80086fa:	220f      	movs	r2, #15
 80086fc:	4947      	ldr	r1, [pc, #284]	; (800881c <main+0x804>)
 80086fe:	4848      	ldr	r0, [pc, #288]	; (8008820 <main+0x808>)
					sprintf(serialText1,"%d,%d,%d\r\n",user1,user2,user3);serialPrint(serialText1);
 8008700:	4e48      	ldr	r6, [pc, #288]	; (8008824 <main+0x80c>)
 8008702:	4d49      	ldr	r5, [pc, #292]	; (8008828 <main+0x810>)
					id = 0;
 8008704:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008858 <main+0x840>
					sprintf(serialText1,"%d,%d,%d\r\n",user1,user2,user3);serialPrint(serialText1);
 8008708:	4c48      	ldr	r4, [pc, #288]	; (800882c <main+0x814>)
					serialPrint("\r\nMFCC Done!\r\n");
 800870a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800870e:	f7fc fc77 	bl	8005000 <HAL_UART_Transmit>
					f_close(&fp1);
 8008712:	4847      	ldr	r0, [pc, #284]	; (8008830 <main+0x818>)
 8008714:	f7fe f98f 	bl	8006a36 <f_close>
					f_close(&fp);
 8008718:	4846      	ldr	r0, [pc, #280]	; (8008834 <main+0x81c>)
 800871a:	f7fe f98c 	bl	8006a36 <f_close>
					free(aTxBuffer1);free(fbuffer);
 800871e:	f8da 0000 	ldr.w	r0, [sl]
 8008722:	f7f9 ff61 	bl	80025e8 <free>
 8008726:	4b44      	ldr	r3, [pc, #272]	; (8008838 <main+0x820>)
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	f7f9 ff5d 	bl	80025e8 <free>
					id = 0;
 800872e:	2300      	movs	r3, #0
					sprintf(serialText1,"%d,%d,%d\r\n",user1,user2,user3);serialPrint(serialText1);
 8008730:	6832      	ldr	r2, [r6, #0]
					id = 0;
 8008732:	f8c8 3000 	str.w	r3, [r8]
					sprintf(serialText1,"%d,%d,%d\r\n",user1,user2,user3);serialPrint(serialText1);
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	6821      	ldr	r1, [r4, #0]
 800873a:	9100      	str	r1, [sp, #0]
 800873c:	f107 001c 	add.w	r0, r7, #28
 8008740:	493e      	ldr	r1, [pc, #248]	; (800883c <main+0x824>)
 8008742:	f000 fafd 	bl	8008d40 <siprintf>
 8008746:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800874a:	220b      	movs	r2, #11
 800874c:	f107 011c 	add.w	r1, r7, #28
 8008750:	4833      	ldr	r0, [pc, #204]	; (8008820 <main+0x808>)
 8008752:	f7fc fc55 	bl	8005000 <HAL_UART_Transmit>
					if (user1 > user2 && user1 > user3){
 8008756:	6832      	ldr	r2, [r6, #0]
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d928      	bls.n	80087b0 <main+0x798>
 800875e:	6832      	ldr	r2, [r6, #0]
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d924      	bls.n	80087b0 <main+0x798>
						if( user1 > 400 ){
 8008766:	6833      	ldr	r3, [r6, #0]
 8008768:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800876c:	d902      	bls.n	8008774 <main+0x75c>
							id = 1;
 800876e:	2301      	movs	r3, #1
						id = 0;
 8008770:	f8c8 3000 	str.w	r3, [r8]
					lcd_clear();
 8008774:	f7ff f916 	bl	80079a4 <lcd_clear>
					lcd_reset();
 8008778:	f7ff f874 	bl	8007864 <lcd_reset>
					if(id == 1 ){
 800877c:	f8d8 3000 	ldr.w	r3, [r8]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d133      	bne.n	80087ec <main+0x7d4>
						lcd_print("Welcome, Thanos!");
 8008784:	482e      	ldr	r0, [pc, #184]	; (8008840 <main+0x828>)
						lcd_print("Welcome, Neoklis!");
 8008786:	f7ff f92d 	bl	80079e4 <lcd_print>
						lcd_print(" Door Unlocked.");
 800878a:	482e      	ldr	r0, [pc, #184]	; (8008844 <main+0x82c>)
						lcd_print("Try Again!");
 800878c:	f7ff f92a 	bl	80079e4 <lcd_print>
					user1 = 0;
 8008790:	2300      	movs	r3, #0
					delay(2000);
 8008792:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
					user1 = 0;
 8008796:	6033      	str	r3, [r6, #0]
					user2 = 0;
 8008798:	602b      	str	r3, [r5, #0]
					user3 = 0;
 800879a:	6023      	str	r3, [r4, #0]
					delay(2000);
 800879c:	f7fa fb5c 	bl	8002e58 <HAL_Delay>
					lcd_clear();
 80087a0:	f7ff f900 	bl	80079a4 <lcd_clear>
					lcd_reset();
 80087a4:	f7ff f85e 	bl	8007864 <lcd_reset>
					break;
 80087a8:	e5bf      	b.n	800832a <main+0x312>
									hambuffer[j] = 0;
 80087aa:	edc2 9a00 	vstr	s19, [r2]
 80087ae:	e780      	b.n	80086b2 <main+0x69a>
					}else if (user2 > user1 && user2 > user3){
 80087b0:	682a      	ldr	r2, [r5, #0]
 80087b2:	6833      	ldr	r3, [r6, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d909      	bls.n	80087cc <main+0x7b4>
 80087b8:	682a      	ldr	r2, [r5, #0]
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d905      	bls.n	80087cc <main+0x7b4>
						if ( user2 > 350 ){
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80087c6:	d9d5      	bls.n	8008774 <main+0x75c>
							id = 2;
 80087c8:	2302      	movs	r3, #2
 80087ca:	e7d1      	b.n	8008770 <main+0x758>
					}else if (user3 > user1 && user3 > user2 ){
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	6833      	ldr	r3, [r6, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d909      	bls.n	80087e8 <main+0x7d0>
 80087d4:	6822      	ldr	r2, [r4, #0]
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d905      	bls.n	80087e8 <main+0x7d0>
						if (user3 > 350){
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80087e2:	d9c7      	bls.n	8008774 <main+0x75c>
							id = 3;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e7c3      	b.n	8008770 <main+0x758>
						id = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e7c1      	b.n	8008770 <main+0x758>
					}else if ( id == 2 ){
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d101      	bne.n	80087f4 <main+0x7dc>
						lcd_print("Welcome, Chris! ");
 80087f0:	4815      	ldr	r0, [pc, #84]	; (8008848 <main+0x830>)
 80087f2:	e7c8      	b.n	8008786 <main+0x76e>
					}else if ( id == 3 ){
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d101      	bne.n	80087fc <main+0x7e4>
						lcd_print("Welcome, Neoklis!");
 80087f8:	4814      	ldr	r0, [pc, #80]	; (800884c <main+0x834>)
 80087fa:	e7c4      	b.n	8008786 <main+0x76e>
						lcd_print("Not Identified.\n");
 80087fc:	4814      	ldr	r0, [pc, #80]	; (8008850 <main+0x838>)
 80087fe:	f7ff f8f1 	bl	80079e4 <lcd_print>
						lcd_print("Try Again!");
 8008802:	4814      	ldr	r0, [pc, #80]	; (8008854 <main+0x83c>)
 8008804:	e7c2      	b.n	800878c <main+0x774>
				else if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) != 1){
 8008806:	2140      	movs	r1, #64	; 0x40
 8008808:	4658      	mov	r0, fp
 800880a:	f7fb f809 	bl	8003820 <HAL_GPIO_ReadPin>
 800880e:	2801      	cmp	r0, #1
 8008810:	f43f adb3 	beq.w	800837a <main+0x362>
 8008814:	e7c4      	b.n	80087a0 <main+0x788>
 8008816:	bf00      	nop
 8008818:	200001d5 	.word	0x200001d5
 800881c:	080155b5 	.word	0x080155b5
 8008820:	20008b34 	.word	0x20008b34
 8008824:	20008600 	.word	0x20008600
 8008828:	20008604 	.word	0x20008604
 800882c:	20008608 	.word	0x20008608
 8008830:	20008d8c 	.word	0x20008d8c
 8008834:	20008684 	.word	0x20008684
 8008838:	20008ae0 	.word	0x20008ae0
 800883c:	080155c4 	.word	0x080155c4
 8008840:	080155cf 	.word	0x080155cf
 8008844:	080155e0 	.word	0x080155e0
 8008848:	080155f0 	.word	0x080155f0
 800884c:	08015601 	.word	0x08015601
 8008850:	08015613 	.word	0x08015613
 8008854:	08015624 	.word	0x08015624
 8008858:	20008ae8 	.word	0x20008ae8

0800885c <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char * file, int line)
{
 800885c:	e7fe      	b.n	800885c <_Error_Handler>

0800885e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800885e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008860:	2003      	movs	r0, #3
 8008862:	f7fa fd17 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8008866:	2200      	movs	r2, #0
 8008868:	4611      	mov	r1, r2
 800886a:	f06f 000b 	mvn.w	r0, #11
 800886e:	f7fa fd23 	bl	80032b8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008872:	2200      	movs	r2, #0
 8008874:	4611      	mov	r1, r2
 8008876:	f06f 000a 	mvn.w	r0, #10
 800887a:	f7fa fd1d 	bl	80032b8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800887e:	2200      	movs	r2, #0
 8008880:	4611      	mov	r1, r2
 8008882:	f06f 0009 	mvn.w	r0, #9
 8008886:	f7fa fd17 	bl	80032b8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800888a:	2200      	movs	r2, #0
 800888c:	4611      	mov	r1, r2
 800888e:	f06f 0004 	mvn.w	r0, #4
 8008892:	f7fa fd11 	bl	80032b8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8008896:	2200      	movs	r2, #0
 8008898:	4611      	mov	r1, r2
 800889a:	f06f 0003 	mvn.w	r0, #3
 800889e:	f7fa fd0b 	bl	80032b8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80088a2:	2200      	movs	r2, #0
 80088a4:	4611      	mov	r1, r2
 80088a6:	f06f 0001 	mvn.w	r0, #1
 80088aa:	f7fa fd05 	bl	80032b8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80088ae:	2200      	movs	r2, #0
 80088b0:	4611      	mov	r1, r2
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80088ba:	f7fa bcfd 	b.w	80032b8 <HAL_NVIC_SetPriority>
	...

080088c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80088c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80088c2:	6802      	ldr	r2, [r0, #0]
 80088c4:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <HAL_ADC_MspInit+0x3c>)
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d115      	bne.n	80088f6 <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80088ca:	2100      	movs	r1, #0
 80088cc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80088d0:	9100      	str	r1, [sp, #0]
 80088d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088d4:	480a      	ldr	r0, [pc, #40]	; (8008900 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80088d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088da:	645a      	str	r2, [r3, #68]	; 0x44
 80088dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088de:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80088e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80088e8:	2308      	movs	r3, #8
 80088ea:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088ec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088ee:	2303      	movs	r3, #3
 80088f0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088f2:	f7fa fea9 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80088f6:	b007      	add	sp, #28
 80088f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80088fc:	40012000 	.word	0x40012000
 8008900:	40020800 	.word	0x40020800

08008904 <HAL_SD_MspInit>:
  }

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8008908:	6802      	ldr	r2, [r0, #0]
 800890a:	4b36      	ldr	r3, [pc, #216]	; (80089e4 <HAL_SD_MspInit+0xe0>)
 800890c:	429a      	cmp	r2, r3
{
 800890e:	b087      	sub	sp, #28
 8008910:	4606      	mov	r6, r0
  if(hsd->Instance==SDIO)
 8008912:	d164      	bne.n	80089de <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008914:	2500      	movs	r5, #0
 8008916:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800891a:	9500      	str	r5, [sp, #0]
 800891c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800891e:	4832      	ldr	r0, [pc, #200]	; (80089e8 <HAL_SD_MspInit+0xe4>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008924:	645a      	str	r2, [r3, #68]	; 0x44
 8008926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008928:	9503      	str	r5, [sp, #12]
    __HAL_RCC_SDIO_CLK_ENABLE();
 800892a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800892e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008930:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008932:	240c      	movs	r4, #12

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008934:	f04f 0804 	mov.w	r8, #4
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008938:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800893a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800893c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008940:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008944:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008946:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008948:	f8cd 9008 	str.w	r9, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800894c:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800894e:	f7fa fe7b 	bl	8003648 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008952:	4826      	ldr	r0, [pc, #152]	; (80089ec <HAL_SD_MspInit+0xe8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008954:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008956:	eb0d 0108 	add.w	r1, sp, r8

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream3;
 800895a:	4c25      	ldr	r4, [pc, #148]	; (80089f0 <HAL_SD_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800895c:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008960:	f8cd 9008 	str.w	r9, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008964:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008966:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008968:	f7fa fe6e 	bl	8003648 <HAL_GPIO_Init>
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 800896c:	4a21      	ldr	r2, [pc, #132]	; (80089f4 <HAL_SD_MspInit+0xf0>)
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800896e:	60a5      	str	r5, [r4, #8]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8008970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008974:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8008978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897c:	6123      	str	r3, [r4, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800897e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008982:	6163      	str	r3, [r4, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008988:	61a3      	str	r3, [r4, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 800898a:	2320      	movs	r3, #32
 800898c:	61e3      	str	r3, [r4, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800898e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008992:	6223      	str	r3, [r4, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 8008994:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008998:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 800899a:	4620      	mov	r0, r4
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 800899c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 80089a0:	60e5      	str	r5, [r4, #12]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80089a2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80089a6:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 80089a8:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 80089aa:	f7fa fd03 	bl	80033b4 <HAL_DMA_Init>
 80089ae:	b118      	cbz	r0, 80089b8 <HAL_SD_MspInit+0xb4>
    {
      _Error_Handler(__FILE__, __LINE__);
 80089b0:	21c4      	movs	r1, #196	; 0xc4
 80089b2:	4811      	ldr	r0, [pc, #68]	; (80089f8 <HAL_SD_MspInit+0xf4>)
 80089b4:	f7ff ff52 	bl	800885c <_Error_Handler>
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80089b8:	2200      	movs	r2, #0
 80089ba:	4611      	mov	r1, r2
 80089bc:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 80089be:	63f4      	str	r4, [r6, #60]	; 0x3c
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 80089c0:	6434      	str	r4, [r6, #64]	; 0x40
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 80089c2:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80089c4:	f7fa fc78 	bl	80032b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80089c8:	2031      	movs	r0, #49	; 0x31
 80089ca:	f7fa fca9 	bl	8003320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80089ce:	2200      	movs	r2, #0
 80089d0:	2031      	movs	r0, #49	; 0x31
 80089d2:	4611      	mov	r1, r2
 80089d4:	f7fa fc70 	bl	80032b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80089d8:	2031      	movs	r0, #49	; 0x31
 80089da:	f7fa fca1 	bl	8003320 <HAL_NVIC_EnableIRQ>
  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80089de:	b007      	add	sp, #28
 80089e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e4:	40012c00 	.word	0x40012c00
 80089e8:	40020800 	.word	0x40020800
 80089ec:	40020c00 	.word	0x40020c00
 80089f0:	20008624 	.word	0x20008624
 80089f4:	40026458 	.word	0x40026458
 80089f8:	0801562f 	.word	0x0801562f

080089fc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80089fc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80089fe:	6802      	ldr	r2, [r0, #0]
 8008a00:	4b2e      	ldr	r3, [pc, #184]	; (8008abc <HAL_SPI_MspInit+0xc0>)
 8008a02:	429a      	cmp	r2, r3
{
 8008a04:	b086      	sub	sp, #24
 8008a06:	4606      	mov	r6, r0
  if(hspi->Instance==SPI1)
 8008a08:	d155      	bne.n	8008ab6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8008a10:	9500      	str	r5, [sp, #0]
 8008a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a14:	482a      	ldr	r0, [pc, #168]	; (8008ac0 <HAL_SPI_MspInit+0xc4>)

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8008a16:	4c2b      	ldr	r4, [pc, #172]	; (8008ac4 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a1c:	645a      	str	r2, [r3, #68]	; 0x44
 8008a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a20:	9503      	str	r5, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a2a:	23e0      	movs	r3, #224	; 0xe0
 8008a2c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a32:	2303      	movs	r3, #3
 8008a34:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a36:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a38:	2305      	movs	r3, #5
 8008a3a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a3c:	f7fa fe04 	bl	8003648 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8008a40:	4b21      	ldr	r3, [pc, #132]	; (8008ac8 <HAL_SPI_MspInit+0xcc>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a42:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8008a44:	f04f 6cc0 	mov.w	ip, #100663296	; 0x6000000
 8008a48:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a50:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008a52:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008a54:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a58:	60e5      	str	r5, [r4, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a5a:	6165      	str	r5, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a5c:	61a5      	str	r5, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8008a5e:	61e5      	str	r5, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008a60:	6223      	str	r3, [r4, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a62:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008a64:	f7fa fca6 	bl	80033b4 <HAL_DMA_Init>
 8008a68:	b120      	cbz	r0, 8008a74 <HAL_SPI_MspInit+0x78>
    {
      _Error_Handler(__FILE__, __LINE__);
 8008a6a:	f44f 7192 	mov.w	r1, #292	; 0x124
 8008a6e:	4817      	ldr	r0, [pc, #92]	; (8008acc <HAL_SPI_MspInit+0xd0>)
 8008a70:	f7ff fef4 	bl	800885c <_Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a74:	4b16      	ldr	r3, [pc, #88]	; (8008ad0 <HAL_SPI_MspInit+0xd4>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8008a76:	64f4      	str	r4, [r6, #76]	; 0x4c
 8008a78:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8008a7a:	4c16      	ldr	r4, [pc, #88]	; (8008ad4 <HAL_SPI_MspInit+0xd8>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a80:	f04f 65c0 	mov.w	r5, #100663296	; 0x6000000
 8008a84:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8008a88:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a8c:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a8e:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008a90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008a94:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a96:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a98:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a9a:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8008a9c:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008a9e:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008aa0:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008aa2:	f7fa fc87 	bl	80033b4 <HAL_DMA_Init>
 8008aa6:	b120      	cbz	r0, 8008ab2 <HAL_SPI_MspInit+0xb6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8008aa8:	f44f 719b 	mov.w	r1, #310	; 0x136
 8008aac:	4807      	ldr	r0, [pc, #28]	; (8008acc <HAL_SPI_MspInit+0xd0>)
 8008aae:	f7ff fed5 	bl	800885c <_Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8008ab2:	64b4      	str	r4, [r6, #72]	; 0x48
 8008ab4:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008ab6:	b006      	add	sp, #24
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	bf00      	nop
 8008abc:	40013000 	.word	0x40013000
 8008ac0:	40020000 	.word	0x40020000
 8008ac4:	20008ccc 	.word	0x20008ccc
 8008ac8:	40026410 	.word	0x40026410
 8008acc:	0801562f 	.word	0x0801562f
 8008ad0:	40026488 	.word	0x40026488
 8008ad4:	20008d2c 	.word	0x20008d2c

08008ad8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ad8:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8008ada:	6803      	ldr	r3, [r0, #0]
 8008adc:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <HAL_TIM_Base_MspInit+0x58>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d10e      	bne.n	8008b00 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	4b13      	ldr	r3, [pc, #76]	; (8008b34 <HAL_TIM_Base_MspInit+0x5c>)
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aea:	f042 0201 	orr.w	r2, r2, #1
 8008aee:	645a      	str	r2, [r3, #68]	; 0x44
 8008af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008afa:	b003      	add	sp, #12
 8008afc:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8008b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b04:	d1f9      	bne.n	8008afa <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008b06:	2200      	movs	r2, #0
 8008b08:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8008b0c:	9201      	str	r2, [sp, #4]
 8008b0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008b10:	f041 0101 	orr.w	r1, r1, #1
 8008b14:	6419      	str	r1, [r3, #64]	; 0x40
 8008b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008b1e:	4611      	mov	r1, r2
 8008b20:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008b22:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008b24:	f7fa fbc8 	bl	80032b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008b28:	201c      	movs	r0, #28
 8008b2a:	f7fa fbf9 	bl	8003320 <HAL_NVIC_EnableIRQ>
}
 8008b2e:	e7e4      	b.n	8008afa <HAL_TIM_Base_MspInit+0x22>
 8008b30:	40010000 	.word	0x40010000
 8008b34:	40023800 	.word	0x40023800

08008b38 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8008b3a:	6802      	ldr	r2, [r0, #0]
 8008b3c:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <HAL_UART_MspInit+0x48>)
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d11a      	bne.n	8008b78 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008b42:	2300      	movs	r3, #0
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b48:	480f      	ldr	r0, [pc, #60]	; (8008b88 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8008b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b4c:	f042 0210 	orr.w	r2, r2, #16
 8008b50:	645a      	str	r2, [r3, #68]	; 0x44
 8008b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008b5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008b60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b62:	2302      	movs	r3, #2
 8008b64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b66:	2301      	movs	r3, #1
 8008b68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b6e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008b70:	2307      	movs	r3, #7
 8008b72:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b74:	f7fa fd68 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008b78:	b007      	add	sp, #28
 8008b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b7e:	bf00      	nop
 8008b80:	40011000 	.word	0x40011000
 8008b84:	40023800 	.word	0x40023800
 8008b88:	40020000 	.word	0x40020000

08008b8c <NMI_Handler>:
 8008b8c:	4770      	bx	lr

08008b8e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8008b8e:	e7fe      	b.n	8008b8e <HardFault_Handler>

08008b90 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8008b90:	e7fe      	b.n	8008b90 <MemManage_Handler>

08008b92 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8008b92:	e7fe      	b.n	8008b92 <BusFault_Handler>

08008b94 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8008b94:	e7fe      	b.n	8008b94 <UsageFault_Handler>

08008b96 <SVC_Handler>:
 8008b96:	4770      	bx	lr

08008b98 <DebugMon_Handler>:
 8008b98:	4770      	bx	lr

08008b9a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8008b9a:	4770      	bx	lr

08008b9c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b9e:	f7fa f94d 	bl	8002e3c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8008ba6:	f7fa bbea 	b.w	800337e <HAL_SYSTICK_IRQHandler>
	...

08008bac <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8008bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	char serialText[6];
  if (buffSelect == 1)
 8008bb0:	4e14      	ldr	r6, [pc, #80]	; (8008c04 <TIM2_IRQHandler+0x58>)
 8008bb2:	7835      	ldrb	r5, [r6, #0]
 8008bb4:	2d01      	cmp	r5, #1
 8008bb6:	d11f      	bne.n	8008bf8 <TIM2_IRQHandler+0x4c>
  {

	  HAL_ADC_Start(&hadc1);
 8008bb8:	4813      	ldr	r0, [pc, #76]	; (8008c08 <TIM2_IRQHandler+0x5c>)
	  HAL_ADC_PollForConversion(&hadc1,100);
	  aTxBuffer1[buffIndex] = HAL_ADC_GetValue(&hadc1);
 8008bba:	4c14      	ldr	r4, [pc, #80]	; (8008c0c <TIM2_IRQHandler+0x60>)
	  HAL_ADC_Start(&hadc1);
 8008bbc:	f7fa fa00 	bl	8002fc0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8008bc0:	2164      	movs	r1, #100	; 0x64
 8008bc2:	4811      	ldr	r0, [pc, #68]	; (8008c08 <TIM2_IRQHandler+0x5c>)
 8008bc4:	f7fa fa7a 	bl	80030bc <HAL_ADC_PollForConversion>
	  aTxBuffer1[buffIndex] = HAL_ADC_GetValue(&hadc1);
 8008bc8:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <TIM2_IRQHandler+0x64>)
 8008bca:	480f      	ldr	r0, [pc, #60]	; (8008c08 <TIM2_IRQHandler+0x5c>)
 8008bcc:	f8d3 8000 	ldr.w	r8, [r3]
 8008bd0:	6827      	ldr	r7, [r4, #0]
 8008bd2:	f7fa fac3 	bl	800315c <HAL_ADC_GetValue>
 8008bd6:	f808 0007 	strb.w	r0, [r8, r7]
	  HAL_ADC_Stop(&hadc1);
 8008bda:	480b      	ldr	r0, [pc, #44]	; (8008c08 <TIM2_IRQHandler+0x5c>)
 8008bdc:	f7fa fa50 	bl	8003080 <HAL_ADC_Stop>
	  buffIndex++;
 8008be0:	6823      	ldr	r3, [r4, #0]

	 if(buffIndex == BUFFER_SIZE)
 8008be2:	f64a 72c8 	movw	r2, #45000	; 0xafc8
	  buffIndex++;
 8008be6:	3301      	adds	r3, #1
	 if(buffIndex == BUFFER_SIZE)
 8008be8:	4293      	cmp	r3, r2
	  buffIndex++;
 8008bea:	6023      	str	r3, [r4, #0]
	 if(buffIndex == BUFFER_SIZE)
 8008bec:	d104      	bne.n	8008bf8 <TIM2_IRQHandler+0x4c>
	 {
		 buffSelect = 1;
		 buffIndex = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6023      	str	r3, [r4, #0]
		 buff1full = 1;
 8008bf2:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <TIM2_IRQHandler+0x68>)
		 buffSelect = 1;
 8008bf4:	7035      	strb	r5, [r6, #0]
		 buff1full = 1;
 8008bf6:	701d      	strb	r5, [r3, #0]
//		  buff2full = 1;
//
//	  }
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008bf8:	4807      	ldr	r0, [pc, #28]	; (8008c18 <TIM2_IRQHandler+0x6c>)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_TIM_IRQHandler(&htim2);
 8008bfe:	f7fb bf4a 	b.w	8004a96 <HAL_TIM_IRQHandler>
 8008c02:	bf00      	nop
 8008c04:	20007270 	.word	0x20007270
 8008c08:	20008aec 	.word	0x20008aec
 8008c0c:	200085f8 	.word	0x200085f8
 8008c10:	20008ae4 	.word	0x20008ae4
 8008c14:	200085f6 	.word	0x200085f6
 8008c18:	20008c90 	.word	0x20008c90

08008c1c <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <SDIO_IRQHandler+0x8>)
 8008c1e:	f7fb bd83 	b.w	8004728 <HAL_SD_IRQHandler>
 8008c22:	bf00      	nop
 8008c24:	20008bb4 	.word	0x20008bb4

08008c28 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <DMA2_Stream0_IRQHandler+0x8>)
 8008c2a:	f7fa bc53 	b.w	80034d4 <HAL_DMA_IRQHandler>
 8008c2e:	bf00      	nop
 8008c30:	20008ccc 	.word	0x20008ccc

08008c34 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8008c34:	4801      	ldr	r0, [pc, #4]	; (8008c3c <DMA2_Stream3_IRQHandler+0x8>)
 8008c36:	f7fa bc4d 	b.w	80034d4 <HAL_DMA_IRQHandler>
 8008c3a:	bf00      	nop
 8008c3c:	20008624 	.word	0x20008624

08008c40 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008c40:	4801      	ldr	r0, [pc, #4]	; (8008c48 <DMA2_Stream5_IRQHandler+0x8>)
 8008c42:	f7fa bc47 	b.w	80034d4 <HAL_DMA_IRQHandler>
 8008c46:	bf00      	nop
 8008c48:	20008d2c 	.word	0x20008d2c

08008c4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c4c:	490f      	ldr	r1, [pc, #60]	; (8008c8c <SystemInit+0x40>)
 8008c4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008c52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <SystemInit+0x44>)
 8008c5c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008c5e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8008c60:	f042 0201 	orr.w	r2, r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8008c66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008c6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008c74:	4a07      	ldr	r2, [pc, #28]	; (8008c94 <SystemInit+0x48>)
 8008c76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008c80:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008c82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c86:	608b      	str	r3, [r1, #8]
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	e000ed00 	.word	0xe000ed00
 8008c90:	40023800 	.word	0x40023800
 8008c94:	24003010 	.word	0x24003010

08008c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cd0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c9e:	e003      	b.n	8008ca8 <LoopCopyDataInit>

08008ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008ca0:	4b0c      	ldr	r3, [pc, #48]	; (8008cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008ca6:	3104      	adds	r1, #4

08008ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ca8:	480b      	ldr	r0, [pc, #44]	; (8008cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008caa:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008cb0:	d3f6      	bcc.n	8008ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8008cb2:	4a0b      	ldr	r2, [pc, #44]	; (8008ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008cb4:	e002      	b.n	8008cbc <LoopFillZerobss>

08008cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008cb8:	f842 3b04 	str.w	r3, [r2], #4

08008cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008cc0:	d3f9      	bcc.n	8008cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008cc2:	f7ff ffc3 	bl	8008c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cc6:	f000 f817 	bl	8008cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cca:	f7ff f9a5 	bl	8008018 <main>
  bx  lr    
 8008cce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008cd0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8008cd4:	08015728 	.word	0x08015728
  ldr  r0, =_sdata
 8008cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008cdc:	200085a0 	.word	0x200085a0
  ldr  r2, =_sbss
 8008ce0:	200085a0 	.word	0x200085a0
  ldr  r3, = _ebss
 8008ce4:	20008fb8 	.word	0x20008fb8

08008ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ce8:	e7fe      	b.n	8008ce8 <ADC_IRQHandler>
	...

08008cec <__errno>:
 8008cec:	4b01      	ldr	r3, [pc, #4]	; (8008cf4 <__errno+0x8>)
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20000000 	.word	0x20000000

08008cf8 <__libc_init_array>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4e0d      	ldr	r6, [pc, #52]	; (8008d30 <__libc_init_array+0x38>)
 8008cfc:	4c0d      	ldr	r4, [pc, #52]	; (8008d34 <__libc_init_array+0x3c>)
 8008cfe:	1ba4      	subs	r4, r4, r6
 8008d00:	10a4      	asrs	r4, r4, #2
 8008d02:	2500      	movs	r5, #0
 8008d04:	42a5      	cmp	r5, r4
 8008d06:	d109      	bne.n	8008d1c <__libc_init_array+0x24>
 8008d08:	4e0b      	ldr	r6, [pc, #44]	; (8008d38 <__libc_init_array+0x40>)
 8008d0a:	4c0c      	ldr	r4, [pc, #48]	; (8008d3c <__libc_init_array+0x44>)
 8008d0c:	f000 ff40 	bl	8009b90 <_init>
 8008d10:	1ba4      	subs	r4, r4, r6
 8008d12:	10a4      	asrs	r4, r4, #2
 8008d14:	2500      	movs	r5, #0
 8008d16:	42a5      	cmp	r5, r4
 8008d18:	d105      	bne.n	8008d26 <__libc_init_array+0x2e>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d20:	4798      	blx	r3
 8008d22:	3501      	adds	r5, #1
 8008d24:	e7ee      	b.n	8008d04 <__libc_init_array+0xc>
 8008d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d2a:	4798      	blx	r3
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	e7f2      	b.n	8008d16 <__libc_init_array+0x1e>
 8008d30:	08015720 	.word	0x08015720
 8008d34:	08015720 	.word	0x08015720
 8008d38:	08015720 	.word	0x08015720
 8008d3c:	08015724 	.word	0x08015724

08008d40 <siprintf>:
 8008d40:	b40e      	push	{r1, r2, r3}
 8008d42:	b500      	push	{lr}
 8008d44:	b09c      	sub	sp, #112	; 0x70
 8008d46:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008d4c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008d50:	9002      	str	r0, [sp, #8]
 8008d52:	9006      	str	r0, [sp, #24]
 8008d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d58:	480a      	ldr	r0, [pc, #40]	; (8008d84 <siprintf+0x44>)
 8008d5a:	9104      	str	r1, [sp, #16]
 8008d5c:	9107      	str	r1, [sp, #28]
 8008d5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	a902      	add	r1, sp, #8
 8008d70:	f000 f866 	bl	8008e40 <_svfiprintf_r>
 8008d74:	9b02      	ldr	r3, [sp, #8]
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	b01c      	add	sp, #112	; 0x70
 8008d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d80:	b003      	add	sp, #12
 8008d82:	4770      	bx	lr
 8008d84:	20000000 	.word	0x20000000

08008d88 <__ssputs_r>:
 8008d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	688e      	ldr	r6, [r1, #8]
 8008d8e:	429e      	cmp	r6, r3
 8008d90:	4682      	mov	sl, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	4691      	mov	r9, r2
 8008d96:	4698      	mov	r8, r3
 8008d98:	d835      	bhi.n	8008e06 <__ssputs_r+0x7e>
 8008d9a:	898a      	ldrh	r2, [r1, #12]
 8008d9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008da0:	d031      	beq.n	8008e06 <__ssputs_r+0x7e>
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	6909      	ldr	r1, [r1, #16]
 8008da6:	1a6f      	subs	r7, r5, r1
 8008da8:	6965      	ldr	r5, [r4, #20]
 8008daa:	2302      	movs	r3, #2
 8008dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008db0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008db4:	f108 0301 	add.w	r3, r8, #1
 8008db8:	443b      	add	r3, r7
 8008dba:	429d      	cmp	r5, r3
 8008dbc:	bf38      	it	cc
 8008dbe:	461d      	movcc	r5, r3
 8008dc0:	0553      	lsls	r3, r2, #21
 8008dc2:	d531      	bpl.n	8008e28 <__ssputs_r+0xa0>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f9 ff4f 	bl	8002c68 <_malloc_r>
 8008dca:	4606      	mov	r6, r0
 8008dcc:	b950      	cbnz	r0, 8008de4 <__ssputs_r+0x5c>
 8008dce:	230c      	movs	r3, #12
 8008dd0:	f8ca 3000 	str.w	r3, [sl]
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de4:	463a      	mov	r2, r7
 8008de6:	6921      	ldr	r1, [r4, #16]
 8008de8:	f7f9 fc06 	bl	80025f8 <memcpy>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	6126      	str	r6, [r4, #16]
 8008dfa:	6165      	str	r5, [r4, #20]
 8008dfc:	443e      	add	r6, r7
 8008dfe:	1bed      	subs	r5, r5, r7
 8008e00:	6026      	str	r6, [r4, #0]
 8008e02:	60a5      	str	r5, [r4, #8]
 8008e04:	4646      	mov	r6, r8
 8008e06:	4546      	cmp	r6, r8
 8008e08:	bf28      	it	cs
 8008e0a:	4646      	movcs	r6, r8
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	4649      	mov	r1, r9
 8008e10:	6820      	ldr	r0, [r4, #0]
 8008e12:	f000 f909 	bl	8009028 <memmove>
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	1b9b      	subs	r3, r3, r6
 8008e1a:	60a3      	str	r3, [r4, #8]
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	441e      	add	r6, r3
 8008e20:	6026      	str	r6, [r4, #0]
 8008e22:	2000      	movs	r0, #0
 8008e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e28:	462a      	mov	r2, r5
 8008e2a:	f000 f917 	bl	800905c <_realloc_r>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d1e1      	bne.n	8008df8 <__ssputs_r+0x70>
 8008e34:	6921      	ldr	r1, [r4, #16]
 8008e36:	4650      	mov	r0, sl
 8008e38:	f7f9 fec8 	bl	8002bcc <_free_r>
 8008e3c:	e7c7      	b.n	8008dce <__ssputs_r+0x46>
	...

08008e40 <_svfiprintf_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	b09d      	sub	sp, #116	; 0x74
 8008e46:	4680      	mov	r8, r0
 8008e48:	9303      	str	r3, [sp, #12]
 8008e4a:	898b      	ldrh	r3, [r1, #12]
 8008e4c:	061c      	lsls	r4, r3, #24
 8008e4e:	460d      	mov	r5, r1
 8008e50:	4616      	mov	r6, r2
 8008e52:	d50f      	bpl.n	8008e74 <_svfiprintf_r+0x34>
 8008e54:	690b      	ldr	r3, [r1, #16]
 8008e56:	b96b      	cbnz	r3, 8008e74 <_svfiprintf_r+0x34>
 8008e58:	2140      	movs	r1, #64	; 0x40
 8008e5a:	f7f9 ff05 	bl	8002c68 <_malloc_r>
 8008e5e:	6028      	str	r0, [r5, #0]
 8008e60:	6128      	str	r0, [r5, #16]
 8008e62:	b928      	cbnz	r0, 8008e70 <_svfiprintf_r+0x30>
 8008e64:	230c      	movs	r3, #12
 8008e66:	f8c8 3000 	str.w	r3, [r8]
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6e:	e0c5      	b.n	8008ffc <_svfiprintf_r+0x1bc>
 8008e70:	2340      	movs	r3, #64	; 0x40
 8008e72:	616b      	str	r3, [r5, #20]
 8008e74:	2300      	movs	r3, #0
 8008e76:	9309      	str	r3, [sp, #36]	; 0x24
 8008e78:	2320      	movs	r3, #32
 8008e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e7e:	2330      	movs	r3, #48	; 0x30
 8008e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e84:	f04f 0b01 	mov.w	fp, #1
 8008e88:	4637      	mov	r7, r6
 8008e8a:	463c      	mov	r4, r7
 8008e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d13c      	bne.n	8008f0e <_svfiprintf_r+0xce>
 8008e94:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e98:	d00b      	beq.n	8008eb2 <_svfiprintf_r+0x72>
 8008e9a:	4653      	mov	r3, sl
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	f7ff ff71 	bl	8008d88 <__ssputs_r>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	f000 80a3 	beq.w	8008ff2 <_svfiprintf_r+0x1b2>
 8008eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eae:	4453      	add	r3, sl
 8008eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb2:	783b      	ldrb	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 809c 	beq.w	8008ff2 <_svfiprintf_r+0x1b2>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec0:	9304      	str	r3, [sp, #16]
 8008ec2:	9307      	str	r3, [sp, #28]
 8008ec4:	9205      	str	r2, [sp, #20]
 8008ec6:	9306      	str	r3, [sp, #24]
 8008ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ece:	2205      	movs	r2, #5
 8008ed0:	7821      	ldrb	r1, [r4, #0]
 8008ed2:	4850      	ldr	r0, [pc, #320]	; (8009014 <_svfiprintf_r+0x1d4>)
 8008ed4:	f7f7 f994 	bl	8000200 <memchr>
 8008ed8:	1c67      	adds	r7, r4, #1
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	b9d8      	cbnz	r0, 8008f16 <_svfiprintf_r+0xd6>
 8008ede:	06d9      	lsls	r1, r3, #27
 8008ee0:	bf44      	itt	mi
 8008ee2:	2220      	movmi	r2, #32
 8008ee4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ee8:	071a      	lsls	r2, r3, #28
 8008eea:	bf44      	itt	mi
 8008eec:	222b      	movmi	r2, #43	; 0x2b
 8008eee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ef2:	7822      	ldrb	r2, [r4, #0]
 8008ef4:	2a2a      	cmp	r2, #42	; 0x2a
 8008ef6:	d016      	beq.n	8008f26 <_svfiprintf_r+0xe6>
 8008ef8:	9a07      	ldr	r2, [sp, #28]
 8008efa:	2100      	movs	r1, #0
 8008efc:	200a      	movs	r0, #10
 8008efe:	4627      	mov	r7, r4
 8008f00:	3401      	adds	r4, #1
 8008f02:	783b      	ldrb	r3, [r7, #0]
 8008f04:	3b30      	subs	r3, #48	; 0x30
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d951      	bls.n	8008fae <_svfiprintf_r+0x16e>
 8008f0a:	b1c9      	cbz	r1, 8008f40 <_svfiprintf_r+0x100>
 8008f0c:	e011      	b.n	8008f32 <_svfiprintf_r+0xf2>
 8008f0e:	2b25      	cmp	r3, #37	; 0x25
 8008f10:	d0c0      	beq.n	8008e94 <_svfiprintf_r+0x54>
 8008f12:	4627      	mov	r7, r4
 8008f14:	e7b9      	b.n	8008e8a <_svfiprintf_r+0x4a>
 8008f16:	4a3f      	ldr	r2, [pc, #252]	; (8009014 <_svfiprintf_r+0x1d4>)
 8008f18:	1a80      	subs	r0, r0, r2
 8008f1a:	fa0b f000 	lsl.w	r0, fp, r0
 8008f1e:	4318      	orrs	r0, r3
 8008f20:	9004      	str	r0, [sp, #16]
 8008f22:	463c      	mov	r4, r7
 8008f24:	e7d3      	b.n	8008ece <_svfiprintf_r+0x8e>
 8008f26:	9a03      	ldr	r2, [sp, #12]
 8008f28:	1d11      	adds	r1, r2, #4
 8008f2a:	6812      	ldr	r2, [r2, #0]
 8008f2c:	9103      	str	r1, [sp, #12]
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	db01      	blt.n	8008f36 <_svfiprintf_r+0xf6>
 8008f32:	9207      	str	r2, [sp, #28]
 8008f34:	e004      	b.n	8008f40 <_svfiprintf_r+0x100>
 8008f36:	4252      	negs	r2, r2
 8008f38:	f043 0302 	orr.w	r3, r3, #2
 8008f3c:	9207      	str	r2, [sp, #28]
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	783b      	ldrb	r3, [r7, #0]
 8008f42:	2b2e      	cmp	r3, #46	; 0x2e
 8008f44:	d10e      	bne.n	8008f64 <_svfiprintf_r+0x124>
 8008f46:	787b      	ldrb	r3, [r7, #1]
 8008f48:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4a:	f107 0101 	add.w	r1, r7, #1
 8008f4e:	d132      	bne.n	8008fb6 <_svfiprintf_r+0x176>
 8008f50:	9b03      	ldr	r3, [sp, #12]
 8008f52:	1d1a      	adds	r2, r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	9203      	str	r2, [sp, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bfb8      	it	lt
 8008f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f60:	3702      	adds	r7, #2
 8008f62:	9305      	str	r3, [sp, #20]
 8008f64:	4c2c      	ldr	r4, [pc, #176]	; (8009018 <_svfiprintf_r+0x1d8>)
 8008f66:	7839      	ldrb	r1, [r7, #0]
 8008f68:	2203      	movs	r2, #3
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7f7 f948 	bl	8000200 <memchr>
 8008f70:	b138      	cbz	r0, 8008f82 <_svfiprintf_r+0x142>
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	1b00      	subs	r0, r0, r4
 8008f76:	fa03 f000 	lsl.w	r0, r3, r0
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	4303      	orrs	r3, r0
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	3701      	adds	r7, #1
 8008f82:	7839      	ldrb	r1, [r7, #0]
 8008f84:	4825      	ldr	r0, [pc, #148]	; (800901c <_svfiprintf_r+0x1dc>)
 8008f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8a:	2206      	movs	r2, #6
 8008f8c:	1c7e      	adds	r6, r7, #1
 8008f8e:	f7f7 f937 	bl	8000200 <memchr>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d035      	beq.n	8009002 <_svfiprintf_r+0x1c2>
 8008f96:	4b22      	ldr	r3, [pc, #136]	; (8009020 <_svfiprintf_r+0x1e0>)
 8008f98:	b9fb      	cbnz	r3, 8008fda <_svfiprintf_r+0x19a>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	3307      	adds	r3, #7
 8008f9e:	f023 0307 	bic.w	r3, r3, #7
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	9303      	str	r3, [sp, #12]
 8008fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa8:	444b      	add	r3, r9
 8008faa:	9309      	str	r3, [sp, #36]	; 0x24
 8008fac:	e76c      	b.n	8008e88 <_svfiprintf_r+0x48>
 8008fae:	fb00 3202 	mla	r2, r0, r2, r3
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	e7a3      	b.n	8008efe <_svfiprintf_r+0xbe>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9305      	str	r3, [sp, #20]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	240a      	movs	r4, #10
 8008fbe:	460f      	mov	r7, r1
 8008fc0:	3101      	adds	r1, #1
 8008fc2:	783a      	ldrb	r2, [r7, #0]
 8008fc4:	3a30      	subs	r2, #48	; 0x30
 8008fc6:	2a09      	cmp	r2, #9
 8008fc8:	d903      	bls.n	8008fd2 <_svfiprintf_r+0x192>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0ca      	beq.n	8008f64 <_svfiprintf_r+0x124>
 8008fce:	9005      	str	r0, [sp, #20]
 8008fd0:	e7c8      	b.n	8008f64 <_svfiprintf_r+0x124>
 8008fd2:	fb04 2000 	mla	r0, r4, r0, r2
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e7f1      	b.n	8008fbe <_svfiprintf_r+0x17e>
 8008fda:	ab03      	add	r3, sp, #12
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	462a      	mov	r2, r5
 8008fe0:	4b10      	ldr	r3, [pc, #64]	; (8009024 <_svfiprintf_r+0x1e4>)
 8008fe2:	a904      	add	r1, sp, #16
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	f7f8 f8b9 	bl	800115c <_printf_float>
 8008fea:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fee:	4681      	mov	r9, r0
 8008ff0:	d1d9      	bne.n	8008fa6 <_svfiprintf_r+0x166>
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	065b      	lsls	r3, r3, #25
 8008ff6:	f53f af38 	bmi.w	8008e6a <_svfiprintf_r+0x2a>
 8008ffa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ffc:	b01d      	add	sp, #116	; 0x74
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	ab03      	add	r3, sp, #12
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	462a      	mov	r2, r5
 8009008:	4b06      	ldr	r3, [pc, #24]	; (8009024 <_svfiprintf_r+0x1e4>)
 800900a:	a904      	add	r1, sp, #16
 800900c:	4640      	mov	r0, r8
 800900e:	f7f8 fb5b 	bl	80016c8 <_printf_i>
 8009012:	e7ea      	b.n	8008fea <_svfiprintf_r+0x1aa>
 8009014:	080156c4 	.word	0x080156c4
 8009018:	080156ca 	.word	0x080156ca
 800901c:	080156ce 	.word	0x080156ce
 8009020:	0800115d 	.word	0x0800115d
 8009024:	08008d89 	.word	0x08008d89

08009028 <memmove>:
 8009028:	4288      	cmp	r0, r1
 800902a:	b510      	push	{r4, lr}
 800902c:	eb01 0302 	add.w	r3, r1, r2
 8009030:	d803      	bhi.n	800903a <memmove+0x12>
 8009032:	1e42      	subs	r2, r0, #1
 8009034:	4299      	cmp	r1, r3
 8009036:	d10c      	bne.n	8009052 <memmove+0x2a>
 8009038:	bd10      	pop	{r4, pc}
 800903a:	4298      	cmp	r0, r3
 800903c:	d2f9      	bcs.n	8009032 <memmove+0xa>
 800903e:	1881      	adds	r1, r0, r2
 8009040:	1ad2      	subs	r2, r2, r3
 8009042:	42d3      	cmn	r3, r2
 8009044:	d100      	bne.n	8009048 <memmove+0x20>
 8009046:	bd10      	pop	{r4, pc}
 8009048:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800904c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009050:	e7f7      	b.n	8009042 <memmove+0x1a>
 8009052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009056:	f802 4f01 	strb.w	r4, [r2, #1]!
 800905a:	e7eb      	b.n	8009034 <memmove+0xc>

0800905c <_realloc_r>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	4607      	mov	r7, r0
 8009060:	4614      	mov	r4, r2
 8009062:	460e      	mov	r6, r1
 8009064:	b921      	cbnz	r1, 8009070 <_realloc_r+0x14>
 8009066:	4611      	mov	r1, r2
 8009068:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800906c:	f7f9 bdfc 	b.w	8002c68 <_malloc_r>
 8009070:	b922      	cbnz	r2, 800907c <_realloc_r+0x20>
 8009072:	f7f9 fdab 	bl	8002bcc <_free_r>
 8009076:	4625      	mov	r5, r4
 8009078:	4628      	mov	r0, r5
 800907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907c:	f000 f814 	bl	80090a8 <_malloc_usable_size_r>
 8009080:	4284      	cmp	r4, r0
 8009082:	d90f      	bls.n	80090a4 <_realloc_r+0x48>
 8009084:	4621      	mov	r1, r4
 8009086:	4638      	mov	r0, r7
 8009088:	f7f9 fdee 	bl	8002c68 <_malloc_r>
 800908c:	4605      	mov	r5, r0
 800908e:	2800      	cmp	r0, #0
 8009090:	d0f2      	beq.n	8009078 <_realloc_r+0x1c>
 8009092:	4631      	mov	r1, r6
 8009094:	4622      	mov	r2, r4
 8009096:	f7f9 faaf 	bl	80025f8 <memcpy>
 800909a:	4631      	mov	r1, r6
 800909c:	4638      	mov	r0, r7
 800909e:	f7f9 fd95 	bl	8002bcc <_free_r>
 80090a2:	e7e9      	b.n	8009078 <_realloc_r+0x1c>
 80090a4:	4635      	mov	r5, r6
 80090a6:	e7e7      	b.n	8009078 <_realloc_r+0x1c>

080090a8 <_malloc_usable_size_r>:
 80090a8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f1a0 0004 	sub.w	r0, r0, #4
 80090b2:	bfbc      	itt	lt
 80090b4:	580b      	ldrlt	r3, [r1, r0]
 80090b6:	18c0      	addlt	r0, r0, r3
 80090b8:	4770      	bx	lr
 80090ba:	0000      	movs	r0, r0
 80090bc:	0000      	movs	r0, r0
	...

080090c0 <exp>:
 80090c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c2:	ed2d 8b02 	vpush	{d8}
 80090c6:	4e38      	ldr	r6, [pc, #224]	; (80091a8 <exp+0xe8>)
 80090c8:	b08b      	sub	sp, #44	; 0x2c
 80090ca:	ec55 4b10 	vmov	r4, r5, d0
 80090ce:	f000 f973 	bl	80093b8 <__ieee754_exp>
 80090d2:	f996 3000 	ldrsb.w	r3, [r6]
 80090d6:	eeb0 8a40 	vmov.f32	s16, s0
 80090da:	eef0 8a60 	vmov.f32	s17, s1
 80090de:	3301      	adds	r3, #1
 80090e0:	d02c      	beq.n	800913c <exp+0x7c>
 80090e2:	ec45 4b10 	vmov	d0, r4, r5
 80090e6:	f000 fd41 	bl	8009b6c <finite>
 80090ea:	b338      	cbz	r0, 800913c <exp+0x7c>
 80090ec:	a32a      	add	r3, pc, #168	; (adr r3, 8009198 <exp+0xd8>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	f7f7 fd7b 	bl	8000bf0 <__aeabi_dcmpgt>
 80090fa:	4607      	mov	r7, r0
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d030      	beq.n	8009162 <exp+0xa2>
 8009100:	2303      	movs	r3, #3
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	4b29      	ldr	r3, [pc, #164]	; (80091ac <exp+0xec>)
 8009106:	9301      	str	r3, [sp, #4]
 8009108:	2300      	movs	r3, #0
 800910a:	9308      	str	r3, [sp, #32]
 800910c:	f996 3000 	ldrsb.w	r3, [r6]
 8009110:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009114:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009118:	b9c3      	cbnz	r3, 800914c <exp+0x8c>
 800911a:	4b25      	ldr	r3, [pc, #148]	; (80091b0 <exp+0xf0>)
 800911c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009120:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009124:	4668      	mov	r0, sp
 8009126:	f000 fd29 	bl	8009b7c <matherr>
 800912a:	b1a8      	cbz	r0, 8009158 <exp+0x98>
 800912c:	9b08      	ldr	r3, [sp, #32]
 800912e:	b11b      	cbz	r3, 8009138 <exp+0x78>
 8009130:	f7ff fddc 	bl	8008cec <__errno>
 8009134:	9b08      	ldr	r3, [sp, #32]
 8009136:	6003      	str	r3, [r0, #0]
 8009138:	ed9d 8b06 	vldr	d8, [sp, #24]
 800913c:	eeb0 0a48 	vmov.f32	s0, s16
 8009140:	eef0 0a68 	vmov.f32	s1, s17
 8009144:	b00b      	add	sp, #44	; 0x2c
 8009146:	ecbd 8b02 	vpop	{d8}
 800914a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914c:	4919      	ldr	r1, [pc, #100]	; (80091b4 <exp+0xf4>)
 800914e:	2000      	movs	r0, #0
 8009150:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d1e5      	bne.n	8009124 <exp+0x64>
 8009158:	f7ff fdc8 	bl	8008cec <__errno>
 800915c:	2322      	movs	r3, #34	; 0x22
 800915e:	6003      	str	r3, [r0, #0]
 8009160:	e7e4      	b.n	800912c <exp+0x6c>
 8009162:	a30f      	add	r3, pc, #60	; (adr r3, 80091a0 <exp+0xe0>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	4620      	mov	r0, r4
 800916a:	4629      	mov	r1, r5
 800916c:	f7f7 fd22 	bl	8000bb4 <__aeabi_dcmplt>
 8009170:	2800      	cmp	r0, #0
 8009172:	d0e3      	beq.n	800913c <exp+0x7c>
 8009174:	2304      	movs	r3, #4
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <exp+0xec>)
 800917a:	9301      	str	r3, [sp, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	2300      	movs	r3, #0
 8009180:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009184:	9708      	str	r7, [sp, #32]
 8009186:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800918a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800918e:	f996 3000 	ldrsb.w	r3, [r6]
 8009192:	e7df      	b.n	8009154 <exp+0x94>
 8009194:	f3af 8000 	nop.w
 8009198:	fefa39ef 	.word	0xfefa39ef
 800919c:	40862e42 	.word	0x40862e42
 80091a0:	d52d3051 	.word	0xd52d3051
 80091a4:	c0874910 	.word	0xc0874910
 80091a8:	2000859c 	.word	0x2000859c
 80091ac:	080156d5 	.word	0x080156d5
 80091b0:	47efffff 	.word	0x47efffff
 80091b4:	7ff00000 	.word	0x7ff00000

080091b8 <log>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	ed2d 8b02 	vpush	{d8}
 80091be:	b08a      	sub	sp, #40	; 0x28
 80091c0:	ec55 4b10 	vmov	r4, r5, d0
 80091c4:	f000 fa6c 	bl	80096a0 <__ieee754_log>
 80091c8:	4b36      	ldr	r3, [pc, #216]	; (80092a4 <log+0xec>)
 80091ca:	eeb0 8a40 	vmov.f32	s16, s0
 80091ce:	eef0 8a60 	vmov.f32	s17, s1
 80091d2:	f993 6000 	ldrsb.w	r6, [r3]
 80091d6:	1c73      	adds	r3, r6, #1
 80091d8:	d05b      	beq.n	8009292 <log+0xda>
 80091da:	4622      	mov	r2, r4
 80091dc:	462b      	mov	r3, r5
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7f7 fd0f 	bl	8000c04 <__aeabi_dcmpun>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d153      	bne.n	8009292 <log+0xda>
 80091ea:	2200      	movs	r2, #0
 80091ec:	2300      	movs	r3, #0
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	f7f7 fcfd 	bl	8000bf0 <__aeabi_dcmpgt>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d14b      	bne.n	8009292 <log+0xda>
 80091fa:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <log+0xf0>)
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	9008      	str	r0, [sp, #32]
 8009200:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009204:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009208:	b9a6      	cbnz	r6, 8009234 <log+0x7c>
 800920a:	4b28      	ldr	r3, [pc, #160]	; (80092ac <log+0xf4>)
 800920c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009210:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009214:	4620      	mov	r0, r4
 8009216:	2200      	movs	r2, #0
 8009218:	2300      	movs	r3, #0
 800921a:	4629      	mov	r1, r5
 800921c:	f7f7 fcc0 	bl	8000ba0 <__aeabi_dcmpeq>
 8009220:	bb40      	cbnz	r0, 8009274 <log+0xbc>
 8009222:	2301      	movs	r3, #1
 8009224:	2e02      	cmp	r6, #2
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	d119      	bne.n	800925e <log+0xa6>
 800922a:	f7ff fd5f 	bl	8008cec <__errno>
 800922e:	2321      	movs	r3, #33	; 0x21
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	e019      	b.n	8009268 <log+0xb0>
 8009234:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <log+0xf8>)
 8009236:	2200      	movs	r2, #0
 8009238:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800923c:	4620      	mov	r0, r4
 800923e:	2200      	movs	r2, #0
 8009240:	2300      	movs	r3, #0
 8009242:	4629      	mov	r1, r5
 8009244:	f7f7 fcac 	bl	8000ba0 <__aeabi_dcmpeq>
 8009248:	2800      	cmp	r0, #0
 800924a:	d0ea      	beq.n	8009222 <log+0x6a>
 800924c:	2302      	movs	r3, #2
 800924e:	429e      	cmp	r6, r3
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	d111      	bne.n	8009278 <log+0xc0>
 8009254:	f7ff fd4a 	bl	8008cec <__errno>
 8009258:	2322      	movs	r3, #34	; 0x22
 800925a:	6003      	str	r3, [r0, #0]
 800925c:	e011      	b.n	8009282 <log+0xca>
 800925e:	4668      	mov	r0, sp
 8009260:	f000 fc8c 	bl	8009b7c <matherr>
 8009264:	2800      	cmp	r0, #0
 8009266:	d0e0      	beq.n	800922a <log+0x72>
 8009268:	4812      	ldr	r0, [pc, #72]	; (80092b4 <log+0xfc>)
 800926a:	f000 fc89 	bl	8009b80 <nan>
 800926e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009272:	e006      	b.n	8009282 <log+0xca>
 8009274:	2302      	movs	r3, #2
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4668      	mov	r0, sp
 800927a:	f000 fc7f 	bl	8009b7c <matherr>
 800927e:	2800      	cmp	r0, #0
 8009280:	d0e8      	beq.n	8009254 <log+0x9c>
 8009282:	9b08      	ldr	r3, [sp, #32]
 8009284:	b11b      	cbz	r3, 800928e <log+0xd6>
 8009286:	f7ff fd31 	bl	8008cec <__errno>
 800928a:	9b08      	ldr	r3, [sp, #32]
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009292:	eeb0 0a48 	vmov.f32	s0, s16
 8009296:	eef0 0a68 	vmov.f32	s1, s17
 800929a:	b00a      	add	sp, #40	; 0x28
 800929c:	ecbd 8b02 	vpop	{d8}
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	bf00      	nop
 80092a4:	2000859c 	.word	0x2000859c
 80092a8:	080156d9 	.word	0x080156d9
 80092ac:	c7efffff 	.word	0xc7efffff
 80092b0:	fff00000 	.word	0xfff00000
 80092b4:	0801558b 	.word	0x0801558b

080092b8 <log10>:
 80092b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ba:	ed2d 8b02 	vpush	{d8}
 80092be:	b08b      	sub	sp, #44	; 0x2c
 80092c0:	ec55 4b10 	vmov	r4, r5, d0
 80092c4:	f000 fbc4 	bl	8009a50 <__ieee754_log10>
 80092c8:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <log10+0xec>)
 80092ca:	eeb0 8a40 	vmov.f32	s16, s0
 80092ce:	eef0 8a60 	vmov.f32	s17, s1
 80092d2:	f993 6000 	ldrsb.w	r6, [r3]
 80092d6:	1c73      	adds	r3, r6, #1
 80092d8:	d05c      	beq.n	8009394 <log10+0xdc>
 80092da:	4622      	mov	r2, r4
 80092dc:	462b      	mov	r3, r5
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f7 fc8f 	bl	8000c04 <__aeabi_dcmpun>
 80092e6:	4607      	mov	r7, r0
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d153      	bne.n	8009394 <log10+0xdc>
 80092ec:	2200      	movs	r2, #0
 80092ee:	2300      	movs	r3, #0
 80092f0:	4620      	mov	r0, r4
 80092f2:	4629      	mov	r1, r5
 80092f4:	f7f7 fc68 	bl	8000bc8 <__aeabi_dcmple>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d04b      	beq.n	8009394 <log10+0xdc>
 80092fc:	4b2a      	ldr	r3, [pc, #168]	; (80093a8 <log10+0xf0>)
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	9708      	str	r7, [sp, #32]
 8009302:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009306:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800930a:	b9a6      	cbnz	r6, 8009336 <log10+0x7e>
 800930c:	4b27      	ldr	r3, [pc, #156]	; (80093ac <log10+0xf4>)
 800930e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009316:	4620      	mov	r0, r4
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	4629      	mov	r1, r5
 800931e:	f7f7 fc3f 	bl	8000ba0 <__aeabi_dcmpeq>
 8009322:	bb40      	cbnz	r0, 8009376 <log10+0xbe>
 8009324:	2301      	movs	r3, #1
 8009326:	2e02      	cmp	r6, #2
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	d119      	bne.n	8009360 <log10+0xa8>
 800932c:	f7ff fcde 	bl	8008cec <__errno>
 8009330:	2321      	movs	r3, #33	; 0x21
 8009332:	6003      	str	r3, [r0, #0]
 8009334:	e019      	b.n	800936a <log10+0xb2>
 8009336:	4b1e      	ldr	r3, [pc, #120]	; (80093b0 <log10+0xf8>)
 8009338:	2200      	movs	r2, #0
 800933a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800933e:	4620      	mov	r0, r4
 8009340:	2200      	movs	r2, #0
 8009342:	2300      	movs	r3, #0
 8009344:	4629      	mov	r1, r5
 8009346:	f7f7 fc2b 	bl	8000ba0 <__aeabi_dcmpeq>
 800934a:	2800      	cmp	r0, #0
 800934c:	d0ea      	beq.n	8009324 <log10+0x6c>
 800934e:	2302      	movs	r3, #2
 8009350:	429e      	cmp	r6, r3
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	d111      	bne.n	800937a <log10+0xc2>
 8009356:	f7ff fcc9 	bl	8008cec <__errno>
 800935a:	2322      	movs	r3, #34	; 0x22
 800935c:	6003      	str	r3, [r0, #0]
 800935e:	e011      	b.n	8009384 <log10+0xcc>
 8009360:	4668      	mov	r0, sp
 8009362:	f000 fc0b 	bl	8009b7c <matherr>
 8009366:	2800      	cmp	r0, #0
 8009368:	d0e0      	beq.n	800932c <log10+0x74>
 800936a:	4812      	ldr	r0, [pc, #72]	; (80093b4 <log10+0xfc>)
 800936c:	f000 fc08 	bl	8009b80 <nan>
 8009370:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009374:	e006      	b.n	8009384 <log10+0xcc>
 8009376:	2302      	movs	r3, #2
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	4668      	mov	r0, sp
 800937c:	f000 fbfe 	bl	8009b7c <matherr>
 8009380:	2800      	cmp	r0, #0
 8009382:	d0e8      	beq.n	8009356 <log10+0x9e>
 8009384:	9b08      	ldr	r3, [sp, #32]
 8009386:	b11b      	cbz	r3, 8009390 <log10+0xd8>
 8009388:	f7ff fcb0 	bl	8008cec <__errno>
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	6003      	str	r3, [r0, #0]
 8009390:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009394:	eeb0 0a48 	vmov.f32	s0, s16
 8009398:	eef0 0a68 	vmov.f32	s1, s17
 800939c:	b00b      	add	sp, #44	; 0x2c
 800939e:	ecbd 8b02 	vpop	{d8}
 80093a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a4:	2000859c 	.word	0x2000859c
 80093a8:	080156dd 	.word	0x080156dd
 80093ac:	c7efffff 	.word	0xc7efffff
 80093b0:	fff00000 	.word	0xfff00000
 80093b4:	0801558b 	.word	0x0801558b

080093b8 <__ieee754_exp>:
 80093b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	ec55 4b10 	vmov	r4, r5, d0
 80093c0:	4aad      	ldr	r2, [pc, #692]	; (8009678 <__ieee754_exp+0x2c0>)
 80093c2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80093c6:	4297      	cmp	r7, r2
 80093c8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80093cc:	f240 80af 	bls.w	800952e <__ieee754_exp+0x176>
 80093d0:	4aaa      	ldr	r2, [pc, #680]	; (800967c <__ieee754_exp+0x2c4>)
 80093d2:	4297      	cmp	r7, r2
 80093d4:	d915      	bls.n	8009402 <__ieee754_exp+0x4a>
 80093d6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80093da:	4323      	orrs	r3, r4
 80093dc:	d009      	beq.n	80093f2 <__ieee754_exp+0x3a>
 80093de:	ee10 2a10 	vmov	r2, s0
 80093e2:	462b      	mov	r3, r5
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f6 ffc0 	bl	800036c <__adddf3>
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	e002      	b.n	80093f8 <__ieee754_exp+0x40>
 80093f2:	b10e      	cbz	r6, 80093f8 <__ieee754_exp+0x40>
 80093f4:	2400      	movs	r4, #0
 80093f6:	2500      	movs	r5, #0
 80093f8:	ec45 4b10 	vmov	d0, r4, r5
 80093fc:	b003      	add	sp, #12
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	a387      	add	r3, pc, #540	; (adr r3, 8009620 <__ieee754_exp+0x268>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	ee10 0a10 	vmov	r0, s0
 800940c:	4629      	mov	r1, r5
 800940e:	f7f7 fbef 	bl	8000bf0 <__aeabi_dcmpgt>
 8009412:	b138      	cbz	r0, 8009424 <__ieee754_exp+0x6c>
 8009414:	a384      	add	r3, pc, #528	; (adr r3, 8009628 <__ieee754_exp+0x270>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	4610      	mov	r0, r2
 800941c:	4619      	mov	r1, r3
 800941e:	f7f7 f957 	bl	80006d0 <__aeabi_dmul>
 8009422:	e7e3      	b.n	80093ec <__ieee754_exp+0x34>
 8009424:	a382      	add	r3, pc, #520	; (adr r3, 8009630 <__ieee754_exp+0x278>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	f7f7 fbc1 	bl	8000bb4 <__aeabi_dcmplt>
 8009432:	2800      	cmp	r0, #0
 8009434:	d1de      	bne.n	80093f4 <__ieee754_exp+0x3c>
 8009436:	4b92      	ldr	r3, [pc, #584]	; (8009680 <__ieee754_exp+0x2c8>)
 8009438:	429f      	cmp	r7, r3
 800943a:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 800943e:	f200 808e 	bhi.w	800955e <__ieee754_exp+0x1a6>
 8009442:	4b90      	ldr	r3, [pc, #576]	; (8009684 <__ieee754_exp+0x2cc>)
 8009444:	443b      	add	r3, r7
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	4620      	mov	r0, r4
 800944c:	4629      	mov	r1, r5
 800944e:	f7f6 ff8b 	bl	8000368 <__aeabi_dsub>
 8009452:	4b8d      	ldr	r3, [pc, #564]	; (8009688 <__ieee754_exp+0x2d0>)
 8009454:	441f      	add	r7, r3
 8009456:	ed97 7b00 	vldr	d7, [r7]
 800945a:	ed8d 7b00 	vstr	d7, [sp]
 800945e:	4682      	mov	sl, r0
 8009460:	f1c6 0001 	rsb	r0, r6, #1
 8009464:	468b      	mov	fp, r1
 8009466:	1b86      	subs	r6, r0, r6
 8009468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800946c:	4650      	mov	r0, sl
 800946e:	4659      	mov	r1, fp
 8009470:	f7f6 ff7a 	bl	8000368 <__aeabi_dsub>
 8009474:	4604      	mov	r4, r0
 8009476:	460d      	mov	r5, r1
 8009478:	4622      	mov	r2, r4
 800947a:	462b      	mov	r3, r5
 800947c:	4620      	mov	r0, r4
 800947e:	4629      	mov	r1, r5
 8009480:	f7f7 f926 	bl	80006d0 <__aeabi_dmul>
 8009484:	a36c      	add	r3, pc, #432	; (adr r3, 8009638 <__ieee754_exp+0x280>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	4680      	mov	r8, r0
 800948c:	4689      	mov	r9, r1
 800948e:	f7f7 f91f 	bl	80006d0 <__aeabi_dmul>
 8009492:	a36b      	add	r3, pc, #428	; (adr r3, 8009640 <__ieee754_exp+0x288>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f6 ff66 	bl	8000368 <__aeabi_dsub>
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	f7f7 f916 	bl	80006d0 <__aeabi_dmul>
 80094a4:	a368      	add	r3, pc, #416	; (adr r3, 8009648 <__ieee754_exp+0x290>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f6 ff5f 	bl	800036c <__adddf3>
 80094ae:	4642      	mov	r2, r8
 80094b0:	464b      	mov	r3, r9
 80094b2:	f7f7 f90d 	bl	80006d0 <__aeabi_dmul>
 80094b6:	a366      	add	r3, pc, #408	; (adr r3, 8009650 <__ieee754_exp+0x298>)
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f7f6 ff54 	bl	8000368 <__aeabi_dsub>
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	f7f7 f904 	bl	80006d0 <__aeabi_dmul>
 80094c8:	a363      	add	r3, pc, #396	; (adr r3, 8009658 <__ieee754_exp+0x2a0>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f6 ff4d 	bl	800036c <__adddf3>
 80094d2:	4642      	mov	r2, r8
 80094d4:	464b      	mov	r3, r9
 80094d6:	f7f7 f8fb 	bl	80006d0 <__aeabi_dmul>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4620      	mov	r0, r4
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7f6 ff41 	bl	8000368 <__aeabi_dsub>
 80094e6:	4680      	mov	r8, r0
 80094e8:	4689      	mov	r9, r1
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4620      	mov	r0, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	2e00      	cmp	r6, #0
 80094f4:	d162      	bne.n	80095bc <__ieee754_exp+0x204>
 80094f6:	f7f7 f8eb 	bl	80006d0 <__aeabi_dmul>
 80094fa:	2200      	movs	r2, #0
 80094fc:	4606      	mov	r6, r0
 80094fe:	460f      	mov	r7, r1
 8009500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009504:	4640      	mov	r0, r8
 8009506:	4649      	mov	r1, r9
 8009508:	f7f6 ff2e 	bl	8000368 <__aeabi_dsub>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4630      	mov	r0, r6
 8009512:	4639      	mov	r1, r7
 8009514:	f7f7 fa06 	bl	8000924 <__aeabi_ddiv>
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	f7f6 ff24 	bl	8000368 <__aeabi_dsub>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	2000      	movs	r0, #0
 8009526:	4959      	ldr	r1, [pc, #356]	; (800968c <__ieee754_exp+0x2d4>)
 8009528:	f7f6 ff1e 	bl	8000368 <__aeabi_dsub>
 800952c:	e75e      	b.n	80093ec <__ieee754_exp+0x34>
 800952e:	4b58      	ldr	r3, [pc, #352]	; (8009690 <__ieee754_exp+0x2d8>)
 8009530:	429f      	cmp	r7, r3
 8009532:	d880      	bhi.n	8009436 <__ieee754_exp+0x7e>
 8009534:	4b57      	ldr	r3, [pc, #348]	; (8009694 <__ieee754_exp+0x2dc>)
 8009536:	429f      	cmp	r7, r3
 8009538:	d83c      	bhi.n	80095b4 <__ieee754_exp+0x1fc>
 800953a:	a33b      	add	r3, pc, #236	; (adr r3, 8009628 <__ieee754_exp+0x270>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	ee10 0a10 	vmov	r0, s0
 8009544:	4629      	mov	r1, r5
 8009546:	f7f6 ff11 	bl	800036c <__adddf3>
 800954a:	2200      	movs	r2, #0
 800954c:	4b4f      	ldr	r3, [pc, #316]	; (800968c <__ieee754_exp+0x2d4>)
 800954e:	f7f7 fb4f 	bl	8000bf0 <__aeabi_dcmpgt>
 8009552:	b388      	cbz	r0, 80095b8 <__ieee754_exp+0x200>
 8009554:	2200      	movs	r2, #0
 8009556:	4b4d      	ldr	r3, [pc, #308]	; (800968c <__ieee754_exp+0x2d4>)
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	e744      	b.n	80093e8 <__ieee754_exp+0x30>
 800955e:	4e4e      	ldr	r6, [pc, #312]	; (8009698 <__ieee754_exp+0x2e0>)
 8009560:	a33f      	add	r3, pc, #252	; (adr r3, 8009660 <__ieee754_exp+0x2a8>)
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	443e      	add	r6, r7
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f7 f8b0 	bl	80006d0 <__aeabi_dmul>
 8009570:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009574:	f7f6 fefa 	bl	800036c <__adddf3>
 8009578:	f7f7 fb5a 	bl	8000c30 <__aeabi_d2iz>
 800957c:	4606      	mov	r6, r0
 800957e:	f7f7 f841 	bl	8000604 <__aeabi_i2d>
 8009582:	a339      	add	r3, pc, #228	; (adr r3, 8009668 <__ieee754_exp+0x2b0>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	4680      	mov	r8, r0
 800958a:	4689      	mov	r9, r1
 800958c:	f7f7 f8a0 	bl	80006d0 <__aeabi_dmul>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 fee6 	bl	8000368 <__aeabi_dsub>
 800959c:	a334      	add	r3, pc, #208	; (adr r3, 8009670 <__ieee754_exp+0x2b8>)
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	4682      	mov	sl, r0
 80095a4:	468b      	mov	fp, r1
 80095a6:	4640      	mov	r0, r8
 80095a8:	4649      	mov	r1, r9
 80095aa:	f7f7 f891 	bl	80006d0 <__aeabi_dmul>
 80095ae:	e9cd 0100 	strd	r0, r1, [sp]
 80095b2:	e759      	b.n	8009468 <__ieee754_exp+0xb0>
 80095b4:	2600      	movs	r6, #0
 80095b6:	e75f      	b.n	8009478 <__ieee754_exp+0xc0>
 80095b8:	4606      	mov	r6, r0
 80095ba:	e75d      	b.n	8009478 <__ieee754_exp+0xc0>
 80095bc:	f7f7 f888 	bl	80006d0 <__aeabi_dmul>
 80095c0:	4642      	mov	r2, r8
 80095c2:	4604      	mov	r4, r0
 80095c4:	460d      	mov	r5, r1
 80095c6:	464b      	mov	r3, r9
 80095c8:	2000      	movs	r0, #0
 80095ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80095ce:	f7f6 fecb 	bl	8000368 <__aeabi_dsub>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 f9a3 	bl	8000924 <__aeabi_ddiv>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095e6:	f7f6 febf 	bl	8000368 <__aeabi_dsub>
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f7f6 febb 	bl	8000368 <__aeabi_dsub>
 80095f2:	460b      	mov	r3, r1
 80095f4:	4602      	mov	r2, r0
 80095f6:	4925      	ldr	r1, [pc, #148]	; (800968c <__ieee754_exp+0x2d4>)
 80095f8:	2000      	movs	r0, #0
 80095fa:	f7f6 feb5 	bl	8000368 <__aeabi_dsub>
 80095fe:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8009602:	429e      	cmp	r6, r3
 8009604:	db02      	blt.n	800960c <__ieee754_exp+0x254>
 8009606:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 800960a:	e6ef      	b.n	80093ec <__ieee754_exp+0x34>
 800960c:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8009610:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8009614:	2200      	movs	r2, #0
 8009616:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800961a:	e700      	b.n	800941e <__ieee754_exp+0x66>
 800961c:	f3af 8000 	nop.w
 8009620:	fefa39ef 	.word	0xfefa39ef
 8009624:	40862e42 	.word	0x40862e42
 8009628:	8800759c 	.word	0x8800759c
 800962c:	7e37e43c 	.word	0x7e37e43c
 8009630:	d52d3051 	.word	0xd52d3051
 8009634:	c0874910 	.word	0xc0874910
 8009638:	72bea4d0 	.word	0x72bea4d0
 800963c:	3e663769 	.word	0x3e663769
 8009640:	c5d26bf1 	.word	0xc5d26bf1
 8009644:	3ebbbd41 	.word	0x3ebbbd41
 8009648:	af25de2c 	.word	0xaf25de2c
 800964c:	3f11566a 	.word	0x3f11566a
 8009650:	16bebd93 	.word	0x16bebd93
 8009654:	3f66c16c 	.word	0x3f66c16c
 8009658:	5555553e 	.word	0x5555553e
 800965c:	3fc55555 	.word	0x3fc55555
 8009660:	652b82fe 	.word	0x652b82fe
 8009664:	3ff71547 	.word	0x3ff71547
 8009668:	fee00000 	.word	0xfee00000
 800966c:	3fe62e42 	.word	0x3fe62e42
 8009670:	35793c76 	.word	0x35793c76
 8009674:	3dea39ef 	.word	0x3dea39ef
 8009678:	40862e41 	.word	0x40862e41
 800967c:	7fefffff 	.word	0x7fefffff
 8009680:	3ff0a2b1 	.word	0x3ff0a2b1
 8009684:	080156f8 	.word	0x080156f8
 8009688:	08015708 	.word	0x08015708
 800968c:	3ff00000 	.word	0x3ff00000
 8009690:	3fd62e42 	.word	0x3fd62e42
 8009694:	3e2fffff 	.word	0x3e2fffff
 8009698:	080156e8 	.word	0x080156e8
 800969c:	00000000 	.word	0x00000000

080096a0 <__ieee754_log>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	ec51 0b10 	vmov	r0, r1, d0
 80096a8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80096ac:	b087      	sub	sp, #28
 80096ae:	ee10 3a10 	vmov	r3, s0
 80096b2:	460d      	mov	r5, r1
 80096b4:	da27      	bge.n	8009706 <__ieee754_log+0x66>
 80096b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80096ba:	4313      	orrs	r3, r2
 80096bc:	d10a      	bne.n	80096d4 <__ieee754_log+0x34>
 80096be:	49cc      	ldr	r1, [pc, #816]	; (80099f0 <__ieee754_log+0x350>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	2300      	movs	r3, #0
 80096c4:	2000      	movs	r0, #0
 80096c6:	f7f7 f92d 	bl	8000924 <__aeabi_ddiv>
 80096ca:	ec41 0b10 	vmov	d0, r0, r1
 80096ce:	b007      	add	sp, #28
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	2900      	cmp	r1, #0
 80096d6:	da07      	bge.n	80096e8 <__ieee754_log+0x48>
 80096d8:	ee10 2a10 	vmov	r2, s0
 80096dc:	460b      	mov	r3, r1
 80096de:	f7f6 fe43 	bl	8000368 <__aeabi_dsub>
 80096e2:	2200      	movs	r2, #0
 80096e4:	2300      	movs	r3, #0
 80096e6:	e7ee      	b.n	80096c6 <__ieee754_log+0x26>
 80096e8:	4bc2      	ldr	r3, [pc, #776]	; (80099f4 <__ieee754_log+0x354>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	f7f6 fff0 	bl	80006d0 <__aeabi_dmul>
 80096f0:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80096f4:	460d      	mov	r5, r1
 80096f6:	4ac0      	ldr	r2, [pc, #768]	; (80099f8 <__ieee754_log+0x358>)
 80096f8:	4295      	cmp	r5, r2
 80096fa:	dd06      	ble.n	800970a <__ieee754_log+0x6a>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	f7f6 fe34 	bl	800036c <__adddf3>
 8009704:	e7e1      	b.n	80096ca <__ieee754_log+0x2a>
 8009706:	2300      	movs	r3, #0
 8009708:	e7f5      	b.n	80096f6 <__ieee754_log+0x56>
 800970a:	152c      	asrs	r4, r5, #20
 800970c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009710:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009714:	441c      	add	r4, r3
 8009716:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800971a:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800971e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009722:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009726:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800972a:	ea42 0105 	orr.w	r1, r2, r5
 800972e:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009732:	2200      	movs	r2, #0
 8009734:	4bb1      	ldr	r3, [pc, #708]	; (80099fc <__ieee754_log+0x35c>)
 8009736:	f7f6 fe17 	bl	8000368 <__aeabi_dsub>
 800973a:	1cab      	adds	r3, r5, #2
 800973c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009740:	2b02      	cmp	r3, #2
 8009742:	4682      	mov	sl, r0
 8009744:	468b      	mov	fp, r1
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	dc5b      	bgt.n	8009804 <__ieee754_log+0x164>
 800974c:	2300      	movs	r3, #0
 800974e:	f7f7 fa27 	bl	8000ba0 <__aeabi_dcmpeq>
 8009752:	b1d0      	cbz	r0, 800978a <__ieee754_log+0xea>
 8009754:	2c00      	cmp	r4, #0
 8009756:	f000 8170 	beq.w	8009a3a <__ieee754_log+0x39a>
 800975a:	4620      	mov	r0, r4
 800975c:	f7f6 ff52 	bl	8000604 <__aeabi_i2d>
 8009760:	a38f      	add	r3, pc, #572	; (adr r3, 80099a0 <__ieee754_log+0x300>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	4606      	mov	r6, r0
 8009768:	460f      	mov	r7, r1
 800976a:	f7f6 ffb1 	bl	80006d0 <__aeabi_dmul>
 800976e:	a38e      	add	r3, pc, #568	; (adr r3, 80099a8 <__ieee754_log+0x308>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	4604      	mov	r4, r0
 8009776:	460d      	mov	r5, r1
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	f7f6 ffa8 	bl	80006d0 <__aeabi_dmul>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	e7ba      	b.n	8009700 <__ieee754_log+0x60>
 800978a:	a389      	add	r3, pc, #548	; (adr r3, 80099b0 <__ieee754_log+0x310>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	4650      	mov	r0, sl
 8009792:	4659      	mov	r1, fp
 8009794:	f7f6 ff9c 	bl	80006d0 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	2000      	movs	r0, #0
 800979e:	4998      	ldr	r1, [pc, #608]	; (8009a00 <__ieee754_log+0x360>)
 80097a0:	f7f6 fde2 	bl	8000368 <__aeabi_dsub>
 80097a4:	4652      	mov	r2, sl
 80097a6:	4606      	mov	r6, r0
 80097a8:	460f      	mov	r7, r1
 80097aa:	465b      	mov	r3, fp
 80097ac:	4650      	mov	r0, sl
 80097ae:	4659      	mov	r1, fp
 80097b0:	f7f6 ff8e 	bl	80006d0 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4630      	mov	r0, r6
 80097ba:	4639      	mov	r1, r7
 80097bc:	f7f6 ff88 	bl	80006d0 <__aeabi_dmul>
 80097c0:	4606      	mov	r6, r0
 80097c2:	460f      	mov	r7, r1
 80097c4:	b934      	cbnz	r4, 80097d4 <__ieee754_log+0x134>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4650      	mov	r0, sl
 80097cc:	4659      	mov	r1, fp
 80097ce:	f7f6 fdcb 	bl	8000368 <__aeabi_dsub>
 80097d2:	e77a      	b.n	80096ca <__ieee754_log+0x2a>
 80097d4:	4620      	mov	r0, r4
 80097d6:	f7f6 ff15 	bl	8000604 <__aeabi_i2d>
 80097da:	a371      	add	r3, pc, #452	; (adr r3, 80099a0 <__ieee754_log+0x300>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	4680      	mov	r8, r0
 80097e2:	4689      	mov	r9, r1
 80097e4:	f7f6 ff74 	bl	80006d0 <__aeabi_dmul>
 80097e8:	a36f      	add	r3, pc, #444	; (adr r3, 80099a8 <__ieee754_log+0x308>)
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	4604      	mov	r4, r0
 80097f0:	460d      	mov	r5, r1
 80097f2:	4640      	mov	r0, r8
 80097f4:	4649      	mov	r1, r9
 80097f6:	f7f6 ff6b 	bl	80006d0 <__aeabi_dmul>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4630      	mov	r0, r6
 8009800:	4639      	mov	r1, r7
 8009802:	e0b2      	b.n	800996a <__ieee754_log+0x2ca>
 8009804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009808:	f7f6 fdb0 	bl	800036c <__adddf3>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4650      	mov	r0, sl
 8009812:	4659      	mov	r1, fp
 8009814:	f7f7 f886 	bl	8000924 <__aeabi_ddiv>
 8009818:	e9cd 0100 	strd	r0, r1, [sp]
 800981c:	4620      	mov	r0, r4
 800981e:	f7f6 fef1 	bl	8000604 <__aeabi_i2d>
 8009822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800982a:	4610      	mov	r0, r2
 800982c:	4619      	mov	r1, r3
 800982e:	f7f6 ff4f 	bl	80006d0 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800983a:	f7f6 ff49 	bl	80006d0 <__aeabi_dmul>
 800983e:	a35e      	add	r3, pc, #376	; (adr r3, 80099b8 <__ieee754_log+0x318>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	4606      	mov	r6, r0
 8009846:	460f      	mov	r7, r1
 8009848:	f7f6 ff42 	bl	80006d0 <__aeabi_dmul>
 800984c:	a35c      	add	r3, pc, #368	; (adr r3, 80099c0 <__ieee754_log+0x320>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fd8b 	bl	800036c <__adddf3>
 8009856:	4632      	mov	r2, r6
 8009858:	463b      	mov	r3, r7
 800985a:	f7f6 ff39 	bl	80006d0 <__aeabi_dmul>
 800985e:	a35a      	add	r3, pc, #360	; (adr r3, 80099c8 <__ieee754_log+0x328>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fd82 	bl	800036c <__adddf3>
 8009868:	4632      	mov	r2, r6
 800986a:	463b      	mov	r3, r7
 800986c:	f7f6 ff30 	bl	80006d0 <__aeabi_dmul>
 8009870:	a357      	add	r3, pc, #348	; (adr r3, 80099d0 <__ieee754_log+0x330>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd79 	bl	800036c <__adddf3>
 800987a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800987e:	f7f6 ff27 	bl	80006d0 <__aeabi_dmul>
 8009882:	a355      	add	r3, pc, #340	; (adr r3, 80099d8 <__ieee754_log+0x338>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800988c:	4630      	mov	r0, r6
 800988e:	4639      	mov	r1, r7
 8009890:	f7f6 ff1e 	bl	80006d0 <__aeabi_dmul>
 8009894:	a352      	add	r3, pc, #328	; (adr r3, 80099e0 <__ieee754_log+0x340>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f7f6 fd67 	bl	800036c <__adddf3>
 800989e:	4632      	mov	r2, r6
 80098a0:	463b      	mov	r3, r7
 80098a2:	f7f6 ff15 	bl	80006d0 <__aeabi_dmul>
 80098a6:	a350      	add	r3, pc, #320	; (adr r3, 80099e8 <__ieee754_log+0x348>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 fd5e 	bl	800036c <__adddf3>
 80098b0:	4632      	mov	r2, r6
 80098b2:	463b      	mov	r3, r7
 80098b4:	f7f6 ff0c 	bl	80006d0 <__aeabi_dmul>
 80098b8:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80098c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098c8:	f7f6 fd50 	bl	800036c <__adddf3>
 80098cc:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80098d0:	3551      	adds	r5, #81	; 0x51
 80098d2:	ea45 0508 	orr.w	r5, r5, r8
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	4606      	mov	r6, r0
 80098da:	460f      	mov	r7, r1
 80098dc:	dd50      	ble.n	8009980 <__ieee754_log+0x2e0>
 80098de:	2200      	movs	r2, #0
 80098e0:	4b47      	ldr	r3, [pc, #284]	; (8009a00 <__ieee754_log+0x360>)
 80098e2:	4650      	mov	r0, sl
 80098e4:	4659      	mov	r1, fp
 80098e6:	f7f6 fef3 	bl	80006d0 <__aeabi_dmul>
 80098ea:	4652      	mov	r2, sl
 80098ec:	465b      	mov	r3, fp
 80098ee:	f7f6 feef 	bl	80006d0 <__aeabi_dmul>
 80098f2:	4680      	mov	r8, r0
 80098f4:	4689      	mov	r9, r1
 80098f6:	b994      	cbnz	r4, 800991e <__ieee754_log+0x27e>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f6 fd34 	bl	800036c <__adddf3>
 8009904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009908:	f7f6 fee2 	bl	80006d0 <__aeabi_dmul>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4640      	mov	r0, r8
 8009912:	4649      	mov	r1, r9
 8009914:	f7f6 fd28 	bl	8000368 <__aeabi_dsub>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	e755      	b.n	80097ca <__ieee754_log+0x12a>
 800991e:	a320      	add	r3, pc, #128	; (adr r3, 80099a0 <__ieee754_log+0x300>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009928:	f7f6 fed2 	bl	80006d0 <__aeabi_dmul>
 800992c:	4642      	mov	r2, r8
 800992e:	464b      	mov	r3, r9
 8009930:	4604      	mov	r4, r0
 8009932:	460d      	mov	r5, r1
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f6 fd18 	bl	800036c <__adddf3>
 800993c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009940:	f7f6 fec6 	bl	80006d0 <__aeabi_dmul>
 8009944:	a318      	add	r3, pc, #96	; (adr r3, 80099a8 <__ieee754_log+0x308>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009952:	f7f6 febd 	bl	80006d0 <__aeabi_dmul>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 fd05 	bl	800036c <__adddf3>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	4640      	mov	r0, r8
 8009968:	4649      	mov	r1, r9
 800996a:	f7f6 fcfd 	bl	8000368 <__aeabi_dsub>
 800996e:	4652      	mov	r2, sl
 8009970:	465b      	mov	r3, fp
 8009972:	f7f6 fcf9 	bl	8000368 <__aeabi_dsub>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4620      	mov	r0, r4
 800997c:	4629      	mov	r1, r5
 800997e:	e726      	b.n	80097ce <__ieee754_log+0x12e>
 8009980:	2c00      	cmp	r4, #0
 8009982:	d13f      	bne.n	8009a04 <__ieee754_log+0x364>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4650      	mov	r0, sl
 800998a:	4659      	mov	r1, fp
 800998c:	f7f6 fcec 	bl	8000368 <__aeabi_dsub>
 8009990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009994:	f7f6 fe9c 	bl	80006d0 <__aeabi_dmul>
 8009998:	e7be      	b.n	8009918 <__ieee754_log+0x278>
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w
 80099a0:	fee00000 	.word	0xfee00000
 80099a4:	3fe62e42 	.word	0x3fe62e42
 80099a8:	35793c76 	.word	0x35793c76
 80099ac:	3dea39ef 	.word	0x3dea39ef
 80099b0:	55555555 	.word	0x55555555
 80099b4:	3fd55555 	.word	0x3fd55555
 80099b8:	df3e5244 	.word	0xdf3e5244
 80099bc:	3fc2f112 	.word	0x3fc2f112
 80099c0:	96cb03de 	.word	0x96cb03de
 80099c4:	3fc74664 	.word	0x3fc74664
 80099c8:	94229359 	.word	0x94229359
 80099cc:	3fd24924 	.word	0x3fd24924
 80099d0:	55555593 	.word	0x55555593
 80099d4:	3fe55555 	.word	0x3fe55555
 80099d8:	d078c69f 	.word	0xd078c69f
 80099dc:	3fc39a09 	.word	0x3fc39a09
 80099e0:	1d8e78af 	.word	0x1d8e78af
 80099e4:	3fcc71c5 	.word	0x3fcc71c5
 80099e8:	9997fa04 	.word	0x9997fa04
 80099ec:	3fd99999 	.word	0x3fd99999
 80099f0:	c3500000 	.word	0xc3500000
 80099f4:	43500000 	.word	0x43500000
 80099f8:	7fefffff 	.word	0x7fefffff
 80099fc:	3ff00000 	.word	0x3ff00000
 8009a00:	3fe00000 	.word	0x3fe00000
 8009a04:	a30e      	add	r3, pc, #56	; (adr r3, 8009a40 <__ieee754_log+0x3a0>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a0e:	f7f6 fe5f 	bl	80006d0 <__aeabi_dmul>
 8009a12:	4632      	mov	r2, r6
 8009a14:	463b      	mov	r3, r7
 8009a16:	4604      	mov	r4, r0
 8009a18:	460d      	mov	r5, r1
 8009a1a:	4650      	mov	r0, sl
 8009a1c:	4659      	mov	r1, fp
 8009a1e:	f7f6 fca3 	bl	8000368 <__aeabi_dsub>
 8009a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a26:	f7f6 fe53 	bl	80006d0 <__aeabi_dmul>
 8009a2a:	a307      	add	r3, pc, #28	; (adr r3, 8009a48 <__ieee754_log+0x3a8>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	4606      	mov	r6, r0
 8009a32:	460f      	mov	r7, r1
 8009a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a38:	e6dd      	b.n	80097f6 <__ieee754_log+0x156>
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	e644      	b.n	80096ca <__ieee754_log+0x2a>
 8009a40:	fee00000 	.word	0xfee00000
 8009a44:	3fe62e42 	.word	0x3fe62e42
 8009a48:	35793c76 	.word	0x35793c76
 8009a4c:	3dea39ef 	.word	0x3dea39ef

08009a50 <__ieee754_log10>:
 8009a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	ec55 4b10 	vmov	r4, r5, d0
 8009a58:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8009a5c:	ee10 2a10 	vmov	r2, s0
 8009a60:	462b      	mov	r3, r5
 8009a62:	da30      	bge.n	8009ac6 <__ieee754_log10+0x76>
 8009a64:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	d10a      	bne.n	8009a82 <__ieee754_log10+0x32>
 8009a6c:	493c      	ldr	r1, [pc, #240]	; (8009b60 <__ieee754_log10+0x110>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2300      	movs	r3, #0
 8009a72:	2000      	movs	r0, #0
 8009a74:	f7f6 ff56 	bl	8000924 <__aeabi_ddiv>
 8009a78:	ec41 0b10 	vmov	d0, r0, r1
 8009a7c:	b003      	add	sp, #12
 8009a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	da09      	bge.n	8009a9a <__ieee754_log10+0x4a>
 8009a86:	ee10 2a10 	vmov	r2, s0
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7f6 fc6a 	bl	8000368 <__aeabi_dsub>
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	e7ec      	b.n	8009a74 <__ieee754_log10+0x24>
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4b31      	ldr	r3, [pc, #196]	; (8009b64 <__ieee754_log10+0x114>)
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	ee10 0a10 	vmov	r0, s0
 8009aa4:	f7f6 fe14 	bl	80006d0 <__aeabi_dmul>
 8009aa8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8009aac:	4604      	mov	r4, r0
 8009aae:	460d      	mov	r5, r1
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	492d      	ldr	r1, [pc, #180]	; (8009b68 <__ieee754_log10+0x118>)
 8009ab4:	428b      	cmp	r3, r1
 8009ab6:	dd08      	ble.n	8009aca <__ieee754_log10+0x7a>
 8009ab8:	4622      	mov	r2, r4
 8009aba:	462b      	mov	r3, r5
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f6 fc54 	bl	800036c <__adddf3>
 8009ac4:	e7d8      	b.n	8009a78 <__ieee754_log10+0x28>
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	e7f3      	b.n	8009ab2 <__ieee754_log10+0x62>
 8009aca:	1518      	asrs	r0, r3, #20
 8009acc:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009ad0:	4410      	add	r0, r2
 8009ad2:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8009ad6:	4448      	add	r0, r9
 8009ad8:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8009adc:	f7f6 fd92 	bl	8000604 <__aeabi_i2d>
 8009ae0:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8009ae4:	3303      	adds	r3, #3
 8009ae6:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8009aea:	ec45 4b10 	vmov	d0, r4, r5
 8009aee:	4606      	mov	r6, r0
 8009af0:	460f      	mov	r7, r1
 8009af2:	f7ff fdd5 	bl	80096a0 <__ieee754_log>
 8009af6:	a314      	add	r3, pc, #80	; (adr r3, 8009b48 <__ieee754_log10+0xf8>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	4630      	mov	r0, r6
 8009afe:	4639      	mov	r1, r7
 8009b00:	ed8d 0b00 	vstr	d0, [sp]
 8009b04:	f7f6 fde4 	bl	80006d0 <__aeabi_dmul>
 8009b08:	ed9d 0b00 	vldr	d0, [sp]
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	a30f      	add	r3, pc, #60	; (adr r3, 8009b50 <__ieee754_log10+0x100>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	ec51 0b10 	vmov	r0, r1, d0
 8009b1a:	f7f6 fdd9 	bl	80006d0 <__aeabi_dmul>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4620      	mov	r0, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7f6 fc21 	bl	800036c <__adddf3>
 8009b2a:	a30b      	add	r3, pc, #44	; (adr r3, 8009b58 <__ieee754_log10+0x108>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f6 fdca 	bl	80006d0 <__aeabi_dmul>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4620      	mov	r0, r4
 8009b42:	4629      	mov	r1, r5
 8009b44:	e7bc      	b.n	8009ac0 <__ieee754_log10+0x70>
 8009b46:	bf00      	nop
 8009b48:	11f12b36 	.word	0x11f12b36
 8009b4c:	3d59fef3 	.word	0x3d59fef3
 8009b50:	1526e50e 	.word	0x1526e50e
 8009b54:	3fdbcb7b 	.word	0x3fdbcb7b
 8009b58:	509f6000 	.word	0x509f6000
 8009b5c:	3fd34413 	.word	0x3fd34413
 8009b60:	c3500000 	.word	0xc3500000
 8009b64:	43500000 	.word	0x43500000
 8009b68:	7fefffff 	.word	0x7fefffff

08009b6c <finite>:
 8009b6c:	ee10 3a90 	vmov	r3, s1
 8009b70:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009b74:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009b78:	0fc0      	lsrs	r0, r0, #31
 8009b7a:	4770      	bx	lr

08009b7c <matherr>:
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	4770      	bx	lr

08009b80 <nan>:
 8009b80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009b88 <nan+0x8>
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	00000000 	.word	0x00000000
 8009b8c:	7ff80000 	.word	0x7ff80000

08009b90 <_init>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr

08009b9c <_fini>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr
